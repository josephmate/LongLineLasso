<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="885.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="885.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[kernel.kallsyms]] (2 samples, 0.01%)</title><rect x="0.0074%" y="821" width="0.0148%" height="15" fill="rgb(227,0,7)"/><text x="0.2574%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (107 samples, 0.79%)</title><rect x="10.3902%" y="565" width="0.7907%" height="15" fill="rgb(217,0,24)"/><text x="10.6402%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (138 samples, 1.02%)</title><rect x="32.3677%" y="533" width="1.0198%" height="15" fill="rgb(221,193,54)"/><text x="32.6177%" y="543.50"></text></g><g><title>core::cmp::min (22 samples, 0.16%)</title><rect x="33.2249%" y="517" width="0.1626%" height="15" fill="rgb(248,212,6)"/><text x="33.4749%" y="527.50"></text></g><g><title>core::cmp::Ord::min (22 samples, 0.16%)</title><rect x="33.2249%" y="501" width="0.1626%" height="15" fill="rgb(208,68,35)"/><text x="33.4749%" y="511.50"></text></g><g><title>core::cmp::min_by (22 samples, 0.16%)</title><rect x="33.2249%" y="485" width="0.1626%" height="15" fill="rgb(232,128,0)"/><text x="33.4749%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::BufRead&gt;::consume (362 samples, 2.68%)</title><rect x="31.7544%" y="549" width="2.6751%" height="15" fill="rgb(207,160,47)"/><text x="32.0044%" y="559.50">&lt;s..</text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (141 samples, 1.04%)</title><rect x="33.3875%" y="533" width="1.0420%" height="15" fill="rgb(228,23,34)"/><text x="33.6375%" y="543.50"></text></g><g><title>core::char::convert::from_u32 (13 samples, 0.10%)</title><rect x="34.4295%" y="549" width="0.0961%" height="15" fill="rgb(218,30,26)"/><text x="34.6795%" y="559.50"></text></g><g><title>core::char::convert::&lt;impl core::convert::TryFrom&lt;u32&gt; for char&gt;::try_from (13 samples, 0.10%)</title><rect x="34.4295%" y="533" width="0.0961%" height="15" fill="rgb(220,122,19)"/><text x="34.6795%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (111 samples, 0.82%)</title><rect x="34.5256%" y="549" width="0.8203%" height="15" fill="rgb(250,228,42)"/><text x="34.7756%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (111 samples, 0.82%)</title><rect x="34.5256%" y="533" width="0.8203%" height="15" fill="rgb(240,193,28)"/><text x="34.7756%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (108 samples, 0.80%)</title><rect x="60.2793%" y="501" width="0.7981%" height="15" fill="rgb(216,20,37)"/><text x="60.5293%" y="511.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (108 samples, 0.80%)</title><rect x="60.2793%" y="485" width="0.7981%" height="15" fill="rgb(206,188,39)"/><text x="60.5293%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (108 samples, 0.80%)</title><rect x="60.2793%" y="469" width="0.7981%" height="15" fill="rgb(217,207,13)"/><text x="60.5293%" y="479.50"></text></g><g><title>__GI___libc_read (108 samples, 0.80%)</title><rect x="60.2793%" y="453" width="0.7981%" height="15" fill="rgb(231,73,38)"/><text x="60.5293%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (104 samples, 0.77%)</title><rect x="60.3089%" y="437" width="0.7685%" height="15" fill="rgb(225,20,46)"/><text x="60.5589%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (104 samples, 0.77%)</title><rect x="60.3089%" y="421" width="0.7685%" height="15" fill="rgb(210,31,41)"/><text x="60.5589%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (100 samples, 0.74%)</title><rect x="60.3385%" y="405" width="0.7390%" height="15" fill="rgb(221,200,47)"/><text x="60.5885%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (100 samples, 0.74%)</title><rect x="60.3385%" y="389" width="0.7390%" height="15" fill="rgb(226,26,5)"/><text x="60.5885%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (99 samples, 0.73%)</title><rect x="60.3458%" y="373" width="0.7316%" height="15" fill="rgb(249,33,26)"/><text x="60.5958%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (97 samples, 0.72%)</title><rect x="60.3606%" y="357" width="0.7168%" height="15" fill="rgb(235,183,28)"/><text x="60.6106%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (96 samples, 0.71%)</title><rect x="60.3680%" y="341" width="0.7094%" height="15" fill="rgb(221,5,38)"/><text x="60.6180%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (93 samples, 0.69%)</title><rect x="60.3902%" y="325" width="0.6873%" height="15" fill="rgb(247,18,42)"/><text x="60.6402%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (86 samples, 0.64%)</title><rect x="60.4419%" y="309" width="0.6355%" height="15" fill="rgb(241,131,45)"/><text x="60.6919%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (85 samples, 0.63%)</title><rect x="60.4493%" y="293" width="0.6281%" height="15" fill="rgb(249,31,29)"/><text x="60.6993%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (76 samples, 0.56%)</title><rect x="60.5158%" y="277" width="0.5616%" height="15" fill="rgb(225,111,53)"/><text x="60.7658%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (74 samples, 0.55%)</title><rect x="60.5306%" y="261" width="0.5469%" height="15" fill="rgb(238,160,17)"/><text x="60.7806%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.03%)</title><rect x="61.0479%" y="245" width="0.0296%" height="15" fill="rgb(214,148,48)"/><text x="61.2979%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,343 samples, 54.26%)</title><rect x="7.5894%" y="597" width="54.2640%" height="15" fill="rgb(232,36,49)"/><text x="7.8394%" y="607.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>&lt;utf8_chars::Chars&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,242 samples, 53.52%)</title><rect x="8.3358%" y="581" width="53.5176%" height="15" fill="rgb(209,103,24)"/><text x="8.5858%" y="591.50">&lt;utf8_chars::Chars&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>utf8_chars::BufReadCharsExt::read_char_raw (6,857 samples, 50.67%)</title><rect x="11.1809%" y="565" width="50.6725%" height="15" fill="rgb(229,88,8)"/><text x="11.4309%" y="575.50">utf8_chars::BufReadCharsExt::read_char_raw</text></g><g><title>utf8_chars::read_byte_and_ignore_interrupts (3,587 samples, 26.51%)</title><rect x="35.3458%" y="549" width="26.5075%" height="15" fill="rgb(213,181,19)"/><text x="35.5958%" y="559.50">utf8_chars::read_byte_and_ignore_interrupts</text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::BufRead&gt;::fill_buf (1,383 samples, 10.22%)</title><rect x="51.6332%" y="533" width="10.2202%" height="15" fill="rgb(254,191,54)"/><text x="51.8832%" y="543.50">&lt;std::io::stdio..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (615 samples, 4.54%)</title><rect x="57.3086%" y="517" width="4.5448%" height="15" fill="rgb(241,83,37)"/><text x="57.5586%" y="527.50">&lt;std:..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (105 samples, 0.78%)</title><rect x="61.0774%" y="501" width="0.7759%" height="15" fill="rgb(233,36,39)"/><text x="61.3274%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (105 samples, 0.78%)</title><rect x="61.0774%" y="485" width="0.7759%" height="15" fill="rgb(226,3,54)"/><text x="61.3274%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (104 samples, 0.77%)</title><rect x="61.0848%" y="469" width="0.7685%" height="15" fill="rgb(245,192,40)"/><text x="61.3348%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (104 samples, 0.77%)</title><rect x="61.0848%" y="453" width="0.7685%" height="15" fill="rgb(238,167,29)"/><text x="61.3348%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (104 samples, 0.77%)</title><rect x="61.0848%" y="437" width="0.7685%" height="15" fill="rgb(232,182,51)"/><text x="61.3348%" y="447.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (381 samples, 2.82%)</title><rect x="61.8534%" y="597" width="2.8155%" height="15" fill="rgb(231,60,39)"/><text x="62.1034%" y="607.50">&lt;c..</text></g><g><title>core::str::next_code_point (381 samples, 2.82%)</title><rect x="61.8534%" y="581" width="2.8155%" height="15" fill="rgb(208,69,12)"/><text x="62.1034%" y="591.50">co..</text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (228 samples, 1.68%)</title><rect x="62.9840%" y="565" width="1.6849%" height="15" fill="rgb(235,93,37)"/><text x="63.2340%" y="575.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (91 samples, 0.67%)</title><rect x="63.9965%" y="549" width="0.6725%" height="15" fill="rgb(213,116,39)"/><text x="64.2465%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (91 samples, 0.67%)</title><rect x="63.9965%" y="533" width="0.6725%" height="15" fill="rgb(222,207,29)"/><text x="64.2465%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (188 samples, 1.39%)</title><rect x="64.6763%" y="597" width="1.3893%" height="15" fill="rgb(206,96,30)"/><text x="64.9263%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::count (95 samples, 0.70%)</title><rect x="65.3636%" y="581" width="0.7020%" height="15" fill="rgb(218,138,4)"/><text x="65.6136%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (11 samples, 0.08%)</title><rect x="65.9843%" y="565" width="0.0813%" height="15" fill="rgb(250,191,14)"/><text x="66.2343%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (81 samples, 0.60%)</title><rect x="70.2705%" y="565" width="0.5986%" height="15" fill="rgb(239,60,40)"/><text x="70.5205%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (81 samples, 0.60%)</title><rect x="70.2705%" y="549" width="0.5986%" height="15" fill="rgb(206,27,48)"/><text x="70.5205%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (82 samples, 0.61%)</title><rect x="70.2705%" y="581" width="0.6060%" height="15" fill="rgb(225,35,8)"/><text x="70.5205%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (267 samples, 1.97%)</title><rect x="70.8764%" y="581" width="1.9731%" height="15" fill="rgb(250,213,24)"/><text x="71.1264%" y="591.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_back (1,029 samples, 7.60%)</title><rect x="66.0656%" y="597" width="7.6042%" height="15" fill="rgb(247,123,22)"/><text x="66.3156%" y="607.50">alloc::col..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (111 samples, 0.82%)</title><rect x="72.8495%" y="581" width="0.8203%" height="15" fill="rgb(231,138,38)"/><text x="73.0995%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (111 samples, 0.82%)</title><rect x="72.8495%" y="565" width="0.8203%" height="15" fill="rgb(231,145,46)"/><text x="73.0995%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (153 samples, 1.13%)</title><rect x="77.1578%" y="565" width="1.1307%" height="15" fill="rgb(251,118,11)"/><text x="77.4078%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (153 samples, 1.13%)</title><rect x="77.1578%" y="549" width="1.1307%" height="15" fill="rgb(217,147,25)"/><text x="77.4078%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (155 samples, 1.15%)</title><rect x="77.1578%" y="581" width="1.1454%" height="15" fill="rgb(247,81,37)"/><text x="77.4078%" y="591.50"></text></g><g><title>core::ptr::read (2 samples, 0.01%)</title><rect x="78.2885%" y="565" width="0.0148%" height="15" fill="rgb(209,12,38)"/><text x="78.5385%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="78.2885%" y="549" width="0.0148%" height="15" fill="rgb(227,1,9)"/><text x="78.5385%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (3 samples, 0.02%)</title><rect x="78.3033%" y="581" width="0.0222%" height="15" fill="rgb(248,47,43)"/><text x="78.5533%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (200 samples, 1.48%)</title><rect x="78.3255%" y="565" width="1.4780%" height="15" fill="rgb(221,10,30)"/><text x="78.5755%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (843 samples, 6.23%)</title><rect x="73.6698%" y="597" width="6.2297%" height="15" fill="rgb(210,229,1)"/><text x="73.9198%" y="607.50">alloc::c..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (213 samples, 1.57%)</title><rect x="78.3255%" y="581" width="1.5740%" height="15" fill="rgb(222,148,37)"/><text x="78.5755%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (13 samples, 0.10%)</title><rect x="79.8034%" y="565" width="0.0961%" height="15" fill="rgb(234,67,33)"/><text x="80.0534%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (93 samples, 0.69%)</title><rect x="83.3654%" y="565" width="0.6873%" height="15" fill="rgb(247,98,35)"/><text x="83.6154%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (93 samples, 0.69%)</title><rect x="83.3654%" y="549" width="0.6873%" height="15" fill="rgb(247,138,52)"/><text x="83.6154%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (500 samples, 3.69%)</title><rect x="83.3654%" y="581" width="3.6949%" height="15" fill="rgb(213,79,30)"/><text x="83.6154%" y="591.50">allo..</text></g><g><title>core::ptr::write (407 samples, 3.01%)</title><rect x="84.0526%" y="565" width="3.0077%" height="15" fill="rgb(246,177,23)"/><text x="84.3026%" y="575.50">cor..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (492 samples, 3.64%)</title><rect x="87.0603%" y="581" width="3.6358%" height="15" fill="rgb(230,62,27)"/><text x="87.3103%" y="591.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (414 samples, 3.06%)</title><rect x="87.6367%" y="565" width="3.0594%" height="15" fill="rgb(216,154,8)"/><text x="87.8867%" y="575.50">all..</text></g><g><title>alloc::collections::vec_deque::count (414 samples, 3.06%)</title><rect x="87.6367%" y="549" width="3.0594%" height="15" fill="rgb(244,35,45)"/><text x="87.8867%" y="559.50">all..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (198 samples, 1.46%)</title><rect x="89.2329%" y="533" width="1.4632%" height="15" fill="rgb(251,115,12)"/><text x="89.4829%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (157 samples, 1.16%)</title><rect x="90.6961%" y="565" width="1.1602%" height="15" fill="rgb(240,54,50)"/><text x="90.9461%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (1,827 samples, 13.50%)</title><rect x="79.8995%" y="597" width="13.5013%" height="15" fill="rgb(233,84,52)"/><text x="80.1495%" y="607.50">alloc::collections::..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (366 samples, 2.70%)</title><rect x="90.6961%" y="581" width="2.7047%" height="15" fill="rgb(207,117,47)"/><text x="90.9461%" y="591.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (209 samples, 1.54%)</title><rect x="91.8563%" y="565" width="1.5445%" height="15" fill="rgb(249,43,39)"/><text x="92.1063%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (98 samples, 0.72%)</title><rect x="94.8492%" y="581" width="0.7242%" height="15" fill="rgb(209,38,44)"/><text x="95.0992%" y="591.50"></text></g><g><title>core::ptr::write (98 samples, 0.72%)</title><rect x="94.8492%" y="565" width="0.7242%" height="15" fill="rgb(236,212,23)"/><text x="95.0992%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (117 samples, 0.86%)</title><rect x="95.5735%" y="581" width="0.8646%" height="15" fill="rgb(242,79,21)"/><text x="95.8235%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (96 samples, 0.71%)</title><rect x="96.4381%" y="565" width="0.7094%" height="15" fill="rgb(211,96,35)"/><text x="96.6881%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (515 samples, 3.81%)</title><rect x="93.4008%" y="597" width="3.8058%" height="15" fill="rgb(253,215,40)"/><text x="93.6508%" y="607.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (104 samples, 0.77%)</title><rect x="96.4381%" y="581" width="0.7685%" height="15" fill="rgb(211,81,21)"/><text x="96.6881%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (8 samples, 0.06%)</title><rect x="97.1475%" y="565" width="0.0591%" height="15" fill="rgb(208,190,38)"/><text x="97.3975%" y="575.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.01%)</title><rect x="97.2066%" y="597" width="0.0148%" height="15" fill="rgb(235,213,38)"/><text x="97.4566%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.01%)</title><rect x="97.2066%" y="581" width="0.0148%" height="15" fill="rgb(237,122,38)"/><text x="97.4566%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.01%)</title><rect x="97.2066%" y="565" width="0.0148%" height="15" fill="rgb(244,218,35)"/><text x="97.4566%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.01%)</title><rect x="97.2066%" y="549" width="0.0148%" height="15" fill="rgb(240,68,47)"/><text x="97.4566%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.01%)</title><rect x="97.2066%" y="533" width="0.0148%" height="15" fill="rgb(210,16,53)"/><text x="97.4566%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.01%)</title><rect x="97.2066%" y="517" width="0.0148%" height="15" fill="rgb(235,124,12)"/><text x="97.4566%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.01%)</title><rect x="97.2066%" y="501" width="0.0148%" height="15" fill="rgb(224,169,11)"/><text x="97.4566%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="97.2066%" y="485" width="0.0148%" height="15" fill="rgb(250,166,2)"/><text x="97.4566%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (2 samples, 0.01%)</title><rect x="97.2066%" y="469" width="0.0148%" height="15" fill="rgb(242,216,29)"/><text x="97.4566%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.01%)</title><rect x="97.2066%" y="453" width="0.0148%" height="15" fill="rgb(230,116,27)"/><text x="97.4566%" y="463.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.01%)</title><rect x="97.2066%" y="437" width="0.0148%" height="15" fill="rgb(228,99,48)"/><text x="97.4566%" y="447.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.01%)</title><rect x="97.2066%" y="421" width="0.0148%" height="15" fill="rgb(253,11,6)"/><text x="97.4566%" y="431.50"></text></g><g><title>_int_realloc (2 samples, 0.01%)</title><rect x="97.2066%" y="405" width="0.0148%" height="15" fill="rgb(247,143,39)"/><text x="97.4566%" y="415.50"></text></g><g><title>__memcpy_ssse3 (2 samples, 0.01%)</title><rect x="97.2066%" y="389" width="0.0148%" height="15" fill="rgb(236,97,10)"/><text x="97.4566%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="97.2214%" y="597" width="0.0222%" height="15" fill="rgb(233,208,19)"/><text x="97.4714%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="97.2214%" y="581" width="0.0222%" height="15" fill="rgb(216,164,2)"/><text x="97.4714%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (3 samples, 0.02%)</title><rect x="97.2214%" y="565" width="0.0222%" height="15" fill="rgb(220,129,5)"/><text x="97.4714%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (3 samples, 0.02%)</title><rect x="97.2214%" y="549" width="0.0222%" height="15" fill="rgb(242,17,10)"/><text x="97.4714%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.01%)</title><rect x="97.2288%" y="533" width="0.0148%" height="15" fill="rgb(242,107,0)"/><text x="97.4788%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="97.2288%" y="517" width="0.0148%" height="15" fill="rgb(251,28,31)"/><text x="97.4788%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="97.2288%" y="501" width="0.0148%" height="15" fill="rgb(233,223,10)"/><text x="97.4788%" y="511.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.01%)</title><rect x="97.2288%" y="485" width="0.0148%" height="15" fill="rgb(215,21,27)"/><text x="97.4788%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.01%)</title><rect x="97.2288%" y="469" width="0.0148%" height="15" fill="rgb(232,23,21)"/><text x="97.4788%" y="479.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.01%)</title><rect x="97.2288%" y="453" width="0.0148%" height="15" fill="rgb(244,5,23)"/><text x="97.4788%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (115 samples, 0.85%)</title><rect x="97.2436%" y="597" width="0.8498%" height="15" fill="rgb(226,81,46)"/><text x="97.4936%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (105 samples, 0.78%)</title><rect x="98.0934%" y="597" width="0.7759%" height="15" fill="rgb(247,70,30)"/><text x="98.3434%" y="607.50"></text></g><g><title>&lt;lll::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (13,495 samples, 99.73%)</title><rect x="0.0369%" y="613" width="99.7266%" height="15" fill="rgb(212,68,19)"/><text x="0.2869%" y="623.50">&lt;lll::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::str::&lt;impl str&gt;::chars (121 samples, 0.89%)</title><rect x="98.8693%" y="597" width="0.8942%" height="15" fill="rgb(240,187,13)"/><text x="99.1193%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (121 samples, 0.89%)</title><rect x="98.8693%" y="581" width="0.8942%" height="15" fill="rgb(223,113,26)"/><text x="99.1193%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (121 samples, 0.89%)</title><rect x="98.8693%" y="565" width="0.8942%" height="15" fill="rgb(206,192,2)"/><text x="99.1193%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (121 samples, 0.89%)</title><rect x="98.8693%" y="549" width="0.8942%" height="15" fill="rgb(241,108,4)"/><text x="99.1193%" y="559.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (16 samples, 0.12%)</title><rect x="99.7635%" y="549" width="0.1182%" height="15" fill="rgb(247,173,49)"/><text x="100.0135%" y="559.50"></text></g><g><title>std::io::Write::write_fmt (16 samples, 0.12%)</title><rect x="99.7635%" y="533" width="0.1182%" height="15" fill="rgb(224,114,35)"/><text x="100.0135%" y="543.50"></text></g><g><title>core::fmt::write (15 samples, 0.11%)</title><rect x="99.7709%" y="517" width="0.1108%" height="15" fill="rgb(245,159,27)"/><text x="100.0209%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (15 samples, 0.11%)</title><rect x="99.7709%" y="501" width="0.1108%" height="15" fill="rgb(245,172,44)"/><text x="100.0209%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (15 samples, 0.11%)</title><rect x="99.7709%" y="485" width="0.1108%" height="15" fill="rgb(236,23,11)"/><text x="100.0209%" y="495.50"></text></g><g><title>std::io::Write::write_all (15 samples, 0.11%)</title><rect x="99.7709%" y="469" width="0.1108%" height="15" fill="rgb(205,117,38)"/><text x="100.0209%" y="479.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (15 samples, 0.11%)</title><rect x="99.7709%" y="453" width="0.1108%" height="15" fill="rgb(237,72,25)"/><text x="100.0209%" y="463.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (14 samples, 0.10%)</title><rect x="99.7783%" y="437" width="0.1035%" height="15" fill="rgb(244,70,9)"/><text x="100.0283%" y="447.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (14 samples, 0.10%)</title><rect x="99.7783%" y="421" width="0.1035%" height="15" fill="rgb(217,125,39)"/><text x="100.0283%" y="431.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (14 samples, 0.10%)</title><rect x="99.7783%" y="405" width="0.1035%" height="15" fill="rgb(235,36,10)"/><text x="100.0283%" y="415.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (14 samples, 0.10%)</title><rect x="99.7783%" y="389" width="0.1035%" height="15" fill="rgb(251,123,47)"/><text x="100.0283%" y="399.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (14 samples, 0.10%)</title><rect x="99.7783%" y="373" width="0.1035%" height="15" fill="rgb(221,13,13)"/><text x="100.0283%" y="383.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (14 samples, 0.10%)</title><rect x="99.7783%" y="357" width="0.1035%" height="15" fill="rgb(238,131,9)"/><text x="100.0283%" y="367.50"></text></g><g><title>__GI___libc_write (14 samples, 0.10%)</title><rect x="99.7783%" y="341" width="0.1035%" height="15" fill="rgb(211,50,8)"/><text x="100.0283%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="325" width="0.1035%" height="15" fill="rgb(245,182,24)"/><text x="100.0283%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="309" width="0.1035%" height="15" fill="rgb(242,14,37)"/><text x="100.0283%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="293" width="0.1035%" height="15" fill="rgb(246,228,12)"/><text x="100.0283%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="277" width="0.1035%" height="15" fill="rgb(213,55,15)"/><text x="100.0283%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="261" width="0.1035%" height="15" fill="rgb(209,9,3)"/><text x="100.0283%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="245" width="0.1035%" height="15" fill="rgb(230,59,30)"/><text x="100.0283%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (14 samples, 0.10%)</title><rect x="99.7783%" y="229" width="0.1035%" height="15" fill="rgb(209,121,21)"/><text x="100.0283%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.10%)</title><rect x="99.7857%" y="213" width="0.0961%" height="15" fill="rgb(220,109,13)"/><text x="100.0357%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.10%)</title><rect x="99.7857%" y="197" width="0.0961%" height="15" fill="rgb(232,18,1)"/><text x="100.0357%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.10%)</title><rect x="99.7857%" y="181" width="0.0961%" height="15" fill="rgb(215,41,42)"/><text x="100.0357%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.10%)</title><rect x="99.7857%" y="165" width="0.0961%" height="15" fill="rgb(224,123,36)"/><text x="100.0357%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.09%)</title><rect x="99.7931%" y="149" width="0.0887%" height="15" fill="rgb(240,125,3)"/><text x="100.0431%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.8005%" y="133" width="0.0813%" height="15" fill="rgb(205,98,50)"/><text x="100.0505%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.07%)</title><rect x="99.8079%" y="117" width="0.0739%" height="15" fill="rgb(205,185,37)"/><text x="100.0579%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.05%)</title><rect x="99.8300%" y="101" width="0.0517%" height="15" fill="rgb(238,207,15)"/><text x="100.0800%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.04%)</title><rect x="99.8374%" y="85" width="0.0443%" height="15" fill="rgb(213,199,42)"/><text x="100.0874%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.03%)</title><rect x="99.8522%" y="69" width="0.0296%" height="15" fill="rgb(235,201,11)"/><text x="100.1022%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.03%)</title><rect x="99.8522%" y="53" width="0.0296%" height="15" fill="rgb(207,46,11)"/><text x="100.1022%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.03%)</title><rect x="99.8522%" y="37" width="0.0296%" height="15" fill="rgb(241,35,35)"/><text x="100.1022%" y="47.50"></text></g><g><title>std::panic::catch_unwind (13,512 samples, 99.85%)</title><rect x="0.0369%" y="757" width="99.8522%" height="15" fill="rgb(243,32,47)"/><text x="0.2869%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,512 samples, 99.85%)</title><rect x="0.0369%" y="741" width="99.8522%" height="15" fill="rgb(247,202,23)"/><text x="0.2869%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,512 samples, 99.85%)</title><rect x="0.0369%" y="725" width="99.8522%" height="15" fill="rgb(219,102,11)"/><text x="0.2869%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13,512 samples, 99.85%)</title><rect x="0.0369%" y="709" width="99.8522%" height="15" fill="rgb(243,110,44)"/><text x="0.2869%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (13,512 samples, 99.85%)</title><rect x="0.0369%" y="693" width="99.8522%" height="15" fill="rgb(222,74,54)"/><text x="0.2869%" y="703.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,512 samples, 99.85%)</title><rect x="0.0369%" y="677" width="99.8522%" height="15" fill="rgb(216,99,12)"/><text x="0.2869%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,512 samples, 99.85%)</title><rect x="0.0369%" y="661" width="99.8522%" height="15" fill="rgb(226,22,26)"/><text x="0.2869%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>lll::main (13,512 samples, 99.85%)</title><rect x="0.0369%" y="645" width="99.8522%" height="15" fill="rgb(217,163,10)"/><text x="0.2869%" y="655.50">lll::main</text></g><g><title>lll::find_match_std_io (13,512 samples, 99.85%)</title><rect x="0.0369%" y="629" width="99.8522%" height="15" fill="rgb(213,25,53)"/><text x="0.2869%" y="639.50">lll::find_match_std_io</text></g><g><title>std::io::stdio::_print (17 samples, 0.13%)</title><rect x="99.7635%" y="613" width="0.1256%" height="15" fill="rgb(252,105,26)"/><text x="100.0135%" y="623.50"></text></g><g><title>std::io::stdio::print_to (17 samples, 0.13%)</title><rect x="99.7635%" y="597" width="0.1256%" height="15" fill="rgb(220,39,43)"/><text x="100.0135%" y="607.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.13%)</title><rect x="99.7635%" y="581" width="0.1256%" height="15" fill="rgb(229,68,48)"/><text x="100.0135%" y="591.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (17 samples, 0.13%)</title><rect x="99.7635%" y="565" width="0.1256%" height="15" fill="rgb(252,8,32)"/><text x="100.0135%" y="575.50"></text></g><g><title>__libc_start_main (13,513 samples, 99.86%)</title><rect x="0.0369%" y="805" width="99.8596%" height="15" fill="rgb(223,20,43)"/><text x="0.2869%" y="815.50">__libc_start_main</text></g><g><title>main (13,513 samples, 99.86%)</title><rect x="0.0369%" y="789" width="99.8596%" height="15" fill="rgb(229,81,49)"/><text x="0.2869%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (13,513 samples, 99.86%)</title><rect x="0.0369%" y="773" width="99.8596%" height="15" fill="rgb(236,28,36)"/><text x="0.2869%" y="783.50">std::rt::lang_start_internal</text></g><g><title>lll (13,521 samples, 99.92%)</title><rect x="0.0000%" y="837" width="99.9187%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="847.50">lll</text></g><g><title>_start (13,516 samples, 99.88%)</title><rect x="0.0369%" y="821" width="99.8818%" height="15" fill="rgb(249,174,33)"/><text x="0.2869%" y="831.50">_start</text></g><g><title>_dl_start (3 samples, 0.02%)</title><rect x="99.8965%" y="805" width="0.0222%" height="15" fill="rgb(233,201,37)"/><text x="100.1465%" y="815.50"></text></g><g><title>_dl_start_final (3 samples, 0.02%)</title><rect x="99.8965%" y="789" width="0.0222%" height="15" fill="rgb(221,78,26)"/><text x="100.1465%" y="799.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.02%)</title><rect x="99.8965%" y="773" width="0.0222%" height="15" fill="rgb(250,127,30)"/><text x="100.1465%" y="783.50"></text></g><g><title>dl_main (2 samples, 0.01%)</title><rect x="99.9039%" y="757" width="0.0148%" height="15" fill="rgb(230,49,44)"/><text x="100.1539%" y="767.50"></text></g><g><title>all (13,532 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="863.50"></text></g><g><title>perf (11 samples, 0.08%)</title><rect x="99.9187%" y="837" width="0.0813%" height="15" fill="rgb(249,83,47)"/><text x="100.1687%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="821" width="0.0813%" height="15" fill="rgb(215,43,3)"/><text x="100.1687%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="805" width="0.0813%" height="15" fill="rgb(238,154,13)"/><text x="100.1687%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="789" width="0.0813%" height="15" fill="rgb(219,56,2)"/><text x="100.1687%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="773" width="0.0813%" height="15" fill="rgb(233,0,4)"/><text x="100.1687%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="757" width="0.0813%" height="15" fill="rgb(235,30,7)"/><text x="100.1687%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="741" width="0.0813%" height="15" fill="rgb(250,79,13)"/><text x="100.1687%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="725" width="0.0813%" height="15" fill="rgb(211,146,34)"/><text x="100.1687%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="709" width="0.0813%" height="15" fill="rgb(228,22,38)"/><text x="100.1687%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="693" width="0.0813%" height="15" fill="rgb(235,168,5)"/><text x="100.1687%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="677" width="0.0813%" height="15" fill="rgb(221,155,16)"/><text x="100.1687%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="661" width="0.0813%" height="15" fill="rgb(215,215,53)"/><text x="100.1687%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.08%)</title><rect x="99.9187%" y="645" width="0.0813%" height="15" fill="rgb(223,4,10)"/><text x="100.1687%" y="655.50"></text></g></svg></svg>