<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="934" onload="init(evt)" viewBox="0 0 1200 934" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="934" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="917.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="917.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="853" width="0.0100%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="863.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="837" width="0.0100%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="821" width="0.0100%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="805" width="0.0100%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="789" width="0.0100%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="773" width="0.0100%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="757" width="0.0100%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="741" width="0.0100%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="725" width="0.0100%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0000%" y="709" width="0.0100%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0100%" y="853" width="0.0100%" height="15" fill="rgb(250,228,42)"/><text x="0.2600%" y="863.50"></text></g><g><title>lll::main (1 samples, 0.01%)</title><rect x="0.0100%" y="837" width="0.0100%" height="15" fill="rgb(240,193,28)"/><text x="0.2600%" y="847.50"></text></g><g><title>lll::find_match_std_io (1 samples, 0.01%)</title><rect x="0.0100%" y="821" width="0.0100%" height="15" fill="rgb(216,20,37)"/><text x="0.2600%" y="831.50"></text></g><g><title>clap::build::app::App::get_matches_from (1 samples, 0.01%)</title><rect x="0.0100%" y="805" width="0.0100%" height="15" fill="rgb(206,188,39)"/><text x="0.2600%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (1 samples, 0.01%)</title><rect x="0.0100%" y="789" width="0.0100%" height="15" fill="rgb(217,207,13)"/><text x="0.2600%" y="799.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.01%)</title><rect x="0.0100%" y="773" width="0.0100%" height="15" fill="rgb(231,73,38)"/><text x="0.2600%" y="783.50"></text></g><g><title>clap::build::app::App::_do_parse (1 samples, 0.01%)</title><rect x="0.0100%" y="757" width="0.0100%" height="15" fill="rgb(225,20,46)"/><text x="0.2600%" y="767.50"></text></g><g><title>clap::parse::parser::Parser::get_matches_with (1 samples, 0.01%)</title><rect x="0.0100%" y="741" width="0.0100%" height="15" fill="rgb(210,31,41)"/><text x="0.2600%" y="751.50"></text></g><g><title>clap::parse::validator::Validator::validate (1 samples, 0.01%)</title><rect x="0.0100%" y="725" width="0.0100%" height="15" fill="rgb(221,200,47)"/><text x="0.2600%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0100%" y="709" width="0.0100%" height="15" fill="rgb(226,26,5)"/><text x="0.2600%" y="719.50"></text></g><g><title>_dl_start_user (1 samples, 0.01%)</title><rect x="0.0200%" y="853" width="0.0100%" height="15" fill="rgb(249,33,26)"/><text x="0.2700%" y="863.50"></text></g><g><title>_dl_init (1 samples, 0.01%)</title><rect x="0.0200%" y="837" width="0.0100%" height="15" fill="rgb(235,183,28)"/><text x="0.2700%" y="847.50"></text></g><g><title>call_init (1 samples, 0.01%)</title><rect x="0.0200%" y="821" width="0.0100%" height="15" fill="rgb(221,5,38)"/><text x="0.2700%" y="831.50"></text></g><g><title>call_init (1 samples, 0.01%)</title><rect x="0.0200%" y="805" width="0.0100%" height="15" fill="rgb(247,18,42)"/><text x="0.2700%" y="815.50"></text></g><g><title>_init (1 samples, 0.01%)</title><rect x="0.0200%" y="789" width="0.0100%" height="15" fill="rgb(241,131,45)"/><text x="0.2700%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="773" width="0.0100%" height="15" fill="rgb(249,31,29)"/><text x="0.2700%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="757" width="0.0100%" height="15" fill="rgb(225,111,53)"/><text x="0.2700%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="741" width="0.0100%" height="15" fill="rgb(238,160,17)"/><text x="0.2700%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="725" width="0.0100%" height="15" fill="rgb(214,148,48)"/><text x="0.2700%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="709" width="0.0100%" height="15" fill="rgb(232,36,49)"/><text x="0.2700%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="693" width="0.0100%" height="15" fill="rgb(209,103,24)"/><text x="0.2700%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="677" width="0.0100%" height="15" fill="rgb(229,88,8)"/><text x="0.2700%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="661" width="0.0100%" height="15" fill="rgb(213,181,19)"/><text x="0.2700%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="0.0200%" y="645" width="0.0100%" height="15" fill="rgb(254,191,54)"/><text x="0.2700%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (236 samples, 2.36%)</title><rect x="9.2637%" y="629" width="2.3609%" height="15" fill="rgb(241,83,37)"/><text x="9.5137%" y="639.50">&lt;a..</text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (104 samples, 1.04%)</title><rect x="11.6246%" y="629" width="1.0404%" height="15" fill="rgb(233,36,39)"/><text x="11.8746%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (104 samples, 1.04%)</title><rect x="11.6246%" y="613" width="1.0404%" height="15" fill="rgb(226,3,54)"/><text x="11.8746%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (104 samples, 1.04%)</title><rect x="11.6246%" y="597" width="1.0404%" height="15" fill="rgb(245,192,40)"/><text x="11.8746%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (104 samples, 1.04%)</title><rect x="11.6246%" y="581" width="1.0404%" height="15" fill="rgb(238,167,29)"/><text x="11.8746%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="581" width="0.0100%" height="15" fill="rgb(232,182,51)"/><text x="15.8662%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="565" width="0.0100%" height="15" fill="rgb(231,60,39)"/><text x="15.8662%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="549" width="0.0100%" height="15" fill="rgb(208,69,12)"/><text x="15.8662%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="533" width="0.0100%" height="15" fill="rgb(235,93,37)"/><text x="15.8662%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="517" width="0.0100%" height="15" fill="rgb(213,116,39)"/><text x="15.8662%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="501" width="0.0100%" height="15" fill="rgb(222,207,29)"/><text x="15.8662%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="485" width="0.0100%" height="15" fill="rgb(206,96,30)"/><text x="15.8662%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="469" width="0.0100%" height="15" fill="rgb(218,138,4)"/><text x="15.8662%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="453" width="0.0100%" height="15" fill="rgb(250,191,14)"/><text x="15.8662%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="437" width="0.0100%" height="15" fill="rgb(239,60,40)"/><text x="15.8662%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="15.6162%" y="421" width="0.0100%" height="15" fill="rgb(206,27,48)"/><text x="15.8662%" y="431.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (398 samples, 3.98%)</title><rect x="12.6651%" y="629" width="3.9816%" height="15" fill="rgb(225,35,8)"/><text x="12.9151%" y="639.50">&lt;cor..</text></g><g><title>core::str::next_code_point (398 samples, 3.98%)</title><rect x="12.6651%" y="613" width="3.9816%" height="15" fill="rgb(250,213,24)"/><text x="12.9151%" y="623.50">core..</text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (253 samples, 2.53%)</title><rect x="14.1156%" y="597" width="2.5310%" height="15" fill="rgb(247,123,22)"/><text x="14.3656%" y="607.50">&lt;c..</text></g><g><title>core::slice::Iter&lt;T&gt;::post_inc_start (102 samples, 1.02%)</title><rect x="15.6263%" y="581" width="1.0204%" height="15" fill="rgb(231,138,38)"/><text x="15.8763%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (102 samples, 1.02%)</title><rect x="15.6263%" y="565" width="1.0204%" height="15" fill="rgb(231,145,46)"/><text x="15.8763%" y="575.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (199 samples, 1.99%)</title><rect x="43.8075%" y="581" width="1.9908%" height="15" fill="rgb(251,118,11)"/><text x="44.0575%" y="591.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (91 samples, 0.91%)</title><rect x="48.0792%" y="565" width="0.9104%" height="15" fill="rgb(217,147,25)"/><text x="48.3292%" y="575.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (91 samples, 0.91%)</title><rect x="48.0792%" y="549" width="0.9104%" height="15" fill="rgb(247,81,37)"/><text x="48.3292%" y="559.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (91 samples, 0.91%)</title><rect x="48.0792%" y="533" width="0.9104%" height="15" fill="rgb(209,12,38)"/><text x="48.3292%" y="543.50"></text></g><g><title>__GI___libc_read (91 samples, 0.91%)</title><rect x="48.0792%" y="517" width="0.9104%" height="15" fill="rgb(227,1,9)"/><text x="48.3292%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.89%)</title><rect x="48.0992%" y="501" width="0.8904%" height="15" fill="rgb(248,47,43)"/><text x="48.3492%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.89%)</title><rect x="48.0992%" y="485" width="0.8904%" height="15" fill="rgb(221,10,30)"/><text x="48.3492%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.89%)</title><rect x="48.0992%" y="469" width="0.8904%" height="15" fill="rgb(210,229,1)"/><text x="48.3492%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.89%)</title><rect x="48.0992%" y="453" width="0.8904%" height="15" fill="rgb(222,148,37)"/><text x="48.3492%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.89%)</title><rect x="48.0992%" y="437" width="0.8904%" height="15" fill="rgb(234,67,33)"/><text x="48.3492%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (87 samples, 0.87%)</title><rect x="48.1192%" y="421" width="0.8703%" height="15" fill="rgb(247,98,35)"/><text x="48.3692%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (85 samples, 0.85%)</title><rect x="48.1393%" y="405" width="0.8503%" height="15" fill="rgb(247,138,52)"/><text x="48.3893%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (84 samples, 0.84%)</title><rect x="48.1493%" y="389" width="0.8403%" height="15" fill="rgb(213,79,30)"/><text x="48.3993%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (81 samples, 0.81%)</title><rect x="48.1793%" y="373" width="0.8103%" height="15" fill="rgb(246,177,23)"/><text x="48.4293%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (79 samples, 0.79%)</title><rect x="48.1993%" y="357" width="0.7903%" height="15" fill="rgb(230,62,27)"/><text x="48.4493%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (77 samples, 0.77%)</title><rect x="48.2193%" y="341" width="0.7703%" height="15" fill="rgb(216,154,8)"/><text x="48.4693%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (73 samples, 0.73%)</title><rect x="48.2593%" y="325" width="0.7303%" height="15" fill="rgb(244,35,45)"/><text x="48.5093%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.04%)</title><rect x="48.9496%" y="309" width="0.0400%" height="15" fill="rgb(251,115,12)"/><text x="49.1996%" y="319.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (417 samples, 4.17%)</title><rect x="45.7983%" y="581" width="4.1717%" height="15" fill="rgb(240,54,50)"/><text x="46.0483%" y="591.50">&lt;std:..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (98 samples, 0.98%)</title><rect x="48.9896%" y="565" width="0.9804%" height="15" fill="rgb(233,84,52)"/><text x="49.2396%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (98 samples, 0.98%)</title><rect x="48.9896%" y="549" width="0.9804%" height="15" fill="rgb(207,117,47)"/><text x="49.2396%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (96 samples, 0.96%)</title><rect x="49.0096%" y="533" width="0.9604%" height="15" fill="rgb(249,43,39)"/><text x="49.2596%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (91 samples, 0.91%)</title><rect x="49.0596%" y="517" width="0.9104%" height="15" fill="rgb(209,38,44)"/><text x="49.3096%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (91 samples, 0.91%)</title><rect x="49.0596%" y="501" width="0.9104%" height="15" fill="rgb(236,212,23)"/><text x="49.3096%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="49.9700%" y="581" width="0.0100%" height="15" fill="rgb(242,79,21)"/><text x="50.2200%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="49.9700%" y="565" width="0.0100%" height="15" fill="rgb(211,96,35)"/><text x="50.2200%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="49.9700%" y="549" width="0.0100%" height="15" fill="rgb(253,215,40)"/><text x="50.2200%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="49.9700%" y="533" width="0.0100%" height="15" fill="rgb(211,81,21)"/><text x="50.2200%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="49.9700%" y="517" width="0.0100%" height="15" fill="rgb(208,190,38)"/><text x="50.2200%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="49.9700%" y="501" width="0.0100%" height="15" fill="rgb(235,213,38)"/><text x="50.2200%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="565" width="0.0200%" height="15" fill="rgb(237,122,38)"/><text x="55.3020%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="549" width="0.0200%" height="15" fill="rgb(244,218,35)"/><text x="55.3020%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="533" width="0.0200%" height="15" fill="rgb(240,68,47)"/><text x="55.3020%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="517" width="0.0200%" height="15" fill="rgb(210,16,53)"/><text x="55.3020%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="501" width="0.0200%" height="15" fill="rgb(235,124,12)"/><text x="55.3020%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="485" width="0.0200%" height="15" fill="rgb(224,169,11)"/><text x="55.3020%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="469" width="0.0200%" height="15" fill="rgb(250,166,2)"/><text x="55.3020%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="453" width="0.0200%" height="15" fill="rgb(242,216,29)"/><text x="55.3020%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="437" width="0.0200%" height="15" fill="rgb(230,116,27)"/><text x="55.3020%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="421" width="0.0200%" height="15" fill="rgb(228,99,48)"/><text x="55.3020%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="405" width="0.0200%" height="15" fill="rgb(253,11,6)"/><text x="55.3020%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="389" width="0.0200%" height="15" fill="rgb(247,143,39)"/><text x="55.3020%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="373" width="0.0200%" height="15" fill="rgb(236,97,10)"/><text x="55.3020%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="55.0520%" y="357" width="0.0200%" height="15" fill="rgb(233,208,19)"/><text x="55.3020%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.0620%" y="341" width="0.0100%" height="15" fill="rgb(216,164,2)"/><text x="55.3120%" y="351.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (2,506 samples, 25.07%)</title><rect x="30.1321%" y="597" width="25.0700%" height="15" fill="rgb(220,129,5)"/><text x="30.3821%" y="607.50">&lt;std::io::buffered::BufReader&lt;R&gt; as std:..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (522 samples, 5.22%)</title><rect x="49.9800%" y="581" width="5.2221%" height="15" fill="rgb(242,17,10)"/><text x="50.2300%" y="591.50">std::i..</text></g><g><title>core::cmp::min (13 samples, 0.13%)</title><rect x="55.0720%" y="565" width="0.1301%" height="15" fill="rgb(242,107,0)"/><text x="55.3220%" y="575.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.13%)</title><rect x="55.0720%" y="549" width="0.1301%" height="15" fill="rgb(251,28,31)"/><text x="55.3220%" y="559.50"></text></g><g><title>core::cmp::min_by (13 samples, 0.13%)</title><rect x="55.0720%" y="533" width="0.1301%" height="15" fill="rgb(233,223,10)"/><text x="55.3220%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read (2,901 samples, 29.02%)</title><rect x="26.1905%" y="613" width="29.0216%" height="15" fill="rgb(215,21,27)"/><text x="26.4405%" y="623.50">&lt;std::io::stdio::StdinLock as std::io::Read&gt;::r..</text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2021%" y="597" width="0.0100%" height="15" fill="rgb(232,23,21)"/><text x="55.4521%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2021%" y="581" width="0.0100%" height="15" fill="rgb(244,5,23)"/><text x="55.4521%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2021%" y="565" width="0.0100%" height="15" fill="rgb(226,81,46)"/><text x="55.4521%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2021%" y="549" width="0.0100%" height="15" fill="rgb(247,70,30)"/><text x="55.4521%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2021%" y="533" width="0.0100%" height="15" fill="rgb(212,68,19)"/><text x="55.4521%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2021%" y="517" width="0.0100%" height="15" fill="rgb(240,187,13)"/><text x="55.4521%" y="527.50"></text></g><g><title>&lt;lll::CharIterator as core::iter::traits::iterator::Iterator&gt;::next (3,856 samples, 38.58%)</title><rect x="16.6467%" y="629" width="38.5754%" height="15" fill="rgb(223,113,26)"/><text x="16.8967%" y="639.50">&lt;lll::CharIterator as core::iter::traits::iterator::Iterator&gt;::..</text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="613" width="0.0100%" height="15" fill="rgb(206,192,2)"/><text x="55.4621%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="597" width="0.0100%" height="15" fill="rgb(241,108,4)"/><text x="55.4621%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="581" width="0.0100%" height="15" fill="rgb(247,173,49)"/><text x="55.4621%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="565" width="0.0100%" height="15" fill="rgb(224,114,35)"/><text x="55.4621%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="549" width="0.0100%" height="15" fill="rgb(245,159,27)"/><text x="55.4621%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="533" width="0.0100%" height="15" fill="rgb(245,172,44)"/><text x="55.4621%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="517" width="0.0100%" height="15" fill="rgb(236,23,11)"/><text x="55.4621%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="501" width="0.0100%" height="15" fill="rgb(205,117,38)"/><text x="55.4621%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="485" width="0.0100%" height="15" fill="rgb(237,72,25)"/><text x="55.4621%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="469" width="0.0100%" height="15" fill="rgb(244,70,9)"/><text x="55.4621%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2121%" y="453" width="0.0100%" height="15" fill="rgb(217,125,39)"/><text x="55.4621%" y="463.50"></text></g><g><title>pvclock_gtod_notify (1 samples, 0.01%)</title><rect x="55.2121%" y="437" width="0.0100%" height="15" fill="rgb(235,36,10)"/><text x="55.4621%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="629" width="0.0100%" height="15" fill="rgb(251,123,47)"/><text x="55.4721%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="613" width="0.0100%" height="15" fill="rgb(221,13,13)"/><text x="55.4721%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="597" width="0.0100%" height="15" fill="rgb(238,131,9)"/><text x="55.4721%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="581" width="0.0100%" height="15" fill="rgb(211,50,8)"/><text x="55.4721%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="565" width="0.0100%" height="15" fill="rgb(245,182,24)"/><text x="55.4721%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="549" width="0.0100%" height="15" fill="rgb(242,14,37)"/><text x="55.4721%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="533" width="0.0100%" height="15" fill="rgb(246,228,12)"/><text x="55.4721%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="517" width="0.0100%" height="15" fill="rgb(213,55,15)"/><text x="55.4721%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="55.2221%" y="501" width="0.0100%" height="15" fill="rgb(209,9,3)"/><text x="55.4721%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (277 samples, 2.77%)</title><rect x="55.2321%" y="629" width="2.7711%" height="15" fill="rgb(230,59,30)"/><text x="55.4821%" y="639.50">al..</text></g><g><title>alloc::collections::vec_deque::count (189 samples, 1.89%)</title><rect x="56.1124%" y="613" width="1.8908%" height="15" fill="rgb(209,121,21)"/><text x="56.3624%" y="623.50">a..</text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="64.1156%" y="613" width="0.0100%" height="15" fill="rgb(220,109,13)"/><text x="64.3656%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="64.1156%" y="597" width="0.0100%" height="15" fill="rgb(232,18,1)"/><text x="64.3656%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="64.1156%" y="581" width="0.0100%" height="15" fill="rgb(215,41,42)"/><text x="64.3656%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="64.1156%" y="565" width="0.0100%" height="15" fill="rgb(224,123,36)"/><text x="64.3656%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (104 samples, 1.04%)</title><rect x="64.1257%" y="597" width="1.0404%" height="15" fill="rgb(240,125,3)"/><text x="64.3757%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (104 samples, 1.04%)</title><rect x="64.1257%" y="581" width="1.0404%" height="15" fill="rgb(205,98,50)"/><text x="64.3757%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (106 samples, 1.06%)</title><rect x="64.1257%" y="613" width="1.0604%" height="15" fill="rgb(205,185,37)"/><text x="64.3757%" y="623.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="65.1661%" y="597" width="0.0200%" height="15" fill="rgb(238,207,15)"/><text x="65.4161%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="65.1661%" y="581" width="0.0200%" height="15" fill="rgb(213,199,42)"/><text x="65.4161%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (177 samples, 1.77%)</title><rect x="65.1861%" y="613" width="1.7707%" height="15" fill="rgb(235,201,11)"/><text x="65.4361%" y="623.50">a..</text></g><g><title>alloc::collections::vec_deque::wrap_index (99 samples, 0.99%)</title><rect x="66.9568%" y="597" width="0.9904%" height="15" fill="rgb(207,46,11)"/><text x="67.2068%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_back (995 samples, 9.95%)</title><rect x="58.0032%" y="629" width="9.9540%" height="15" fill="rgb(241,35,35)"/><text x="58.2532%" y="639.50">alloc::collect..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (100 samples, 1.00%)</title><rect x="66.9568%" y="613" width="1.0004%" height="15" fill="rgb(243,32,47)"/><text x="67.2068%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.01%)</title><rect x="67.9472%" y="597" width="0.0100%" height="15" fill="rgb(247,202,23)"/><text x="68.1972%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="71.2485%" y="613" width="0.0200%" height="15" fill="rgb(219,102,11)"/><text x="71.4985%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="71.2585%" y="597" width="0.0100%" height="15" fill="rgb(243,110,44)"/><text x="71.5085%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="71.2585%" y="581" width="0.0100%" height="15" fill="rgb(222,74,54)"/><text x="71.5085%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="71.2585%" y="565" width="0.0100%" height="15" fill="rgb(216,99,12)"/><text x="71.5085%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="71.2585%" y="549" width="0.0100%" height="15" fill="rgb(226,22,26)"/><text x="71.5085%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="71.2585%" y="533" width="0.0100%" height="15" fill="rgb(217,163,10)"/><text x="71.5085%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (189 samples, 1.89%)</title><rect x="71.2685%" y="613" width="1.8908%" height="15" fill="rgb(213,25,53)"/><text x="71.5185%" y="623.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (189 samples, 1.89%)</title><rect x="71.2685%" y="597" width="1.8908%" height="15" fill="rgb(252,105,26)"/><text x="71.5185%" y="607.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (189 samples, 1.89%)</title><rect x="71.2685%" y="581" width="1.8908%" height="15" fill="rgb(220,39,43)"/><text x="71.5185%" y="591.50">a..</text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="73.1493%" y="565" width="0.0100%" height="15" fill="rgb(229,68,48)"/><text x="73.3993%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="73.1493%" y="549" width="0.0100%" height="15" fill="rgb(252,8,32)"/><text x="73.3993%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="73.1493%" y="533" width="0.0100%" height="15" fill="rgb(223,20,43)"/><text x="73.3993%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="73.1493%" y="517" width="0.0100%" height="15" fill="rgb(229,81,49)"/><text x="73.3993%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="73.1493%" y="501" width="0.0100%" height="15" fill="rgb(236,28,36)"/><text x="73.3993%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="73.1493%" y="485" width="0.0100%" height="15" fill="rgb(249,185,26)"/><text x="73.3993%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (279 samples, 2.79%)</title><rect x="73.1593%" y="597" width="2.7911%" height="15" fill="rgb(249,174,33)"/><text x="73.4093%" y="607.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (803 samples, 8.03%)</title><rect x="67.9572%" y="629" width="8.0332%" height="15" fill="rgb(233,201,37)"/><text x="68.2072%" y="639.50">alloc::coll..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (283 samples, 2.83%)</title><rect x="73.1593%" y="613" width="2.8311%" height="15" fill="rgb(221,78,26)"/><text x="73.4093%" y="623.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.04%)</title><rect x="75.9504%" y="597" width="0.0400%" height="15" fill="rgb(250,127,30)"/><text x="76.2004%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="613" width="0.0100%" height="15" fill="rgb(230,49,44)"/><text x="79.2416%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="597" width="0.0100%" height="15" fill="rgb(229,67,23)"/><text x="79.2416%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="581" width="0.0100%" height="15" fill="rgb(249,83,47)"/><text x="79.2416%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="565" width="0.0100%" height="15" fill="rgb(215,43,3)"/><text x="79.2416%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="549" width="0.0100%" height="15" fill="rgb(238,154,13)"/><text x="79.2416%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="533" width="0.0100%" height="15" fill="rgb(219,56,2)"/><text x="79.2416%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="517" width="0.0100%" height="15" fill="rgb(233,0,4)"/><text x="79.2416%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="501" width="0.0100%" height="15" fill="rgb(235,30,7)"/><text x="79.2416%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="78.9916%" y="485" width="0.0100%" height="15" fill="rgb(250,79,13)"/><text x="79.2416%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (83 samples, 0.83%)</title><rect x="79.0016%" y="597" width="0.8303%" height="15" fill="rgb(211,146,34)"/><text x="79.2516%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (83 samples, 0.83%)</title><rect x="79.0016%" y="581" width="0.8303%" height="15" fill="rgb(228,22,38)"/><text x="79.2516%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (389 samples, 3.89%)</title><rect x="79.0016%" y="613" width="3.8916%" height="15" fill="rgb(235,168,5)"/><text x="79.2516%" y="623.50">allo..</text></g><g><title>core::ptr::write (306 samples, 3.06%)</title><rect x="79.8319%" y="597" width="3.0612%" height="15" fill="rgb(221,155,16)"/><text x="80.0819%" y="607.50">cor..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (430 samples, 4.30%)</title><rect x="82.8932%" y="613" width="4.3017%" height="15" fill="rgb(215,215,53)"/><text x="83.1432%" y="623.50">alloc..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (197 samples, 1.97%)</title><rect x="85.2241%" y="597" width="1.9708%" height="15" fill="rgb(223,4,10)"/><text x="85.4741%" y="607.50">a..</text></g><g><title>alloc::collections::vec_deque::count (197 samples, 1.97%)</title><rect x="85.2241%" y="581" width="1.9708%" height="15" fill="rgb(234,103,6)"/><text x="85.4741%" y="591.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (82 samples, 0.82%)</title><rect x="86.3745%" y="565" width="0.8203%" height="15" fill="rgb(227,97,0)"/><text x="86.6245%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (264 samples, 2.64%)</title><rect x="87.1949%" y="597" width="2.6411%" height="15" fill="rgb(234,150,53)"/><text x="87.4449%" y="607.50">al..</text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="581" width="0.0100%" height="15" fill="rgb(228,201,54)"/><text x="90.0759%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="565" width="0.0100%" height="15" fill="rgb(222,22,37)"/><text x="90.0759%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="549" width="0.0100%" height="15" fill="rgb(237,53,32)"/><text x="90.0759%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="533" width="0.0100%" height="15" fill="rgb(233,25,53)"/><text x="90.0759%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="517" width="0.0100%" height="15" fill="rgb(210,40,34)"/><text x="90.0759%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="501" width="0.0100%" height="15" fill="rgb(241,220,44)"/><text x="90.0759%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="485" width="0.0100%" height="15" fill="rgb(235,28,35)"/><text x="90.0759%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="469" width="0.0100%" height="15" fill="rgb(210,56,17)"/><text x="90.0759%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="453" width="0.0100%" height="15" fill="rgb(224,130,29)"/><text x="90.0759%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="437" width="0.0100%" height="15" fill="rgb(235,212,8)"/><text x="90.0759%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="89.8259%" y="421" width="0.0100%" height="15" fill="rgb(223,33,50)"/><text x="90.0759%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (1,674 samples, 16.75%)</title><rect x="75.9904%" y="629" width="16.7467%" height="15" fill="rgb(219,149,13)"/><text x="76.2404%" y="639.50">alloc::collections::vec_de..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (554 samples, 5.54%)</title><rect x="87.1949%" y="613" width="5.5422%" height="15" fill="rgb(250,156,29)"/><text x="87.4449%" y="623.50">alloc::..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (290 samples, 2.90%)</title><rect x="89.8359%" y="597" width="2.9012%" height="15" fill="rgb(216,193,19)"/><text x="90.0859%" y="607.50">co..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (106 samples, 1.06%)</title><rect x="95.0580%" y="613" width="1.0604%" height="15" fill="rgb(216,135,14)"/><text x="95.3080%" y="623.50"></text></g><g><title>core::ptr::write (106 samples, 1.06%)</title><rect x="95.0580%" y="597" width="1.0604%" height="15" fill="rgb(241,47,5)"/><text x="95.3080%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (101 samples, 1.01%)</title><rect x="96.1184%" y="613" width="1.0104%" height="15" fill="rgb(233,42,35)"/><text x="96.3684%" y="623.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="597" width="0.0100%" height="15" fill="rgb(231,13,6)"/><text x="97.3688%" y="607.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="581" width="0.0100%" height="15" fill="rgb(207,181,40)"/><text x="97.3688%" y="591.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="565" width="0.0100%" height="15" fill="rgb(254,173,49)"/><text x="97.3688%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="549" width="0.0100%" height="15" fill="rgb(221,1,38)"/><text x="97.3688%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="533" width="0.0100%" height="15" fill="rgb(206,124,46)"/><text x="97.3688%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="517" width="0.0100%" height="15" fill="rgb(249,21,11)"/><text x="97.3688%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="97.1188%" y="501" width="0.0100%" height="15" fill="rgb(222,201,40)"/><text x="97.3688%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (65 samples, 0.65%)</title><rect x="97.1289%" y="597" width="0.6503%" height="15" fill="rgb(235,61,29)"/><text x="97.3789%" y="607.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (511 samples, 5.11%)</title><rect x="92.7371%" y="629" width="5.1120%" height="15" fill="rgb(219,207,3)"/><text x="92.9871%" y="639.50">alloc:..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (72 samples, 0.72%)</title><rect x="97.1289%" y="613" width="0.7203%" height="15" fill="rgb(222,56,46)"/><text x="97.3789%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (7 samples, 0.07%)</title><rect x="97.7791%" y="597" width="0.0700%" height="15" fill="rgb(239,76,54)"/><text x="98.0291%" y="607.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.02%)</title><rect x="97.8491%" y="629" width="0.0200%" height="15" fill="rgb(231,124,27)"/><text x="98.0991%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="97.8491%" y="613" width="0.0200%" height="15" fill="rgb(249,195,6)"/><text x="98.0991%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="97.8491%" y="597" width="0.0200%" height="15" fill="rgb(237,174,47)"/><text x="98.0991%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (2 samples, 0.02%)</title><rect x="97.8491%" y="581" width="0.0200%" height="15" fill="rgb(206,201,31)"/><text x="98.0991%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.02%)</title><rect x="97.8491%" y="565" width="0.0200%" height="15" fill="rgb(231,57,52)"/><text x="98.0991%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (2 samples, 0.02%)</title><rect x="97.8491%" y="549" width="0.0200%" height="15" fill="rgb(248,177,22)"/><text x="98.0991%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="97.8491%" y="533" width="0.0200%" height="15" fill="rgb(215,211,37)"/><text x="98.0991%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="97.8491%" y="517" width="0.0200%" height="15" fill="rgb(241,128,51)"/><text x="98.0991%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (2 samples, 0.02%)</title><rect x="97.8491%" y="501" width="0.0200%" height="15" fill="rgb(227,165,31)"/><text x="98.0991%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.02%)</title><rect x="97.8491%" y="485" width="0.0200%" height="15" fill="rgb(228,167,24)"/><text x="98.0991%" y="495.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.02%)</title><rect x="97.8491%" y="469" width="0.0200%" height="15" fill="rgb(228,143,12)"/><text x="98.0991%" y="479.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="97.8491%" y="453" width="0.0200%" height="15" fill="rgb(249,149,8)"/><text x="98.0991%" y="463.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="97.8491%" y="437" width="0.0200%" height="15" fill="rgb(243,35,44)"/><text x="98.0991%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (6 samples, 0.06%)</title><rect x="97.8691%" y="629" width="0.0600%" height="15" fill="rgb(246,89,9)"/><text x="98.1191%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (6 samples, 0.06%)</title><rect x="97.8691%" y="613" width="0.0600%" height="15" fill="rgb(233,213,13)"/><text x="98.1191%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (6 samples, 0.06%)</title><rect x="97.8691%" y="597" width="0.0600%" height="15" fill="rgb(233,141,41)"/><text x="98.1191%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (6 samples, 0.06%)</title><rect x="97.8691%" y="581" width="0.0600%" height="15" fill="rgb(239,167,4)"/><text x="98.1191%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.06%)</title><rect x="97.8691%" y="565" width="0.0600%" height="15" fill="rgb(209,217,16)"/><text x="98.1191%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.06%)</title><rect x="97.8691%" y="549" width="0.0600%" height="15" fill="rgb(219,88,35)"/><text x="98.1191%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.06%)</title><rect x="97.8691%" y="533" width="0.0600%" height="15" fill="rgb(220,193,23)"/><text x="98.1191%" y="543.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.06%)</title><rect x="97.8691%" y="517" width="0.0600%" height="15" fill="rgb(230,90,52)"/><text x="98.1191%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.06%)</title><rect x="97.8691%" y="501" width="0.0600%" height="15" fill="rgb(252,106,19)"/><text x="98.1191%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (5 samples, 0.05%)</title><rect x="97.8792%" y="485" width="0.0500%" height="15" fill="rgb(206,74,20)"/><text x="98.1292%" y="495.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (3 samples, 0.03%)</title><rect x="97.8992%" y="469" width="0.0300%" height="15" fill="rgb(230,138,44)"/><text x="98.1492%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.03%)</title><rect x="97.8992%" y="453" width="0.0300%" height="15" fill="rgb(235,182,43)"/><text x="98.1492%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (3 samples, 0.03%)</title><rect x="97.8992%" y="437" width="0.0300%" height="15" fill="rgb(242,16,51)"/><text x="98.1492%" y="447.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.03%)</title><rect x="97.8992%" y="421" width="0.0300%" height="15" fill="rgb(248,9,4)"/><text x="98.1492%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.03%)</title><rect x="97.8992%" y="405" width="0.0300%" height="15" fill="rgb(210,31,22)"/><text x="98.1492%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (86 samples, 0.86%)</title><rect x="97.9292%" y="629" width="0.8603%" height="15" fill="rgb(239,54,39)"/><text x="98.1792%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (93 samples, 0.93%)</title><rect x="98.7895%" y="629" width="0.9304%" height="15" fill="rgb(230,99,41)"/><text x="99.0395%" y="639.50"></text></g><g><title>&lt;lll::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (9,966 samples, 99.70%)</title><rect x="0.0300%" y="645" width="99.6999%" height="15" fill="rgb(253,106,12)"/><text x="0.2800%" y="655.50">&lt;lll::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::str::&lt;impl str&gt;::chars (1 samples, 0.01%)</title><rect x="99.7199%" y="629" width="0.0100%" height="15" fill="rgb(213,46,41)"/><text x="99.9699%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.01%)</title><rect x="99.7199%" y="613" width="0.0100%" height="15" fill="rgb(215,133,35)"/><text x="99.9699%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.01%)</title><rect x="99.7199%" y="597" width="0.0100%" height="15" fill="rgb(213,28,5)"/><text x="99.9699%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.01%)</title><rect x="99.7199%" y="581" width="0.0100%" height="15" fill="rgb(215,77,49)"/><text x="99.9699%" y="591.50"></text></g><g><title>std::panic::catch_unwind (9,978 samples, 99.82%)</title><rect x="0.0300%" y="789" width="99.8199%" height="15" fill="rgb(248,100,22)"/><text x="0.2800%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,978 samples, 99.82%)</title><rect x="0.0300%" y="773" width="99.8199%" height="15" fill="rgb(208,67,9)"/><text x="0.2800%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,978 samples, 99.82%)</title><rect x="0.0300%" y="757" width="99.8199%" height="15" fill="rgb(219,133,21)"/><text x="0.2800%" y="767.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,978 samples, 99.82%)</title><rect x="0.0300%" y="741" width="99.8199%" height="15" fill="rgb(246,46,29)"/><text x="0.2800%" y="751.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (9,978 samples, 99.82%)</title><rect x="0.0300%" y="725" width="99.8199%" height="15" fill="rgb(246,185,52)"/><text x="0.2800%" y="735.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,978 samples, 99.82%)</title><rect x="0.0300%" y="709" width="99.8199%" height="15" fill="rgb(252,136,11)"/><text x="0.2800%" y="719.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (9,978 samples, 99.82%)</title><rect x="0.0300%" y="693" width="99.8199%" height="15" fill="rgb(219,138,53)"/><text x="0.2800%" y="703.50">core::ops::function::FnOnce::call_once</text></g><g><title>lll::main (9,978 samples, 99.82%)</title><rect x="0.0300%" y="677" width="99.8199%" height="15" fill="rgb(211,51,23)"/><text x="0.2800%" y="687.50">lll::main</text></g><g><title>lll::find_match_std_io (9,978 samples, 99.82%)</title><rect x="0.0300%" y="661" width="99.8199%" height="15" fill="rgb(247,221,28)"/><text x="0.2800%" y="671.50">lll::find_match_std_io</text></g><g><title>std::io::stdio::_print (12 samples, 0.12%)</title><rect x="99.7299%" y="645" width="0.1200%" height="15" fill="rgb(251,222,45)"/><text x="99.9799%" y="655.50"></text></g><g><title>std::io::stdio::print_to (12 samples, 0.12%)</title><rect x="99.7299%" y="629" width="0.1200%" height="15" fill="rgb(217,162,53)"/><text x="99.9799%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12 samples, 0.12%)</title><rect x="99.7299%" y="613" width="0.1200%" height="15" fill="rgb(229,93,14)"/><text x="99.9799%" y="623.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (12 samples, 0.12%)</title><rect x="99.7299%" y="597" width="0.1200%" height="15" fill="rgb(209,67,49)"/><text x="99.9799%" y="607.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (12 samples, 0.12%)</title><rect x="99.7299%" y="581" width="0.1200%" height="15" fill="rgb(213,87,29)"/><text x="99.9799%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (12 samples, 0.12%)</title><rect x="99.7299%" y="565" width="0.1200%" height="15" fill="rgb(205,151,52)"/><text x="99.9799%" y="575.50"></text></g><g><title>core::fmt::write (12 samples, 0.12%)</title><rect x="99.7299%" y="549" width="0.1200%" height="15" fill="rgb(253,215,39)"/><text x="99.9799%" y="559.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (11 samples, 0.11%)</title><rect x="99.7399%" y="533" width="0.1100%" height="15" fill="rgb(221,220,41)"/><text x="99.9899%" y="543.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (11 samples, 0.11%)</title><rect x="99.7399%" y="517" width="0.1100%" height="15" fill="rgb(218,133,21)"/><text x="99.9899%" y="527.50"></text></g><g><title>std::io::Write::write_all (11 samples, 0.11%)</title><rect x="99.7399%" y="501" width="0.1100%" height="15" fill="rgb(221,193,43)"/><text x="99.9899%" y="511.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (11 samples, 0.11%)</title><rect x="99.7399%" y="485" width="0.1100%" height="15" fill="rgb(240,128,52)"/><text x="99.9899%" y="495.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (11 samples, 0.11%)</title><rect x="99.7399%" y="469" width="0.1100%" height="15" fill="rgb(253,114,12)"/><text x="99.9899%" y="479.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (11 samples, 0.11%)</title><rect x="99.7399%" y="453" width="0.1100%" height="15" fill="rgb(215,223,47)"/><text x="99.9899%" y="463.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (11 samples, 0.11%)</title><rect x="99.7399%" y="437" width="0.1100%" height="15" fill="rgb(248,225,23)"/><text x="99.9899%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (11 samples, 0.11%)</title><rect x="99.7399%" y="421" width="0.1100%" height="15" fill="rgb(250,108,0)"/><text x="99.9899%" y="431.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (11 samples, 0.11%)</title><rect x="99.7399%" y="405" width="0.1100%" height="15" fill="rgb(228,208,7)"/><text x="99.9899%" y="415.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.11%)</title><rect x="99.7399%" y="389" width="0.1100%" height="15" fill="rgb(244,45,10)"/><text x="99.9899%" y="399.50"></text></g><g><title>__GI___libc_write (11 samples, 0.11%)</title><rect x="99.7399%" y="373" width="0.1100%" height="15" fill="rgb(207,125,25)"/><text x="99.9899%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="357" width="0.1100%" height="15" fill="rgb(210,195,18)"/><text x="99.9899%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="341" width="0.1100%" height="15" fill="rgb(249,80,12)"/><text x="99.9899%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="325" width="0.1100%" height="15" fill="rgb(221,65,9)"/><text x="99.9899%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="309" width="0.1100%" height="15" fill="rgb(235,49,36)"/><text x="99.9899%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="293" width="0.1100%" height="15" fill="rgb(225,32,20)"/><text x="99.9899%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="277" width="0.1100%" height="15" fill="rgb(215,141,46)"/><text x="99.9899%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="261" width="0.1100%" height="15" fill="rgb(250,160,47)"/><text x="99.9899%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="245" width="0.1100%" height="15" fill="rgb(216,222,40)"/><text x="99.9899%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="229" width="0.1100%" height="15" fill="rgb(234,217,39)"/><text x="99.9899%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.7399%" y="213" width="0.1100%" height="15" fill="rgb(207,178,40)"/><text x="99.9899%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.09%)</title><rect x="99.7599%" y="197" width="0.0900%" height="15" fill="rgb(221,136,13)"/><text x="100.0099%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (9 samples, 0.09%)</title><rect x="99.7599%" y="181" width="0.0900%" height="15" fill="rgb(249,199,10)"/><text x="100.0099%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.06%)</title><rect x="99.7899%" y="165" width="0.0600%" height="15" fill="rgb(249,222,13)"/><text x="100.0399%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.06%)</title><rect x="99.7899%" y="149" width="0.0600%" height="15" fill="rgb(244,185,38)"/><text x="100.0399%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.04%)</title><rect x="99.8099%" y="133" width="0.0400%" height="15" fill="rgb(236,202,9)"/><text x="100.0599%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.04%)</title><rect x="99.8099%" y="117" width="0.0400%" height="15" fill="rgb(250,229,37)"/><text x="100.0599%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="99.8299%" y="101" width="0.0200%" height="15" fill="rgb(206,174,23)"/><text x="100.0799%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="99.8299%" y="85" width="0.0200%" height="15" fill="rgb(211,33,43)"/><text x="100.0799%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="99.8299%" y="69" width="0.0200%" height="15" fill="rgb(245,58,50)"/><text x="100.0799%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="99.8299%" y="53" width="0.0200%" height="15" fill="rgb(244,68,36)"/><text x="100.0799%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (2 samples, 0.02%)</title><rect x="99.8299%" y="37" width="0.0200%" height="15" fill="rgb(232,229,15)"/><text x="100.0799%" y="47.50"></text></g><g><title>__libc_start_main (9,979 samples, 99.83%)</title><rect x="0.0300%" y="837" width="99.8299%" height="15" fill="rgb(254,30,23)"/><text x="0.2800%" y="847.50">__libc_start_main</text></g><g><title>main (9,979 samples, 99.83%)</title><rect x="0.0300%" y="821" width="99.8299%" height="15" fill="rgb(235,160,14)"/><text x="0.2800%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (9,979 samples, 99.83%)</title><rect x="0.0300%" y="805" width="99.8299%" height="15" fill="rgb(212,155,44)"/><text x="0.2800%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.01%)</title><rect x="99.8499%" y="789" width="0.0100%" height="15" fill="rgb(226,2,50)"/><text x="100.0999%" y="799.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.01%)</title><rect x="99.8499%" y="773" width="0.0100%" height="15" fill="rgb(234,177,6)"/><text x="100.0999%" y="783.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.01%)</title><rect x="99.8499%" y="757" width="0.0100%" height="15" fill="rgb(217,24,9)"/><text x="100.0999%" y="767.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.01%)</title><rect x="99.8499%" y="741" width="0.0100%" height="15" fill="rgb(220,13,46)"/><text x="100.0999%" y="751.50"></text></g><g><title>__GI___isoc99_sscanf (1 samples, 0.01%)</title><rect x="99.8499%" y="725" width="0.0100%" height="15" fill="rgb(239,221,27)"/><text x="100.0999%" y="735.50"></text></g><g><title>__vfscanf_internal (1 samples, 0.01%)</title><rect x="99.8499%" y="709" width="0.0100%" height="15" fill="rgb(222,198,25)"/><text x="100.0999%" y="719.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.01%)</title><rect x="99.8599%" y="773" width="0.0100%" height="15" fill="rgb(211,99,13)"/><text x="100.1099%" y="783.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="99.8599%" y="757" width="0.0100%" height="15" fill="rgb(232,111,31)"/><text x="100.1099%" y="767.50"></text></g><g><title>openaux (1 samples, 0.01%)</title><rect x="99.8599%" y="741" width="0.0100%" height="15" fill="rgb(245,82,37)"/><text x="100.1099%" y="751.50"></text></g><g><title>_dl_map_object (1 samples, 0.01%)</title><rect x="99.8599%" y="725" width="0.0100%" height="15" fill="rgb(227,149,46)"/><text x="100.1099%" y="735.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.01%)</title><rect x="99.8599%" y="709" width="0.0100%" height="15" fill="rgb(218,36,50)"/><text x="100.1099%" y="719.50"></text></g><g><title>_dl_map_segments (1 samples, 0.01%)</title><rect x="99.8599%" y="693" width="0.0100%" height="15" fill="rgb(226,80,48)"/><text x="100.1099%" y="703.50"></text></g><g><title>__mmap64 (1 samples, 0.01%)</title><rect x="99.8599%" y="677" width="0.0100%" height="15" fill="rgb(238,224,15)"/><text x="100.1099%" y="687.50"></text></g><g><title>__mmap64 (1 samples, 0.01%)</title><rect x="99.8599%" y="661" width="0.0100%" height="15" fill="rgb(241,136,10)"/><text x="100.1099%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="99.8599%" y="645" width="0.0100%" height="15" fill="rgb(208,32,45)"/><text x="100.1099%" y="655.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.01%)</title><rect x="99.8699%" y="773" width="0.0100%" height="15" fill="rgb(207,135,9)"/><text x="100.1199%" y="783.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.01%)</title><rect x="99.8699%" y="757" width="0.0100%" height="15" fill="rgb(206,86,44)"/><text x="100.1199%" y="767.50"></text></g><g><title>elf_machine_rela (1 samples, 0.01%)</title><rect x="99.8699%" y="741" width="0.0100%" height="15" fill="rgb(245,177,15)"/><text x="100.1199%" y="751.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.01%)</title><rect x="99.8699%" y="725" width="0.0100%" height="15" fill="rgb(206,64,50)"/><text x="100.1199%" y="735.50"></text></g><g><title>do_lookup_x (1 samples, 0.01%)</title><rect x="99.8699%" y="709" width="0.0100%" height="15" fill="rgb(234,36,40)"/><text x="100.1199%" y="719.50"></text></g><g><title>lll (9,985 samples, 99.89%)</title><rect x="0.0000%" y="869" width="99.8900%" height="15" fill="rgb(213,64,8)"/><text x="0.2500%" y="879.50">lll</text></g><g><title>_start (9,982 samples, 99.86%)</title><rect x="0.0300%" y="853" width="99.8599%" height="15" fill="rgb(210,75,36)"/><text x="0.2800%" y="863.50">_start</text></g><g><title>_dl_start (3 samples, 0.03%)</title><rect x="99.8599%" y="837" width="0.0300%" height="15" fill="rgb(229,88,21)"/><text x="100.1099%" y="847.50"></text></g><g><title>_dl_start_final (3 samples, 0.03%)</title><rect x="99.8599%" y="821" width="0.0300%" height="15" fill="rgb(252,204,47)"/><text x="100.1099%" y="831.50"></text></g><g><title>_dl_sysdep_start (3 samples, 0.03%)</title><rect x="99.8599%" y="805" width="0.0300%" height="15" fill="rgb(208,77,27)"/><text x="100.1099%" y="815.50"></text></g><g><title>dl_main (3 samples, 0.03%)</title><rect x="99.8599%" y="789" width="0.0300%" height="15" fill="rgb(221,76,26)"/><text x="100.1099%" y="799.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.01%)</title><rect x="99.8800%" y="773" width="0.0100%" height="15" fill="rgb(225,139,18)"/><text x="100.1300%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (1 samples, 0.01%)</title><rect x="99.8800%" y="757" width="0.0100%" height="15" fill="rgb(230,137,11)"/><text x="100.1300%" y="767.50"></text></g><g><title>all (9,996 samples, 100%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(212,28,1)"/><text x="0.2500%" y="895.50"></text></g><g><title>perf (11 samples, 0.11%)</title><rect x="99.8900%" y="869" width="0.1100%" height="15" fill="rgb(248,164,17)"/><text x="100.1400%" y="879.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="853" width="0.1100%" height="15" fill="rgb(222,171,42)"/><text x="100.1400%" y="863.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="837" width="0.1100%" height="15" fill="rgb(243,84,45)"/><text x="100.1400%" y="847.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="821" width="0.1100%" height="15" fill="rgb(252,49,23)"/><text x="100.1400%" y="831.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="805" width="0.1100%" height="15" fill="rgb(215,19,7)"/><text x="100.1400%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="789" width="0.1100%" height="15" fill="rgb(238,81,41)"/><text x="100.1400%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="773" width="0.1100%" height="15" fill="rgb(210,199,37)"/><text x="100.1400%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="757" width="0.1100%" height="15" fill="rgb(244,192,49)"/><text x="100.1400%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="741" width="0.1100%" height="15" fill="rgb(226,211,11)"/><text x="100.1400%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="725" width="0.1100%" height="15" fill="rgb(236,162,54)"/><text x="100.1400%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="709" width="0.1100%" height="15" fill="rgb(220,229,9)"/><text x="100.1400%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="693" width="0.1100%" height="15" fill="rgb(250,87,22)"/><text x="100.1400%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.11%)</title><rect x="99.8900%" y="677" width="0.1100%" height="15" fill="rgb(239,43,17)"/><text x="100.1400%" y="687.50"></text></g></svg></svg>