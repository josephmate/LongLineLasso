<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (133 samples, 0.34%)</title><rect x="3.1496%" y="549" width="0.3351%" height="15" fill="rgb(227,0,7)"/><text x="3.3996%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (133 samples, 0.34%)</title><rect x="3.1496%" y="533" width="0.3351%" height="15" fill="rgb(217,0,24)"/><text x="3.3996%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (11 samples, 0.03%)</title><rect x="3.4571%" y="517" width="0.0277%" height="15" fill="rgb(221,193,54)"/><text x="3.7071%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (11 samples, 0.03%)</title><rect x="3.4571%" y="501" width="0.0277%" height="15" fill="rgb(248,212,6)"/><text x="3.7071%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (412 samples, 1.04%)</title><rect x="3.1496%" y="565" width="1.0381%" height="15" fill="rgb(208,68,35)"/><text x="3.3996%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (279 samples, 0.70%)</title><rect x="3.4848%" y="549" width="0.7030%" height="15" fill="rgb(232,128,0)"/><text x="3.7348%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (279 samples, 0.70%)</title><rect x="3.4848%" y="533" width="0.7030%" height="15" fill="rgb(207,160,47)"/><text x="3.7348%" y="543.50"></text></g><g><title>core::slice::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (279 samples, 0.70%)</title><rect x="3.4848%" y="517" width="0.7030%" height="15" fill="rgb(228,23,34)"/><text x="3.7348%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::SlicePartialEq&lt;B&gt;&gt;::equal (279 samples, 0.70%)</title><rect x="3.4848%" y="501" width="0.7030%" height="15" fill="rgb(218,30,26)"/><text x="3.7348%" y="511.50"></text></g><g><title>__memcmp_sse4_1 (214 samples, 0.54%)</title><rect x="3.6485%" y="485" width="0.5392%" height="15" fill="rgb(220,122,19)"/><text x="3.8985%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (9 samples, 0.02%)</title><rect x="4.2583%" y="533" width="0.0227%" height="15" fill="rgb(250,228,42)"/><text x="4.5083%" y="543.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (10 samples, 0.03%)</title><rect x="5.1805%" y="501" width="0.0252%" height="15" fill="rgb(240,193,28)"/><text x="5.4305%" y="511.50"></text></g><g><title>core::cmp::min (4 samples, 0.01%)</title><rect x="5.1957%" y="485" width="0.0101%" height="15" fill="rgb(216,20,37)"/><text x="5.4457%" y="495.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.01%)</title><rect x="5.1957%" y="469" width="0.0101%" height="15" fill="rgb(206,188,39)"/><text x="5.4457%" y="479.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.01%)</title><rect x="5.1957%" y="453" width="0.0101%" height="15" fill="rgb(217,207,13)"/><text x="5.4457%" y="463.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::BufRead&gt;::consume (31 samples, 0.08%)</title><rect x="5.1503%" y="517" width="0.0781%" height="15" fill="rgb(231,73,38)"/><text x="5.4003%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (9 samples, 0.02%)</title><rect x="5.2057%" y="501" width="0.0227%" height="15" fill="rgb(225,20,46)"/><text x="5.4557%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (9 samples, 0.02%)</title><rect x="5.2284%" y="517" width="0.0227%" height="15" fill="rgb(210,31,41)"/><text x="5.4784%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::lt (9 samples, 0.02%)</title><rect x="5.2284%" y="501" width="0.0227%" height="15" fill="rgb(221,200,47)"/><text x="5.4784%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (8 samples, 0.02%)</title><rect x="5.8634%" y="469" width="0.0202%" height="15" fill="rgb(226,26,5)"/><text x="6.1134%" y="479.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (8 samples, 0.02%)</title><rect x="5.8634%" y="453" width="0.0202%" height="15" fill="rgb(249,33,26)"/><text x="6.1134%" y="463.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (8 samples, 0.02%)</title><rect x="5.8634%" y="437" width="0.0202%" height="15" fill="rgb(235,183,28)"/><text x="6.1134%" y="447.50"></text></g><g><title>__GI___libc_read (8 samples, 0.02%)</title><rect x="5.8634%" y="421" width="0.0202%" height="15" fill="rgb(221,5,38)"/><text x="6.1134%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="405" width="0.0202%" height="15" fill="rgb(247,18,42)"/><text x="6.1134%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="389" width="0.0202%" height="15" fill="rgb(241,131,45)"/><text x="6.1134%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="373" width="0.0202%" height="15" fill="rgb(249,31,29)"/><text x="6.1134%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="357" width="0.0202%" height="15" fill="rgb(225,111,53)"/><text x="6.1134%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="341" width="0.0202%" height="15" fill="rgb(238,160,17)"/><text x="6.1134%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="325" width="0.0202%" height="15" fill="rgb(214,148,48)"/><text x="6.1134%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="5.8634%" y="309" width="0.0202%" height="15" fill="rgb(232,36,49)"/><text x="6.1134%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="5.8659%" y="293" width="0.0176%" height="15" fill="rgb(209,103,24)"/><text x="6.1159%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="5.8659%" y="277" width="0.0176%" height="15" fill="rgb(229,88,8)"/><text x="6.1159%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="5.8659%" y="261" width="0.0176%" height="15" fill="rgb(213,181,19)"/><text x="6.1159%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="5.8659%" y="245" width="0.0176%" height="15" fill="rgb(254,191,54)"/><text x="6.1159%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="5.8659%" y="229" width="0.0176%" height="15" fill="rgb(241,83,37)"/><text x="6.1159%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (686 samples, 1.73%)</title><rect x="4.1878%" y="565" width="1.7285%" height="15" fill="rgb(233,36,39)"/><text x="4.4378%" y="575.50"></text></g><g><title>&lt;utf8_chars::Chars&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (676 samples, 1.70%)</title><rect x="4.2130%" y="549" width="1.7033%" height="15" fill="rgb(226,3,54)"/><text x="4.4630%" y="559.50"></text></g><g><title>utf8_chars::BufReadCharsExt::read_char_raw (649 samples, 1.64%)</title><rect x="4.2810%" y="533" width="1.6353%" height="15" fill="rgb(245,192,40)"/><text x="4.5310%" y="543.50"></text></g><g><title>utf8_chars::read_byte_and_ignore_interrupts (264 samples, 0.67%)</title><rect x="5.2511%" y="517" width="0.6652%" height="15" fill="rgb(238,167,29)"/><text x="5.5011%" y="527.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::BufRead&gt;::fill_buf (104 samples, 0.26%)</title><rect x="5.6542%" y="501" width="0.2621%" height="15" fill="rgb(232,182,51)"/><text x="5.9042%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (62 samples, 0.16%)</title><rect x="5.7601%" y="485" width="0.1562%" height="15" fill="rgb(231,60,39)"/><text x="6.0101%" y="495.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (13 samples, 0.03%)</title><rect x="5.8835%" y="469" width="0.0328%" height="15" fill="rgb(208,69,12)"/><text x="6.1335%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.03%)</title><rect x="5.8835%" y="453" width="0.0328%" height="15" fill="rgb(235,93,37)"/><text x="6.1335%" y="463.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (12 samples, 0.03%)</title><rect x="5.8861%" y="437" width="0.0302%" height="15" fill="rgb(213,116,39)"/><text x="6.1361%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.03%)</title><rect x="5.8861%" y="421" width="0.0302%" height="15" fill="rgb(222,207,29)"/><text x="6.1361%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.03%)</title><rect x="5.8861%" y="405" width="0.0302%" height="15" fill="rgb(206,96,30)"/><text x="6.1361%" y="415.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (29 samples, 0.07%)</title><rect x="12.5079%" y="517" width="0.0731%" height="15" fill="rgb(218,138,4)"/><text x="12.7579%" y="527.50"></text></g><g><title>core::slice::Iter&lt;T&gt;::pre_dec_end (12 samples, 0.03%)</title><rect x="12.5507%" y="501" width="0.0302%" height="15" fill="rgb(250,191,14)"/><text x="12.8007%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.03%)</title><rect x="12.5507%" y="485" width="0.0302%" height="15" fill="rgb(239,60,40)"/><text x="12.8007%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,649 samples, 6.67%)</title><rect x="5.9163%" y="565" width="6.6747%" height="15" fill="rgb(206,27,48)"/><text x="6.1663%" y="575.50">&lt;core::it..</text></g><g><title>&lt;core::str::Chars as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2,649 samples, 6.67%)</title><rect x="5.9163%" y="549" width="6.6747%" height="15" fill="rgb(225,35,8)"/><text x="6.1663%" y="559.50">&lt;core::st..</text></g><g><title>core::str::next_code_point_reverse (2,649 samples, 6.67%)</title><rect x="5.9163%" y="533" width="6.6747%" height="15" fill="rgb(250,213,24)"/><text x="6.1663%" y="543.50">core::str..</text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="12.5809%" y="517" width="0.0101%" height="15" fill="rgb(247,123,22)"/><text x="12.8309%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="12.5809%" y="501" width="0.0101%" height="15" fill="rgb(231,138,38)"/><text x="12.8309%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="12.5809%" y="485" width="0.0101%" height="15" fill="rgb(231,145,46)"/><text x="12.8309%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="12.5809%" y="469" width="0.0101%" height="15" fill="rgb(251,118,11)"/><text x="12.8309%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (74 samples, 0.19%)</title><rect x="12.5986%" y="565" width="0.1865%" height="15" fill="rgb(217,147,25)"/><text x="12.8486%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::count (17 samples, 0.04%)</title><rect x="12.7422%" y="549" width="0.0428%" height="15" fill="rgb(247,81,37)"/><text x="12.9922%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (10 samples, 0.03%)</title><rect x="12.7598%" y="533" width="0.0252%" height="15" fill="rgb(209,12,38)"/><text x="13.0098%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="25.1770%" y="549" width="0.0202%" height="15" fill="rgb(227,1,9)"/><text x="25.4270%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="25.1770%" y="533" width="0.0202%" height="15" fill="rgb(248,47,43)"/><text x="25.4270%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="25.1770%" y="517" width="0.0202%" height="15" fill="rgb(221,10,30)"/><text x="25.4270%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="25.1795%" y="501" width="0.0176%" height="15" fill="rgb(210,229,1)"/><text x="25.4295%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="25.1795%" y="485" width="0.0176%" height="15" fill="rgb(222,148,37)"/><text x="25.4295%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="25.1820%" y="469" width="0.0151%" height="15" fill="rgb(234,67,33)"/><text x="25.4320%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="25.1820%" y="453" width="0.0151%" height="15" fill="rgb(247,98,35)"/><text x="25.4320%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="25.1871%" y="437" width="0.0101%" height="15" fill="rgb(247,138,52)"/><text x="25.4371%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="25.1871%" y="421" width="0.0101%" height="15" fill="rgb(213,79,30)"/><text x="25.4371%" y="431.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (980 samples, 2.47%)</title><rect x="25.1972%" y="533" width="2.4693%" height="15" fill="rgb(246,177,23)"/><text x="25.4472%" y="543.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (980 samples, 2.47%)</title><rect x="25.1972%" y="517" width="2.4693%" height="15" fill="rgb(230,62,27)"/><text x="25.4472%" y="527.50">al..</text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="27.6564%" y="501" width="0.0101%" height="15" fill="rgb(216,154,8)"/><text x="27.9064%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (997 samples, 2.51%)</title><rect x="25.1972%" y="549" width="2.5122%" height="15" fill="rgb(244,35,45)"/><text x="25.4472%" y="559.50">al..</text></g><g><title>core::ptr::read (17 samples, 0.04%)</title><rect x="27.6665%" y="533" width="0.0428%" height="15" fill="rgb(251,115,12)"/><text x="27.9165%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.04%)</title><rect x="27.6665%" y="517" width="0.0428%" height="15" fill="rgb(240,54,50)"/><text x="27.9165%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (1,332 samples, 3.36%)</title><rect x="27.7093%" y="549" width="3.3563%" height="15" fill="rgb(233,84,52)"/><text x="27.9593%" y="559.50">all..</text></g><g><title>alloc::collections::vec_deque::wrap_index (1,009 samples, 2.54%)</title><rect x="31.0656%" y="533" width="2.5424%" height="15" fill="rgb(207,117,47)"/><text x="31.3156%" y="543.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (8,268 samples, 20.83%)</title><rect x="12.7850%" y="565" width="20.8330%" height="15" fill="rgb(249,43,39)"/><text x="13.0350%" y="575.50">alloc::collections::vec_deque::Ve..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (1,013 samples, 2.55%)</title><rect x="31.0656%" y="549" width="2.5525%" height="15" fill="rgb(209,38,44)"/><text x="31.3156%" y="559.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (4 samples, 0.01%)</title><rect x="33.6080%" y="533" width="0.0101%" height="15" fill="rgb(236,212,23)"/><text x="33.8580%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (10 samples, 0.03%)</title><rect x="33.7264%" y="533" width="0.0252%" height="15" fill="rgb(242,79,21)"/><text x="33.9764%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.03%)</title><rect x="33.7264%" y="517" width="0.0252%" height="15" fill="rgb(211,96,35)"/><text x="33.9764%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (41 samples, 0.10%)</title><rect x="33.7264%" y="549" width="0.1033%" height="15" fill="rgb(253,215,40)"/><text x="33.9764%" y="559.50"></text></g><g><title>core::ptr::write (31 samples, 0.08%)</title><rect x="33.7516%" y="533" width="0.0781%" height="15" fill="rgb(211,81,21)"/><text x="34.0016%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (7 samples, 0.02%)</title><rect x="33.8297%" y="549" width="0.0176%" height="15" fill="rgb(208,190,38)"/><text x="34.0797%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (7 samples, 0.02%)</title><rect x="33.8297%" y="533" width="0.0176%" height="15" fill="rgb(235,213,38)"/><text x="34.0797%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::count (7 samples, 0.02%)</title><rect x="33.8297%" y="517" width="0.0176%" height="15" fill="rgb(237,122,38)"/><text x="34.0797%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (115 samples, 0.29%)</title><rect x="33.6181%" y="565" width="0.2898%" height="15" fill="rgb(244,218,35)"/><text x="33.8681%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (24 samples, 0.06%)</title><rect x="33.8474%" y="549" width="0.0605%" height="15" fill="rgb(240,68,47)"/><text x="34.0974%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (23 samples, 0.06%)</title><rect x="33.8499%" y="533" width="0.0580%" height="15" fill="rgb(210,16,53)"/><text x="34.0999%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="39.3731%" y="549" width="0.0151%" height="15" fill="rgb(235,124,12)"/><text x="39.6231%" y="559.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="39.3731%" y="533" width="0.0151%" height="15" fill="rgb(224,169,11)"/><text x="39.6231%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="39.3731%" y="517" width="0.0151%" height="15" fill="rgb(250,166,2)"/><text x="39.6231%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="39.3731%" y="501" width="0.0151%" height="15" fill="rgb(242,216,29)"/><text x="39.6231%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="39.3731%" y="485" width="0.0151%" height="15" fill="rgb(230,116,27)"/><text x="39.6231%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="39.3756%" y="469" width="0.0126%" height="15" fill="rgb(228,99,48)"/><text x="39.6256%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (49 samples, 0.12%)</title><rect x="39.3882%" y="533" width="0.1235%" height="15" fill="rgb(253,11,6)"/><text x="39.6382%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (49 samples, 0.12%)</title><rect x="39.3882%" y="517" width="0.1235%" height="15" fill="rgb(247,143,39)"/><text x="39.6382%" y="527.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (1,026 samples, 2.59%)</title><rect x="39.3882%" y="549" width="2.5852%" height="15" fill="rgb(236,97,10)"/><text x="39.6382%" y="559.50">al..</text></g><g><title>core::ptr::write (977 samples, 2.46%)</title><rect x="39.5117%" y="533" width="2.4618%" height="15" fill="rgb(233,208,19)"/><text x="39.7617%" y="543.50">co..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (2,243 samples, 5.65%)</title><rect x="41.9734%" y="549" width="5.6517%" height="15" fill="rgb(216,164,2)"/><text x="42.2234%" y="559.50">alloc::..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (2,232 samples, 5.62%)</title><rect x="42.0012%" y="533" width="5.6240%" height="15" fill="rgb(220,129,5)"/><text x="42.2512%" y="543.50">alloc::..</text></g><g><title>alloc::collections::vec_deque::count (2,232 samples, 5.62%)</title><rect x="42.0012%" y="517" width="5.6240%" height="15" fill="rgb(242,17,10)"/><text x="42.2512%" y="527.50">alloc::..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="47.6100%" y="501" width="0.0151%" height="15" fill="rgb(242,107,0)"/><text x="47.8600%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="47.6126%" y="485" width="0.0126%" height="15" fill="rgb(251,28,31)"/><text x="47.8626%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="47.6126%" y="469" width="0.0126%" height="15" fill="rgb(233,223,10)"/><text x="47.8626%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="47.6126%" y="453" width="0.0126%" height="15" fill="rgb(215,21,27)"/><text x="47.8626%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="47.6126%" y="437" width="0.0126%" height="15" fill="rgb(232,23,21)"/><text x="47.8626%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="47.6126%" y="421" width="0.0126%" height="15" fill="rgb(244,5,23)"/><text x="47.8626%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="47.6126%" y="405" width="0.0126%" height="15" fill="rgb(226,81,46)"/><text x="47.8626%" y="415.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,251 samples, 5.67%)</title><rect x="47.6252%" y="533" width="5.6719%" height="15" fill="rgb(247,70,30)"/><text x="47.8752%" y="543.50">alloc::..</text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="53.2870%" y="517" width="0.0101%" height="15" fill="rgb(212,68,19)"/><text x="53.5370%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="57.9358%" y="405" width="0.0277%" height="15" fill="rgb(240,187,13)"/><text x="58.1858%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="57.9358%" y="389" width="0.0277%" height="15" fill="rgb(223,113,26)"/><text x="58.1858%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="57.9358%" y="373" width="0.0277%" height="15" fill="rgb(206,192,2)"/><text x="58.1858%" y="383.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (9,548 samples, 24.06%)</title><rect x="33.9078%" y="565" width="24.0583%" height="15" fill="rgb(241,108,4)"/><text x="34.1578%" y="575.50">alloc::collections::vec_deque::VecDequ..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (4,104 samples, 10.34%)</title><rect x="47.6252%" y="549" width="10.3409%" height="15" fill="rgb(247,173,49)"/><text x="47.8752%" y="559.50">alloc::collecti..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,853 samples, 4.67%)</title><rect x="53.2970%" y="533" width="4.6690%" height="15" fill="rgb(224,114,35)"/><text x="53.5470%" y="543.50">core:..</text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="57.9333%" y="517" width="0.0328%" height="15" fill="rgb(245,159,27)"/><text x="58.1833%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="57.9333%" y="501" width="0.0328%" height="15" fill="rgb(245,172,44)"/><text x="58.1833%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="57.9333%" y="485" width="0.0328%" height="15" fill="rgb(236,23,11)"/><text x="58.1833%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="57.9333%" y="469" width="0.0328%" height="15" fill="rgb(205,117,38)"/><text x="58.1833%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="57.9333%" y="453" width="0.0328%" height="15" fill="rgb(237,72,25)"/><text x="58.1833%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="57.9333%" y="437" width="0.0328%" height="15" fill="rgb(244,70,9)"/><text x="58.1833%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (12 samples, 0.03%)</title><rect x="57.9358%" y="421" width="0.0302%" height="15" fill="rgb(217,125,39)"/><text x="58.1858%" y="431.50"></text></g><g><title>alloc::string::String::new (30 samples, 0.08%)</title><rect x="57.9661%" y="565" width="0.0756%" height="15" fill="rgb(235,36,10)"/><text x="58.2161%" y="575.50"></text></g><g><title>[[kernel.kallsyms]] (8 samples, 0.02%)</title><rect x="64.3007%" y="533" width="0.0202%" height="15" fill="rgb(251,123,47)"/><text x="64.5507%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="64.3032%" y="517" width="0.0176%" height="15" fill="rgb(221,13,13)"/><text x="64.5532%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="64.3032%" y="501" width="0.0176%" height="15" fill="rgb(238,131,9)"/><text x="64.5532%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="64.3032%" y="485" width="0.0176%" height="15" fill="rgb(211,50,8)"/><text x="64.5532%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="64.3057%" y="469" width="0.0151%" height="15" fill="rgb(245,182,24)"/><text x="64.5557%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="64.3082%" y="453" width="0.0126%" height="15" fill="rgb(242,14,37)"/><text x="64.5582%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (261 samples, 0.66%)</title><rect x="64.3208%" y="533" width="0.6576%" height="15" fill="rgb(246,228,12)"/><text x="64.5708%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (261 samples, 0.66%)</title><rect x="64.3208%" y="517" width="0.6576%" height="15" fill="rgb(213,55,15)"/><text x="64.5708%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (52 samples, 0.13%)</title><rect x="67.3520%" y="469" width="0.1310%" height="15" fill="rgb(209,9,3)"/><text x="67.6020%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (59 samples, 0.15%)</title><rect x="67.4831%" y="469" width="0.1487%" height="15" fill="rgb(230,59,30)"/><text x="67.7331%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="75.5109%" y="373" width="0.0101%" height="15" fill="rgb(209,121,21)"/><text x="75.7609%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="75.5109%" y="357" width="0.0101%" height="15" fill="rgb(220,109,13)"/><text x="75.7609%" y="367.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.09%)</title><rect x="75.5210%" y="373" width="0.0857%" height="15" fill="rgb(232,18,1)"/><text x="75.7710%" y="383.50"></text></g><g><title>__memcpy_ssse3 (192 samples, 0.48%)</title><rect x="75.6066%" y="373" width="0.4838%" height="15" fill="rgb(215,41,42)"/><text x="75.8566%" y="383.50"></text></g><g><title>free_perturb (23 samples, 0.06%)</title><rect x="78.8646%" y="357" width="0.0580%" height="15" fill="rgb(224,123,36)"/><text x="79.1146%" y="367.50"></text></g><g><title>_int_free (1,167 samples, 2.94%)</title><rect x="76.0904%" y="373" width="2.9405%" height="15" fill="rgb(240,125,3)"/><text x="76.3404%" y="383.50">_i..</text></g><g><title>tcache_put (43 samples, 0.11%)</title><rect x="78.9226%" y="357" width="0.1083%" height="15" fill="rgb(205,98,50)"/><text x="79.1726%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="84.5063%" y="357" width="0.0176%" height="15" fill="rgb(205,185,37)"/><text x="84.7563%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="84.5088%" y="341" width="0.0151%" height="15" fill="rgb(238,207,15)"/><text x="84.7588%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="84.5113%" y="325" width="0.0126%" height="15" fill="rgb(213,199,42)"/><text x="84.7613%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="84.5113%" y="309" width="0.0126%" height="15" fill="rgb(235,201,11)"/><text x="84.7613%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="84.5138%" y="293" width="0.0101%" height="15" fill="rgb(207,46,11)"/><text x="84.7638%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="84.5138%" y="277" width="0.0101%" height="15" fill="rgb(241,35,35)"/><text x="84.7638%" y="287.50"></text></g><g><title>alloc_perturb (30 samples, 0.08%)</title><rect x="84.5239%" y="357" width="0.0756%" height="15" fill="rgb(243,32,47)"/><text x="84.7739%" y="367.50"></text></g><g><title>checked_request2size (41 samples, 0.10%)</title><rect x="84.5995%" y="357" width="0.1033%" height="15" fill="rgb(247,202,23)"/><text x="84.8495%" y="367.50"></text></g><g><title>_int_malloc (2,310 samples, 5.82%)</title><rect x="79.0309%" y="373" width="5.8205%" height="15" fill="rgb(219,102,11)"/><text x="79.2809%" y="383.50">_int_ma..</text></g><g><title>unlink_chunk (59 samples, 0.15%)</title><rect x="84.7028%" y="357" width="0.1487%" height="15" fill="rgb(243,110,44)"/><text x="84.9528%" y="367.50"></text></g><g><title>_int_realloc (5,482 samples, 13.81%)</title><rect x="71.3080%" y="389" width="13.8131%" height="15" fill="rgb(222,74,54)"/><text x="71.5580%" y="399.50">_int_realloc</text></g><g><title>unlink_chunk (107 samples, 0.27%)</title><rect x="84.8515%" y="373" width="0.2696%" height="15" fill="rgb(216,99,12)"/><text x="85.1015%" y="383.50"></text></g><g><title>__GI___libc_realloc (6,780 samples, 17.08%)</title><rect x="68.2490%" y="405" width="17.0837%" height="15" fill="rgb(226,22,26)"/><text x="68.4990%" y="415.50">__GI___libc_realloc</text></g><g><title>checked_request2size (84 samples, 0.21%)</title><rect x="85.1211%" y="389" width="0.2117%" height="15" fill="rgb(217,163,10)"/><text x="85.3711%" y="399.50"></text></g><g><title>__rdl_realloc (402 samples, 1.01%)</title><rect x="85.3327%" y="405" width="1.0129%" height="15" fill="rgb(213,25,53)"/><text x="85.5827%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (237 samples, 0.60%)</title><rect x="85.7485%" y="389" width="0.5972%" height="15" fill="rgb(252,105,26)"/><text x="85.9985%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (7,430 samples, 18.72%)</title><rect x="67.9114%" y="453" width="18.7215%" height="15" fill="rgb(220,39,43)"/><text x="68.1614%" y="463.50">&lt;alloc::alloc::Global as core..</text></g><g><title>alloc::alloc::Global::grow_impl (7,430 samples, 18.72%)</title><rect x="67.9114%" y="437" width="18.7215%" height="15" fill="rgb(229,68,48)"/><text x="68.1614%" y="447.50">alloc::alloc::Global::grow_im..</text></g><g><title>alloc::alloc::realloc (7,380 samples, 18.60%)</title><rect x="68.0374%" y="421" width="18.5955%" height="15" fill="rgb(252,8,32)"/><text x="68.2874%" y="431.50">alloc::alloc::realloc</text></g><g><title>__rust_realloc (114 samples, 0.29%)</title><rect x="86.3457%" y="405" width="0.2872%" height="15" fill="rgb(223,20,43)"/><text x="86.5957%" y="415.50"></text></g><g><title>checked_request2size (37 samples, 0.09%)</title><rect x="86.9680%" y="437" width="0.0932%" height="15" fill="rgb(229,81,49)"/><text x="87.2180%" y="447.50"></text></g><g><title>__GI___libc_malloc (260 samples, 0.66%)</title><rect x="86.6329%" y="453" width="0.6551%" height="15" fill="rgb(236,28,36)"/><text x="86.8829%" y="463.50"></text></g><g><title>tcache_get (90 samples, 0.23%)</title><rect x="87.0613%" y="437" width="0.2268%" height="15" fill="rgb(249,185,26)"/><text x="87.3113%" y="447.50"></text></g><g><title>__rdl_alloc (53 samples, 0.13%)</title><rect x="87.2880%" y="453" width="0.1335%" height="15" fill="rgb(249,174,33)"/><text x="87.5380%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (53 samples, 0.13%)</title><rect x="87.2880%" y="437" width="0.1335%" height="15" fill="rgb(233,201,37)"/><text x="87.5380%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (7,870 samples, 19.83%)</title><rect x="67.6317%" y="469" width="19.8302%" height="15" fill="rgb(221,78,26)"/><text x="67.8817%" y="479.50">alloc::raw_vec::finish_grow</text></g><g><title>__rust_alloc (16 samples, 0.04%)</title><rect x="87.4216%" y="453" width="0.0403%" height="15" fill="rgb(250,127,30)"/><text x="87.6716%" y="463.50"></text></g><g><title>core::cmp::max (64 samples, 0.16%)</title><rect x="87.4619%" y="469" width="0.1613%" height="15" fill="rgb(230,49,44)"/><text x="87.7119%" y="479.50"></text></g><g><title>core::cmp::Ord::max (64 samples, 0.16%)</title><rect x="87.4619%" y="453" width="0.1613%" height="15" fill="rgb(229,67,23)"/><text x="87.7119%" y="463.50"></text></g><g><title>core::cmp::max_by (64 samples, 0.16%)</title><rect x="87.4619%" y="437" width="0.1613%" height="15" fill="rgb(249,83,47)"/><text x="87.7119%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8,108 samples, 20.43%)</title><rect x="67.3495%" y="485" width="20.4299%" height="15" fill="rgb(215,43,3)"/><text x="67.5995%" y="495.50">alloc::raw_vec::RawVec&lt;T,A&gt;::gro..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (62 samples, 0.16%)</title><rect x="87.6232%" y="469" width="0.1562%" height="15" fill="rgb(238,154,13)"/><text x="87.8732%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9,110 samples, 22.95%)</title><rect x="64.9785%" y="533" width="22.9546%" height="15" fill="rgb(219,56,2)"/><text x="65.2285%" y="543.50">alloc::vec::Vec&lt;T&gt;::reserve</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8,499 samples, 21.42%)</title><rect x="66.5180%" y="517" width="21.4151%" height="15" fill="rgb(233,0,4)"/><text x="66.7680%" y="527.50">alloc::raw_vec::RawVec&lt;T,A&gt;::reser..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (8,169 samples, 20.58%)</title><rect x="67.3495%" y="501" width="20.5836%" height="15" fill="rgb(235,30,7)"/><text x="67.5995%" y="511.50">alloc::raw_vec::RawVec&lt;T,A&gt;::try..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (61 samples, 0.15%)</title><rect x="87.7794%" y="485" width="0.1537%" height="15" fill="rgb(250,79,13)"/><text x="88.0294%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (54 samples, 0.14%)</title><rect x="87.7970%" y="469" width="0.1361%" height="15" fill="rgb(211,146,34)"/><text x="88.0470%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (11,930 samples, 30.06%)</title><rect x="58.7548%" y="549" width="30.0602%" height="15" fill="rgb(228,22,38)"/><text x="59.0048%" y="559.50">alloc::vec::Vec&lt;T&gt;::push</text></g><g><title>core::ptr::write (350 samples, 0.88%)</title><rect x="87.9331%" y="533" width="0.8819%" height="15" fill="rgb(235,168,5)"/><text x="88.1831%" y="543.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="91.2767%" y="421" width="0.0101%" height="15" fill="rgb(221,155,16)"/><text x="91.5267%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="91.2767%" y="405" width="0.0101%" height="15" fill="rgb(215,215,53)"/><text x="91.5267%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="91.2767%" y="389" width="0.0101%" height="15" fill="rgb(223,4,10)"/><text x="91.5267%" y="399.50"></text></g><g><title>alloc::string::String::push (13,195 samples, 33.25%)</title><rect x="58.0417%" y="565" width="33.2477%" height="15" fill="rgb(234,103,6)"/><text x="58.2917%" y="575.50">alloc::string::String::push</text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (982 samples, 2.47%)</title><rect x="88.8150%" y="549" width="2.4744%" height="15" fill="rgb(227,97,0)"/><text x="89.0650%" y="559.50">co..</text></g><g><title>core::char::methods::len_utf8 (982 samples, 2.47%)</title><rect x="88.8150%" y="533" width="2.4744%" height="15" fill="rgb(234,150,53)"/><text x="89.0650%" y="543.50">co..</text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="91.2742%" y="517" width="0.0151%" height="15" fill="rgb(228,201,54)"/><text x="91.5242%" y="527.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="91.2742%" y="501" width="0.0151%" height="15" fill="rgb(222,22,37)"/><text x="91.5242%" y="511.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="91.2742%" y="485" width="0.0151%" height="15" fill="rgb(237,53,32)"/><text x="91.5242%" y="495.50"></text></g><g><title>[[kernel.kallsyms]] (6 samples, 0.02%)</title><rect x="91.2742%" y="469" width="0.0151%" height="15" fill="rgb(233,25,53)"/><text x="91.5242%" y="479.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="91.2767%" y="453" width="0.0126%" height="15" fill="rgb(210,40,34)"/><text x="91.5267%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="91.2767%" y="437" width="0.0126%" height="15" fill="rgb(241,220,44)"/><text x="91.5267%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11 samples, 0.03%)</title><rect x="91.2919%" y="565" width="0.0277%" height="15" fill="rgb(235,28,35)"/><text x="91.5419%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.01%)</title><rect x="91.3196%" y="565" width="0.0126%" height="15" fill="rgb(210,56,17)"/><text x="91.5696%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (5 samples, 0.01%)</title><rect x="91.3196%" y="549" width="0.0126%" height="15" fill="rgb(224,130,29)"/><text x="91.5696%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (5 samples, 0.01%)</title><rect x="91.3196%" y="533" width="0.0126%" height="15" fill="rgb(235,212,8)"/><text x="91.5696%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (5 samples, 0.01%)</title><rect x="91.3196%" y="517" width="0.0126%" height="15" fill="rgb(223,33,50)"/><text x="91.5696%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5 samples, 0.01%)</title><rect x="91.3196%" y="501" width="0.0126%" height="15" fill="rgb(219,149,13)"/><text x="91.5696%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="91.3196%" y="485" width="0.0126%" height="15" fill="rgb(250,156,29)"/><text x="91.5696%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="91.3196%" y="469" width="0.0126%" height="15" fill="rgb(216,193,19)"/><text x="91.5696%" y="479.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.01%)</title><rect x="91.3196%" y="453" width="0.0126%" height="15" fill="rgb(216,135,14)"/><text x="91.5696%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.01%)</title><rect x="91.3221%" y="437" width="0.0101%" height="15" fill="rgb(241,47,5)"/><text x="91.5721%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (9 samples, 0.02%)</title><rect x="91.3322%" y="565" width="0.0227%" height="15" fill="rgb(233,42,35)"/><text x="91.5822%" y="575.50"></text></g><g><title>__GI___libc_free (113 samples, 0.28%)</title><rect x="91.4632%" y="469" width="0.2847%" height="15" fill="rgb(231,13,6)"/><text x="91.7132%" y="479.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.02%)</title><rect x="91.7479%" y="469" width="0.0176%" height="15" fill="rgb(207,181,40)"/><text x="91.9979%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (7 samples, 0.02%)</title><rect x="91.7479%" y="453" width="0.0176%" height="15" fill="rgb(254,173,49)"/><text x="91.9979%" y="463.50"></text></g><g><title>__rust_dealloc (14 samples, 0.04%)</title><rect x="91.7656%" y="469" width="0.0353%" height="15" fill="rgb(221,1,38)"/><text x="92.0156%" y="479.50"></text></g><g><title>free_perturb (11 samples, 0.03%)</title><rect x="93.7057%" y="453" width="0.0277%" height="15" fill="rgb(206,124,46)"/><text x="93.9557%" y="463.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="99.7178%" y="437" width="0.0176%" height="15" fill="rgb(249,21,11)"/><text x="99.9678%" y="447.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="99.7178%" y="421" width="0.0176%" height="15" fill="rgb(222,201,40)"/><text x="99.9678%" y="431.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="99.7178%" y="405" width="0.0176%" height="15" fill="rgb(235,61,29)"/><text x="99.9678%" y="415.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="99.7178%" y="389" width="0.0176%" height="15" fill="rgb(219,207,3)"/><text x="99.9678%" y="399.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="99.7228%" y="373" width="0.0126%" height="15" fill="rgb(222,56,46)"/><text x="99.9728%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="99.7228%" y="357" width="0.0126%" height="15" fill="rgb(239,76,54)"/><text x="99.9728%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (5 samples, 0.01%)</title><rect x="99.7228%" y="341" width="0.0126%" height="15" fill="rgb(231,124,27)"/><text x="99.9728%" y="351.50"></text></g><g><title>malloc_consolidate (2,445 samples, 6.16%)</title><rect x="93.7335%" y="453" width="6.1607%" height="15" fill="rgb(249,195,6)"/><text x="93.9835%" y="463.50">malloc_c..</text></g><g><title>unlink_chunk (63 samples, 0.16%)</title><rect x="99.7354%" y="437" width="0.1587%" height="15" fill="rgb(237,174,47)"/><text x="99.9854%" y="447.50"></text></g><g><title>core::ptr::drop_in_place (3,390 samples, 8.54%)</title><rect x="91.3549%" y="565" width="8.5418%" height="15" fill="rgb(206,201,31)"/><text x="91.6049%" y="575.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place (3,390 samples, 8.54%)</title><rect x="91.3549%" y="549" width="8.5418%" height="15" fill="rgb(231,57,52)"/><text x="91.6049%" y="559.50">core::ptr::d..</text></g><g><title>core::ptr::drop_in_place (3,390 samples, 8.54%)</title><rect x="91.3549%" y="533" width="8.5418%" height="15" fill="rgb(248,177,22)"/><text x="91.6049%" y="543.50">core::ptr::d..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,390 samples, 8.54%)</title><rect x="91.3549%" y="517" width="8.5418%" height="15" fill="rgb(215,211,37)"/><text x="91.6049%" y="527.50">&lt;alloc::raw_..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3,380 samples, 8.52%)</title><rect x="91.3800%" y="501" width="8.5166%" height="15" fill="rgb(241,128,51)"/><text x="91.6300%" y="511.50">&lt;alloc::allo..</text></g><g><title>alloc::alloc::dealloc (3,380 samples, 8.52%)</title><rect x="91.3800%" y="485" width="8.5166%" height="15" fill="rgb(227,165,31)"/><text x="91.6300%" y="495.50">alloc::alloc..</text></g><g><title>_int_free (3,213 samples, 8.10%)</title><rect x="91.8008%" y="469" width="8.0959%" height="15" fill="rgb(228,167,24)"/><text x="92.0508%" y="479.50">_int_free</text></g><g><title>&lt;lll::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (39,652 samples, 99.91%)</title><rect x="0.0076%" y="581" width="99.9118%" height="15" fill="rgb(228,143,12)"/><text x="0.2576%" y="591.50">&lt;lll::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::str::&lt;impl str&gt;::chars (9 samples, 0.02%)</title><rect x="99.8967%" y="565" width="0.0227%" height="15" fill="rgb(249,149,8)"/><text x="100.1467%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (9 samples, 0.02%)</title><rect x="99.8967%" y="549" width="0.0227%" height="15" fill="rgb(243,35,44)"/><text x="100.1467%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.02%)</title><rect x="99.8967%" y="533" width="0.0227%" height="15" fill="rgb(246,89,9)"/><text x="100.1467%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (9 samples, 0.02%)</title><rect x="99.8967%" y="517" width="0.0227%" height="15" fill="rgb(233,213,13)"/><text x="100.1467%" y="527.50"></text></g><g><title>std::panic::catch_unwind (39,669 samples, 99.95%)</title><rect x="0.0050%" y="725" width="99.9546%" height="15" fill="rgb(233,141,41)"/><text x="0.2550%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (39,669 samples, 99.95%)</title><rect x="0.0050%" y="709" width="99.9546%" height="15" fill="rgb(239,167,4)"/><text x="0.2550%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (39,669 samples, 99.95%)</title><rect x="0.0050%" y="693" width="99.9546%" height="15" fill="rgb(209,217,16)"/><text x="0.2550%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (39,669 samples, 99.95%)</title><rect x="0.0050%" y="677" width="99.9546%" height="15" fill="rgb(219,88,35)"/><text x="0.2550%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (39,669 samples, 99.95%)</title><rect x="0.0050%" y="661" width="99.9546%" height="15" fill="rgb(220,193,23)"/><text x="0.2550%" y="671.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (39,669 samples, 99.95%)</title><rect x="0.0050%" y="645" width="99.9546%" height="15" fill="rgb(230,90,52)"/><text x="0.2550%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (39,669 samples, 99.95%)</title><rect x="0.0050%" y="629" width="99.9546%" height="15" fill="rgb(252,106,19)"/><text x="0.2550%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>lll::main (39,669 samples, 99.95%)</title><rect x="0.0050%" y="613" width="99.9546%" height="15" fill="rgb(206,74,20)"/><text x="0.2550%" y="623.50">lll::main</text></g><g><title>lll::find_match_std_io (39,668 samples, 99.95%)</title><rect x="0.0076%" y="597" width="99.9521%" height="15" fill="rgb(230,138,44)"/><text x="0.2576%" y="607.50">lll::find_match_std_io</text></g><g><title>std::io::stdio::_print (15 samples, 0.04%)</title><rect x="99.9219%" y="581" width="0.0378%" height="15" fill="rgb(235,182,43)"/><text x="100.1719%" y="591.50"></text></g><g><title>std::io::stdio::print_to (14 samples, 0.04%)</title><rect x="99.9244%" y="565" width="0.0353%" height="15" fill="rgb(242,16,51)"/><text x="100.1744%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.04%)</title><rect x="99.9244%" y="549" width="0.0353%" height="15" fill="rgb(248,9,4)"/><text x="100.1744%" y="559.50"></text></g><g><title>std::io::stdio::print_to::{{closure}} (14 samples, 0.04%)</title><rect x="99.9244%" y="533" width="0.0353%" height="15" fill="rgb(210,31,22)"/><text x="100.1744%" y="543.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (14 samples, 0.04%)</title><rect x="99.9244%" y="517" width="0.0353%" height="15" fill="rgb(239,54,39)"/><text x="100.1744%" y="527.50"></text></g><g><title>std::io::Write::write_fmt (14 samples, 0.04%)</title><rect x="99.9244%" y="501" width="0.0353%" height="15" fill="rgb(230,99,41)"/><text x="100.1744%" y="511.50"></text></g><g><title>core::fmt::write (14 samples, 0.04%)</title><rect x="99.9244%" y="485" width="0.0353%" height="15" fill="rgb(253,106,12)"/><text x="100.1744%" y="495.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (14 samples, 0.04%)</title><rect x="99.9244%" y="469" width="0.0353%" height="15" fill="rgb(213,46,41)"/><text x="100.1744%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (14 samples, 0.04%)</title><rect x="99.9244%" y="453" width="0.0353%" height="15" fill="rgb(215,133,35)"/><text x="100.1744%" y="463.50"></text></g><g><title>std::io::Write::write_all (14 samples, 0.04%)</title><rect x="99.9244%" y="437" width="0.0353%" height="15" fill="rgb(213,28,5)"/><text x="100.1744%" y="447.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (14 samples, 0.04%)</title><rect x="99.9244%" y="421" width="0.0353%" height="15" fill="rgb(215,77,49)"/><text x="100.1744%" y="431.50"></text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (13 samples, 0.03%)</title><rect x="99.9269%" y="405" width="0.0328%" height="15" fill="rgb(248,100,22)"/><text x="100.1769%" y="415.50"></text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (13 samples, 0.03%)</title><rect x="99.9269%" y="389" width="0.0328%" height="15" fill="rgb(208,67,9)"/><text x="100.1769%" y="399.50"></text></g><g><title>std::io::buffered::BufWriter&lt;W&gt;::flush_buf (13 samples, 0.03%)</title><rect x="99.9269%" y="373" width="0.0328%" height="15" fill="rgb(219,133,21)"/><text x="100.1769%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (13 samples, 0.03%)</title><rect x="99.9269%" y="357" width="0.0328%" height="15" fill="rgb(246,46,29)"/><text x="100.1769%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (13 samples, 0.03%)</title><rect x="99.9269%" y="341" width="0.0328%" height="15" fill="rgb(246,185,52)"/><text x="100.1769%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (13 samples, 0.03%)</title><rect x="99.9269%" y="325" width="0.0328%" height="15" fill="rgb(252,136,11)"/><text x="100.1769%" y="335.50"></text></g><g><title>__GI___libc_write (13 samples, 0.03%)</title><rect x="99.9269%" y="309" width="0.0328%" height="15" fill="rgb(219,138,53)"/><text x="100.1769%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="293" width="0.0328%" height="15" fill="rgb(211,51,23)"/><text x="100.1769%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="277" width="0.0328%" height="15" fill="rgb(247,221,28)"/><text x="100.1769%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="261" width="0.0328%" height="15" fill="rgb(251,222,45)"/><text x="100.1769%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="245" width="0.0328%" height="15" fill="rgb(217,162,53)"/><text x="100.1769%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="229" width="0.0328%" height="15" fill="rgb(229,93,14)"/><text x="100.1769%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="213" width="0.0328%" height="15" fill="rgb(209,67,49)"/><text x="100.1769%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="197" width="0.0328%" height="15" fill="rgb(213,87,29)"/><text x="100.1769%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="181" width="0.0328%" height="15" fill="rgb(205,151,52)"/><text x="100.1769%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="165" width="0.0328%" height="15" fill="rgb(253,215,39)"/><text x="100.1769%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="149" width="0.0328%" height="15" fill="rgb(221,220,41)"/><text x="100.1769%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (13 samples, 0.03%)</title><rect x="99.9269%" y="133" width="0.0328%" height="15" fill="rgb(218,133,21)"/><text x="100.1769%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9320%" y="117" width="0.0277%" height="15" fill="rgb(221,193,43)"/><text x="100.1820%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.03%)</title><rect x="99.9345%" y="101" width="0.0252%" height="15" fill="rgb(240,128,52)"/><text x="100.1845%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (10 samples, 0.03%)</title><rect x="99.9345%" y="85" width="0.0252%" height="15" fill="rgb(253,114,12)"/><text x="100.1845%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="99.9420%" y="69" width="0.0176%" height="15" fill="rgb(215,223,47)"/><text x="100.1920%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (7 samples, 0.02%)</title><rect x="99.9420%" y="53" width="0.0176%" height="15" fill="rgb(248,225,23)"/><text x="100.1920%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (4 samples, 0.01%)</title><rect x="99.9496%" y="37" width="0.0101%" height="15" fill="rgb(250,108,0)"/><text x="100.1996%" y="47.50"></text></g><g><title>__libc_start_main (39,671 samples, 99.96%)</title><rect x="0.0025%" y="773" width="99.9597%" height="15" fill="rgb(228,208,7)"/><text x="0.2525%" y="783.50">__libc_start_main</text></g><g><title>main (39,670 samples, 99.96%)</title><rect x="0.0050%" y="757" width="99.9572%" height="15" fill="rgb(244,45,10)"/><text x="0.2550%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (39,670 samples, 99.96%)</title><rect x="0.0050%" y="741" width="99.9572%" height="15" fill="rgb(207,125,25)"/><text x="0.2550%" y="751.50">std::rt::lang_start_internal</text></g><g><title>lll (39,676 samples, 99.97%)</title><rect x="0.0000%" y="805" width="99.9723%" height="15" fill="rgb(210,195,18)"/><text x="0.2500%" y="815.50">lll</text></g><g><title>_start (39,675 samples, 99.97%)</title><rect x="0.0025%" y="789" width="99.9698%" height="15" fill="rgb(249,80,12)"/><text x="0.2525%" y="799.50">_start</text></g><g><title>_dl_start (4 samples, 0.01%)</title><rect x="99.9622%" y="773" width="0.0101%" height="15" fill="rgb(221,65,9)"/><text x="100.2122%" y="783.50"></text></g><g><title>_dl_start_final (4 samples, 0.01%)</title><rect x="99.9622%" y="757" width="0.0101%" height="15" fill="rgb(235,49,36)"/><text x="100.2122%" y="767.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.01%)</title><rect x="99.9622%" y="741" width="0.0101%" height="15" fill="rgb(225,32,20)"/><text x="100.2122%" y="751.50"></text></g><g><title>all (39,687 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(215,141,46)"/><text x="0.2500%" y="831.50"></text></g><g><title>perf (11 samples, 0.03%)</title><rect x="99.9723%" y="805" width="0.0277%" height="15" fill="rgb(250,160,47)"/><text x="100.2223%" y="815.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="789" width="0.0277%" height="15" fill="rgb(216,222,40)"/><text x="100.2223%" y="799.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="773" width="0.0277%" height="15" fill="rgb(234,217,39)"/><text x="100.2223%" y="783.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="757" width="0.0277%" height="15" fill="rgb(207,178,40)"/><text x="100.2223%" y="767.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="741" width="0.0277%" height="15" fill="rgb(221,136,13)"/><text x="100.2223%" y="751.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="725" width="0.0277%" height="15" fill="rgb(249,199,10)"/><text x="100.2223%" y="735.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="709" width="0.0277%" height="15" fill="rgb(249,222,13)"/><text x="100.2223%" y="719.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="693" width="0.0277%" height="15" fill="rgb(244,185,38)"/><text x="100.2223%" y="703.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="677" width="0.0277%" height="15" fill="rgb(236,202,9)"/><text x="100.2223%" y="687.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="661" width="0.0277%" height="15" fill="rgb(250,229,37)"/><text x="100.2223%" y="671.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="645" width="0.0277%" height="15" fill="rgb(206,174,23)"/><text x="100.2223%" y="655.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="629" width="0.0277%" height="15" fill="rgb(211,33,43)"/><text x="100.2223%" y="639.50"></text></g><g><title>[[kernel.kallsyms]] (11 samples, 0.03%)</title><rect x="99.9723%" y="613" width="0.0277%" height="15" fill="rgb(245,58,50)"/><text x="100.2223%" y="623.50"></text></g></svg></svg>