<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::boxed::Box&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,489 samples, 1.66%)</title><rect x="58.3949%" y="341" width="1.6592%" height="15" fill="rgb(227,0,7)"/><text x="58.6449%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.02%)</title><rect x="60.0375%" y="325" width="0.0167%" height="15" fill="rgb(217,0,24)"/><text x="60.2875%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.02%)</title><rect x="60.0375%" y="309" width="0.0167%" height="15" fill="rgb(221,193,54)"/><text x="60.2875%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (22 samples, 0.01%)</title><rect x="60.0395%" y="293" width="0.0147%" height="15" fill="rgb(248,212,6)"/><text x="60.2895%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.01%)</title><rect x="60.0401%" y="277" width="0.0140%" height="15" fill="rgb(208,68,35)"/><text x="60.2901%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (19 samples, 0.01%)</title><rect x="60.0415%" y="261" width="0.0127%" height="15" fill="rgb(232,128,0)"/><text x="60.2915%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (19 samples, 0.01%)</title><rect x="60.0415%" y="245" width="0.0127%" height="15" fill="rgb(207,160,47)"/><text x="60.2915%" y="255.50"></text></g><g><title>__GI___libc_read (817 samples, 0.54%)</title><rect x="64.0159%" y="245" width="0.5446%" height="15" fill="rgb(228,23,34)"/><text x="64.2659%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (813 samples, 0.54%)</title><rect x="64.0186%" y="229" width="0.5420%" height="15" fill="rgb(218,30,26)"/><text x="64.2686%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (813 samples, 0.54%)</title><rect x="64.0186%" y="213" width="0.5420%" height="15" fill="rgb(220,122,19)"/><text x="64.2686%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (812 samples, 0.54%)</title><rect x="64.0193%" y="197" width="0.5413%" height="15" fill="rgb(250,228,42)"/><text x="64.2693%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (812 samples, 0.54%)</title><rect x="64.0193%" y="181" width="0.5413%" height="15" fill="rgb(240,193,28)"/><text x="64.2693%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (811 samples, 0.54%)</title><rect x="64.0199%" y="165" width="0.5406%" height="15" fill="rgb(216,20,37)"/><text x="64.2699%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (806 samples, 0.54%)</title><rect x="64.0233%" y="149" width="0.5373%" height="15" fill="rgb(206,188,39)"/><text x="64.2733%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (804 samples, 0.54%)</title><rect x="64.0246%" y="133" width="0.5360%" height="15" fill="rgb(217,207,13)"/><text x="64.2746%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (799 samples, 0.53%)</title><rect x="64.0279%" y="117" width="0.5326%" height="15" fill="rgb(231,73,38)"/><text x="64.2779%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (794 samples, 0.53%)</title><rect x="64.0313%" y="101" width="0.5293%" height="15" fill="rgb(225,20,46)"/><text x="64.2813%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (793 samples, 0.53%)</title><rect x="64.0319%" y="85" width="0.5286%" height="15" fill="rgb(210,31,41)"/><text x="64.2819%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (750 samples, 0.50%)</title><rect x="64.0606%" y="69" width="0.5000%" height="15" fill="rgb(221,200,47)"/><text x="64.3106%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (728 samples, 0.49%)</title><rect x="64.0752%" y="53" width="0.4853%" height="15" fill="rgb(226,26,5)"/><text x="64.3252%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (33 samples, 0.02%)</title><rect x="64.5386%" y="37" width="0.0220%" height="15" fill="rgb(249,33,26)"/><text x="64.7886%" y="47.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read (819 samples, 0.55%)</title><rect x="64.0153%" y="325" width="0.5460%" height="15" fill="rgb(235,183,28)"/><text x="64.2653%" y="335.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (819 samples, 0.55%)</title><rect x="64.0153%" y="309" width="0.5460%" height="15" fill="rgb(221,5,38)"/><text x="64.2653%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (818 samples, 0.55%)</title><rect x="64.0159%" y="293" width="0.5453%" height="15" fill="rgb(247,18,42)"/><text x="64.2659%" y="303.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (818 samples, 0.55%)</title><rect x="64.0159%" y="277" width="0.5453%" height="15" fill="rgb(241,131,45)"/><text x="64.2659%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (818 samples, 0.55%)</title><rect x="64.0159%" y="261" width="0.5453%" height="15" fill="rgb(249,31,29)"/><text x="64.2659%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.01%)</title><rect x="64.5646%" y="229" width="0.0107%" height="15" fill="rgb(225,111,53)"/><text x="64.8146%" y="239.50"></text></g><g><title>&lt;lll::string_stream_editor::CharIterator as core::iter::traits::iterator::Iterator&gt;::next (6,783 samples, 4.52%)</title><rect x="60.0541%" y="341" width="4.5218%" height="15" fill="rgb(238,160,17)"/><text x="60.3041%" y="351.50">&lt;lll:..</text></g><g><title>[[kernel.kallsyms]] (22 samples, 0.01%)</title><rect x="64.5612%" y="325" width="0.0147%" height="15" fill="rgb(214,148,48)"/><text x="64.8112%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.01%)</title><rect x="64.5619%" y="309" width="0.0140%" height="15" fill="rgb(232,36,49)"/><text x="64.8119%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.01%)</title><rect x="64.5626%" y="293" width="0.0133%" height="15" fill="rgb(209,103,24)"/><text x="64.8126%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.01%)</title><rect x="64.5626%" y="277" width="0.0133%" height="15" fill="rgb(229,88,8)"/><text x="64.8126%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (18 samples, 0.01%)</title><rect x="64.5639%" y="261" width="0.0120%" height="15" fill="rgb(213,181,19)"/><text x="64.8139%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (18 samples, 0.01%)</title><rect x="64.5639%" y="245" width="0.0120%" height="15" fill="rgb(254,191,54)"/><text x="64.8139%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (68 samples, 0.05%)</title><rect x="64.5899%" y="245" width="0.0453%" height="15" fill="rgb(241,83,37)"/><text x="64.8399%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (42 samples, 0.03%)</title><rect x="64.6072%" y="229" width="0.0280%" height="15" fill="rgb(233,36,39)"/><text x="64.8572%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (39 samples, 0.03%)</title><rect x="64.6092%" y="213" width="0.0260%" height="15" fill="rgb(226,3,54)"/><text x="64.8592%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (35 samples, 0.02%)</title><rect x="64.6119%" y="197" width="0.0233%" height="15" fill="rgb(245,192,40)"/><text x="64.8619%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (23 samples, 0.02%)</title><rect x="64.6199%" y="181" width="0.0153%" height="15" fill="rgb(238,167,29)"/><text x="64.8699%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (17 samples, 0.01%)</title><rect x="64.6239%" y="165" width="0.0113%" height="15" fill="rgb(232,182,51)"/><text x="64.8739%" y="175.50"></text></g><g><title>nvkm_disp_intr (16 samples, 0.01%)</title><rect x="64.6366%" y="181" width="0.0107%" height="15" fill="rgb(231,60,39)"/><text x="64.8866%" y="191.50"></text></g><g><title>nv50_disp_intr_ (16 samples, 0.01%)</title><rect x="64.6366%" y="165" width="0.0107%" height="15" fill="rgb(208,69,12)"/><text x="64.8866%" y="175.50"></text></g><g><title>nvkm_engine_intr (17 samples, 0.01%)</title><rect x="64.6366%" y="197" width="0.0113%" height="15" fill="rgb(235,93,37)"/><text x="64.8866%" y="207.50"></text></g><g><title>nvkm_mc_intr (23 samples, 0.02%)</title><rect x="64.6352%" y="229" width="0.0153%" height="15" fill="rgb(213,116,39)"/><text x="64.8852%" y="239.50"></text></g><g><title>nvkm_subdev_intr (21 samples, 0.01%)</title><rect x="64.6366%" y="213" width="0.0140%" height="15" fill="rgb(222,207,29)"/><text x="64.8866%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (114 samples, 0.08%)</title><rect x="64.5759%" y="341" width="0.0760%" height="15" fill="rgb(206,96,30)"/><text x="64.8259%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (112 samples, 0.07%)</title><rect x="64.5772%" y="325" width="0.0747%" height="15" fill="rgb(218,138,4)"/><text x="64.8272%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (111 samples, 0.07%)</title><rect x="64.5779%" y="309" width="0.0740%" height="15" fill="rgb(250,191,14)"/><text x="64.8279%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (109 samples, 0.07%)</title><rect x="64.5792%" y="293" width="0.0727%" height="15" fill="rgb(239,60,40)"/><text x="64.8292%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (101 samples, 0.07%)</title><rect x="64.5846%" y="277" width="0.0673%" height="15" fill="rgb(206,27,48)"/><text x="64.8346%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (100 samples, 0.07%)</title><rect x="64.5852%" y="261" width="0.0667%" height="15" fill="rgb(225,35,8)"/><text x="64.8352%" y="271.50"></text></g><g><title>nvkm_pci_intr (25 samples, 0.02%)</title><rect x="64.6352%" y="245" width="0.0167%" height="15" fill="rgb(250,213,24)"/><text x="64.8852%" y="255.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (997 samples, 0.66%)</title><rect x="80.8684%" y="293" width="0.6646%" height="15" fill="rgb(247,123,22)"/><text x="81.1184%" y="303.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,063 samples, 2.04%)</title><rect x="79.4951%" y="325" width="2.0419%" height="15" fill="rgb(231,138,38)"/><text x="79.7451%" y="335.50">&lt;..</text></g><g><title>core::str::next_code_point (3,063 samples, 2.04%)</title><rect x="79.4951%" y="309" width="2.0419%" height="15" fill="rgb(231,145,46)"/><text x="79.7451%" y="319.50">c..</text></g><g><title>[[kernel.kallsyms]] (37 samples, 0.02%)</title><rect x="81.5463%" y="229" width="0.0247%" height="15" fill="rgb(251,118,11)"/><text x="81.7963%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.02%)</title><rect x="81.5537%" y="213" width="0.0173%" height="15" fill="rgb(217,147,25)"/><text x="81.8037%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.02%)</title><rect x="81.5543%" y="197" width="0.0167%" height="15" fill="rgb(247,81,37)"/><text x="81.8043%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (20 samples, 0.01%)</title><rect x="81.5577%" y="181" width="0.0133%" height="15" fill="rgb(209,12,38)"/><text x="81.8077%" y="191.50"></text></g><g><title>nvkm_mc_intr (16 samples, 0.01%)</title><rect x="81.5710%" y="213" width="0.0107%" height="15" fill="rgb(227,1,9)"/><text x="81.8210%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (68 samples, 0.05%)</title><rect x="81.5370%" y="325" width="0.0453%" height="15" fill="rgb(248,47,43)"/><text x="81.7870%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (62 samples, 0.04%)</title><rect x="81.5410%" y="309" width="0.0413%" height="15" fill="rgb(221,10,30)"/><text x="81.7910%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (60 samples, 0.04%)</title><rect x="81.5423%" y="293" width="0.0400%" height="15" fill="rgb(210,229,1)"/><text x="81.7923%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (60 samples, 0.04%)</title><rect x="81.5423%" y="277" width="0.0400%" height="15" fill="rgb(222,148,37)"/><text x="81.7923%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (57 samples, 0.04%)</title><rect x="81.5443%" y="261" width="0.0380%" height="15" fill="rgb(234,67,33)"/><text x="81.7943%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (57 samples, 0.04%)</title><rect x="81.5443%" y="245" width="0.0380%" height="15" fill="rgb(247,98,35)"/><text x="81.7943%" y="255.50"></text></g><g><title>nvkm_pci_intr (17 samples, 0.01%)</title><rect x="81.5710%" y="229" width="0.0113%" height="15" fill="rgb(247,138,52)"/><text x="81.8210%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::cap (941 samples, 0.63%)</title><rect x="82.2776%" y="309" width="0.6273%" height="15" fill="rgb(213,79,30)"/><text x="82.5276%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (2,031 samples, 1.35%)</title><rect x="81.5823%" y="325" width="1.3539%" height="15" fill="rgb(246,177,23)"/><text x="81.8323%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::count (47 samples, 0.03%)</title><rect x="82.9049%" y="309" width="0.0313%" height="15" fill="rgb(230,62,27)"/><text x="83.1549%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_back (2,206 samples, 1.47%)</title><rect x="82.9362%" y="325" width="1.4706%" height="15" fill="rgb(216,154,8)"/><text x="83.1862%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (2,132 samples, 1.42%)</title><rect x="82.9856%" y="309" width="1.4213%" height="15" fill="rgb(244,35,45)"/><text x="83.2356%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (1,011 samples, 0.67%)</title><rect x="85.9487%" y="293" width="0.6740%" height="15" fill="rgb(251,115,12)"/><text x="86.1987%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,011 samples, 0.67%)</title><rect x="85.9487%" y="277" width="0.6740%" height="15" fill="rgb(240,54,50)"/><text x="86.1987%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (1,013 samples, 0.68%)</title><rect x="85.9487%" y="309" width="0.6753%" height="15" fill="rgb(233,84,52)"/><text x="86.1987%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (65 samples, 0.04%)</title><rect x="86.6240%" y="309" width="0.0433%" height="15" fill="rgb(207,117,47)"/><text x="86.8740%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,072 samples, 1.38%)</title><rect x="86.6674%" y="293" width="1.3813%" height="15" fill="rgb(249,43,39)"/><text x="86.9174%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (5,493 samples, 3.66%)</title><rect x="84.4068%" y="325" width="3.6618%" height="15" fill="rgb(209,38,44)"/><text x="84.6568%" y="335.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2,102 samples, 1.40%)</title><rect x="86.6674%" y="309" width="1.4013%" height="15" fill="rgb(236,212,23)"/><text x="86.9174%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (30 samples, 0.02%)</title><rect x="88.0486%" y="293" width="0.0200%" height="15" fill="rgb(242,79,21)"/><text x="88.2986%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (43 samples, 0.03%)</title><rect x="90.0219%" y="293" width="0.0287%" height="15" fill="rgb(211,96,35)"/><text x="90.2719%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (43 samples, 0.03%)</title><rect x="90.0219%" y="277" width="0.0287%" height="15" fill="rgb(253,215,40)"/><text x="90.2719%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (3,097 samples, 2.06%)</title><rect x="90.0219%" y="309" width="2.0646%" height="15" fill="rgb(211,81,21)"/><text x="90.2719%" y="319.50">a..</text></g><g><title>core::ptr::write (3,054 samples, 2.04%)</title><rect x="90.0505%" y="293" width="2.0359%" height="15" fill="rgb(208,190,38)"/><text x="90.3005%" y="303.50">c..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (4,272 samples, 2.85%)</title><rect x="92.0871%" y="309" width="2.8478%" height="15" fill="rgb(235,213,38)"/><text x="92.3371%" y="319.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (2,055 samples, 1.37%)</title><rect x="93.5650%" y="293" width="1.3699%" height="15" fill="rgb(237,122,38)"/><text x="93.8150%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::count (2,055 samples, 1.37%)</title><rect x="93.5650%" y="277" width="1.3699%" height="15" fill="rgb(244,218,35)"/><text x="93.8150%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,045 samples, 0.70%)</title><rect x="94.2383%" y="261" width="0.6966%" height="15" fill="rgb(240,68,47)"/><text x="94.4883%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (138 samples, 0.09%)</title><rect x="94.9349%" y="293" width="0.0920%" height="15" fill="rgb(210,16,53)"/><text x="95.1849%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (12,453 samples, 8.30%)</title><rect x="88.0686%" y="325" width="8.3016%" height="15" fill="rgb(235,124,12)"/><text x="88.3186%" y="335.50">alloc::colle..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2,153 samples, 1.44%)</title><rect x="94.9349%" y="309" width="1.4353%" height="15" fill="rgb(224,169,11)"/><text x="95.1849%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2,015 samples, 1.34%)</title><rect x="95.0269%" y="293" width="1.3433%" height="15" fill="rgb(250,166,2)"/><text x="95.2769%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (1,051 samples, 0.70%)</title><rect x="97.1008%" y="309" width="0.7006%" height="15" fill="rgb(242,216,29)"/><text x="97.3508%" y="319.50"></text></g><g><title>core::ptr::write (1,051 samples, 0.70%)</title><rect x="97.1008%" y="293" width="0.7006%" height="15" fill="rgb(230,116,27)"/><text x="97.3508%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (1,017 samples, 0.68%)</title><rect x="97.8015%" y="309" width="0.6780%" height="15" fill="rgb(228,99,48)"/><text x="98.0515%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (4,141 samples, 2.76%)</title><rect x="96.3702%" y="325" width="2.7605%" height="15" fill="rgb(253,11,6)"/><text x="96.6202%" y="335.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (977 samples, 0.65%)</title><rect x="98.4794%" y="309" width="0.6513%" height="15" fill="rgb(247,143,39)"/><text x="98.7294%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (977 samples, 0.65%)</title><rect x="98.4794%" y="293" width="0.6513%" height="15" fill="rgb(236,97,10)"/><text x="98.7294%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.01%)</title><rect x="99.1307%" y="325" width="0.0120%" height="15" fill="rgb(233,208,19)"/><text x="99.3807%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="99.1307%" y="309" width="0.0120%" height="15" fill="rgb(216,164,2)"/><text x="99.3807%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (18 samples, 0.01%)</title><rect x="99.1307%" y="293" width="0.0120%" height="15" fill="rgb(220,129,5)"/><text x="99.3807%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (18 samples, 0.01%)</title><rect x="99.1307%" y="277" width="0.0120%" height="15" fill="rgb(242,17,10)"/><text x="99.3807%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 0.01%)</title><rect x="99.1314%" y="261" width="0.0113%" height="15" fill="rgb(242,107,0)"/><text x="99.3814%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="99.1314%" y="245" width="0.0113%" height="15" fill="rgb(251,28,31)"/><text x="99.3814%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="99.1314%" y="229" width="0.0113%" height="15" fill="rgb(233,223,10)"/><text x="99.3814%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.01%)</title><rect x="99.1314%" y="213" width="0.0113%" height="15" fill="rgb(215,21,27)"/><text x="99.3814%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.01%)</title><rect x="99.1314%" y="197" width="0.0113%" height="15" fill="rgb(232,23,21)"/><text x="99.3814%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (67 samples, 0.04%)</title><rect x="99.1427%" y="325" width="0.0447%" height="15" fill="rgb(244,5,23)"/><text x="99.3927%" y="335.50"></text></g><g><title>&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (95,382 samples, 63.58%)</title><rect x="36.2801%" y="357" width="63.5846%" height="15" fill="rgb(226,81,46)"/><text x="36.5301%" y="367.50">&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>lll::matcher::MatchIterator::advance_char (52,822 samples, 35.21%)</title><rect x="64.6519%" y="341" width="35.2128%" height="15" fill="rgb(247,70,30)"/><text x="64.9019%" y="351.50">lll::matcher::MatchIterator::advance_char</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,016 samples, 0.68%)</title><rect x="99.1874%" y="325" width="0.6773%" height="15" fill="rgb(212,68,19)"/><text x="99.4374%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (18 samples, 0.01%)</title><rect x="99.9460%" y="181" width="0.0120%" height="15" fill="rgb(240,187,13)"/><text x="100.1960%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (16 samples, 0.01%)</title><rect x="99.9473%" y="165" width="0.0107%" height="15" fill="rgb(223,113,26)"/><text x="100.1973%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (99 samples, 0.07%)</title><rect x="99.8927%" y="261" width="0.0660%" height="15" fill="rgb(206,192,2)"/><text x="100.1427%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (63 samples, 0.04%)</title><rect x="99.9167%" y="245" width="0.0420%" height="15" fill="rgb(241,108,4)"/><text x="100.1667%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (59 samples, 0.04%)</title><rect x="99.9193%" y="229" width="0.0393%" height="15" fill="rgb(247,173,49)"/><text x="100.1693%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (51 samples, 0.03%)</title><rect x="99.9247%" y="213" width="0.0340%" height="15" fill="rgb(224,114,35)"/><text x="100.1747%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (22 samples, 0.01%)</title><rect x="99.9440%" y="197" width="0.0147%" height="15" fill="rgb(245,159,27)"/><text x="100.1940%" y="207.50"></text></g><g><title>nvkm_disp_intr (21 samples, 0.01%)</title><rect x="99.9607%" y="197" width="0.0140%" height="15" fill="rgb(245,172,44)"/><text x="100.2107%" y="207.50"></text></g><g><title>nv50_disp_intr_ (21 samples, 0.01%)</title><rect x="99.9607%" y="181" width="0.0140%" height="15" fill="rgb(236,23,11)"/><text x="100.2107%" y="191.50"></text></g><g><title>nvkm_engine_intr (23 samples, 0.02%)</title><rect x="99.9607%" y="213" width="0.0153%" height="15" fill="rgb(205,117,38)"/><text x="100.2107%" y="223.50"></text></g><g><title>nvkm_mc_intr (29 samples, 0.02%)</title><rect x="99.9587%" y="245" width="0.0193%" height="15" fill="rgb(237,72,25)"/><text x="100.2087%" y="255.50"></text></g><g><title>nvkm_subdev_intr (27 samples, 0.02%)</title><rect x="99.9600%" y="229" width="0.0180%" height="15" fill="rgb(244,70,9)"/><text x="100.2100%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (173 samples, 0.12%)</title><rect x="99.8647%" y="357" width="0.1153%" height="15" fill="rgb(217,125,39)"/><text x="100.1147%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (167 samples, 0.11%)</title><rect x="99.8687%" y="341" width="0.1113%" height="15" fill="rgb(235,36,10)"/><text x="100.1187%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (163 samples, 0.11%)</title><rect x="99.8713%" y="325" width="0.1087%" height="15" fill="rgb(251,123,47)"/><text x="100.1213%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (161 samples, 0.11%)</title><rect x="99.8727%" y="309" width="0.1073%" height="15" fill="rgb(221,13,13)"/><text x="100.1227%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (143 samples, 0.10%)</title><rect x="99.8847%" y="293" width="0.0953%" height="15" fill="rgb(238,131,9)"/><text x="100.1347%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (140 samples, 0.09%)</title><rect x="99.8867%" y="277" width="0.0933%" height="15" fill="rgb(211,50,8)"/><text x="100.1367%" y="287.50"></text></g><g><title>nvkm_pci_intr (32 samples, 0.02%)</title><rect x="99.9587%" y="261" width="0.0213%" height="15" fill="rgb(245,182,24)"/><text x="100.2087%" y="271.50"></text></g><g><title>[unknown] (149,987 samples, 99.99%)</title><rect x="0.0027%" y="389" width="99.9860%" height="15" fill="rgb(242,14,37)"/><text x="0.2527%" y="399.50">[unknown]</text></g><g><title>lll::string_stream_editor::process_string_stream_bufread_bufwrite (149,987 samples, 99.99%)</title><rect x="0.0027%" y="373" width="99.9860%" height="15" fill="rgb(246,228,12)"/><text x="0.2527%" y="383.50">lll::string_stream_editor::process_string_stream_bufread_bufwrite</text></g><g><title>lll (149,997 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9927%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="415.50">lll</text></g><g><title>all (150,008 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="431.50"></text></g></svg></svg>