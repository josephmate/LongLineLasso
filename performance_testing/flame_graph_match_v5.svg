<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[kernel.kallsyms]] (114 samples, 0.06%)</title><rect x="48.4027%" y="245" width="0.0605%" height="15" fill="rgb(227,0,7)"/><text x="48.6527%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (77 samples, 0.04%)</title><rect x="48.4223%" y="229" width="0.0409%" height="15" fill="rgb(217,0,24)"/><text x="48.6723%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (73 samples, 0.04%)</title><rect x="48.4244%" y="213" width="0.0388%" height="15" fill="rgb(221,193,54)"/><text x="48.6744%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (65 samples, 0.03%)</title><rect x="48.4287%" y="197" width="0.0345%" height="15" fill="rgb(248,212,6)"/><text x="48.6787%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (34 samples, 0.02%)</title><rect x="48.4451%" y="181" width="0.0180%" height="15" fill="rgb(208,68,35)"/><text x="48.6951%" y="191.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,237 samples, 1.72%)</title><rect x="46.7454%" y="357" width="1.7184%" height="15" fill="rgb(232,128,0)"/><text x="46.9954%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (144 samples, 0.08%)</title><rect x="48.3873%" y="341" width="0.0764%" height="15" fill="rgb(207,160,47)"/><text x="48.6373%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (143 samples, 0.08%)</title><rect x="48.3878%" y="325" width="0.0759%" height="15" fill="rgb(228,23,34)"/><text x="48.6378%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (136 samples, 0.07%)</title><rect x="48.3915%" y="309" width="0.0722%" height="15" fill="rgb(218,30,26)"/><text x="48.6415%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (136 samples, 0.07%)</title><rect x="48.3915%" y="293" width="0.0722%" height="15" fill="rgb(220,122,19)"/><text x="48.6415%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (129 samples, 0.07%)</title><rect x="48.3952%" y="277" width="0.0685%" height="15" fill="rgb(250,228,42)"/><text x="48.6452%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (126 samples, 0.07%)</title><rect x="48.3968%" y="261" width="0.0669%" height="15" fill="rgb(240,193,28)"/><text x="48.6468%" y="271.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2,016 samples, 1.07%)</title><rect x="61.0544%" y="309" width="1.0702%" height="15" fill="rgb(216,20,37)"/><text x="61.3044%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (1,110 samples, 0.59%)</title><rect x="63.2011%" y="293" width="0.5892%" height="15" fill="rgb(206,188,39)"/><text x="63.4511%" y="303.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (1,110 samples, 0.59%)</title><rect x="63.2011%" y="277" width="0.5892%" height="15" fill="rgb(217,207,13)"/><text x="63.4511%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1,110 samples, 0.59%)</title><rect x="63.2011%" y="261" width="0.5892%" height="15" fill="rgb(231,73,38)"/><text x="63.4511%" y="271.50"></text></g><g><title>__GI___libc_read (1,108 samples, 0.59%)</title><rect x="63.2022%" y="245" width="0.5882%" height="15" fill="rgb(225,20,46)"/><text x="63.4522%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (1,077 samples, 0.57%)</title><rect x="63.2186%" y="229" width="0.5717%" height="15" fill="rgb(210,31,41)"/><text x="63.4686%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (1,040 samples, 0.55%)</title><rect x="63.2383%" y="213" width="0.5521%" height="15" fill="rgb(221,200,47)"/><text x="63.4883%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (1,011 samples, 0.54%)</title><rect x="63.2537%" y="197" width="0.5367%" height="15" fill="rgb(226,26,5)"/><text x="63.5037%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (1,010 samples, 0.54%)</title><rect x="63.2542%" y="181" width="0.5362%" height="15" fill="rgb(249,33,26)"/><text x="63.5042%" y="191.50"></text></g><g><title>[[kernel.kallsyms]] (999 samples, 0.53%)</title><rect x="63.2600%" y="165" width="0.5303%" height="15" fill="rgb(235,183,28)"/><text x="63.5100%" y="175.50"></text></g><g><title>[[kernel.kallsyms]] (957 samples, 0.51%)</title><rect x="63.2823%" y="149" width="0.5080%" height="15" fill="rgb(221,5,38)"/><text x="63.5323%" y="159.50"></text></g><g><title>[[kernel.kallsyms]] (933 samples, 0.50%)</title><rect x="63.2951%" y="133" width="0.4953%" height="15" fill="rgb(247,18,42)"/><text x="63.5451%" y="143.50"></text></g><g><title>[[kernel.kallsyms]] (904 samples, 0.48%)</title><rect x="63.3105%" y="117" width="0.4799%" height="15" fill="rgb(241,131,45)"/><text x="63.5605%" y="127.50"></text></g><g><title>[[kernel.kallsyms]] (877 samples, 0.47%)</title><rect x="63.3248%" y="101" width="0.4656%" height="15" fill="rgb(249,31,29)"/><text x="63.5748%" y="111.50"></text></g><g><title>[[kernel.kallsyms]] (850 samples, 0.45%)</title><rect x="63.3391%" y="85" width="0.4512%" height="15" fill="rgb(225,111,53)"/><text x="63.5891%" y="95.50"></text></g><g><title>[[kernel.kallsyms]] (789 samples, 0.42%)</title><rect x="63.3715%" y="69" width="0.4188%" height="15" fill="rgb(238,160,17)"/><text x="63.6215%" y="79.50"></text></g><g><title>[[kernel.kallsyms]] (747 samples, 0.40%)</title><rect x="63.3938%" y="53" width="0.3965%" height="15" fill="rgb(214,148,48)"/><text x="63.6438%" y="63.50"></text></g><g><title>[[kernel.kallsyms]] (70 samples, 0.04%)</title><rect x="63.7532%" y="37" width="0.0372%" height="15" fill="rgb(232,36,49)"/><text x="64.0032%" y="47.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4,195 samples, 2.23%)</title><rect x="62.1246%" y="309" width="2.2269%" height="15" fill="rgb(209,103,24)"/><text x="62.3746%" y="319.50">&lt;..</text></g><g><title>core::slice::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,050 samples, 0.56%)</title><rect x="63.7941%" y="293" width="0.5574%" height="15" fill="rgb(229,88,8)"/><text x="64.0441%" y="303.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index (1,050 samples, 0.56%)</title><rect x="63.7941%" y="277" width="0.5574%" height="15" fill="rgb(213,181,19)"/><text x="64.0441%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1,046 samples, 0.56%)</title><rect x="63.7962%" y="261" width="0.5553%" height="15" fill="rgb(254,191,54)"/><text x="64.0462%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1,046 samples, 0.56%)</title><rect x="63.7962%" y="245" width="0.5553%" height="15" fill="rgb(241,83,37)"/><text x="64.0462%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1,046 samples, 0.56%)</title><rect x="63.7962%" y="229" width="0.5553%" height="15" fill="rgb(233,36,39)"/><text x="64.0462%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (34 samples, 0.02%)</title><rect x="64.3515%" y="309" width="0.0180%" height="15" fill="rgb(226,3,54)"/><text x="64.6015%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (29 samples, 0.02%)</title><rect x="64.3541%" y="293" width="0.0154%" height="15" fill="rgb(245,192,40)"/><text x="64.6041%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (28 samples, 0.01%)</title><rect x="64.3546%" y="277" width="0.0149%" height="15" fill="rgb(238,167,29)"/><text x="64.6046%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (28 samples, 0.01%)</title><rect x="64.3546%" y="261" width="0.0149%" height="15" fill="rgb(232,182,51)"/><text x="64.6046%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.01%)</title><rect x="64.3557%" y="245" width="0.0138%" height="15" fill="rgb(231,60,39)"/><text x="64.6057%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (26 samples, 0.01%)</title><rect x="64.3557%" y="229" width="0.0138%" height="15" fill="rgb(208,69,12)"/><text x="64.6057%" y="239.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (21,651 samples, 11.49%)</title><rect x="54.5111%" y="325" width="11.4934%" height="15" fill="rgb(235,93,37)"/><text x="54.7611%" y="335.50">&lt;std::io::buffere..</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (3,080 samples, 1.64%)</title><rect x="64.3695%" y="309" width="1.6350%" height="15" fill="rgb(213,116,39)"/><text x="64.6195%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read (24,844 samples, 13.19%)</title><rect x="52.8199%" y="341" width="13.1884%" height="15" fill="rgb(222,207,29)"/><text x="53.0699%" y="351.50">&lt;std::io::stdio::Std..</text></g><g><title>&lt;lll::string_stream_editor::CharIterator as core::iter::traits::iterator::Iterator&gt;::next (33,077 samples, 17.56%)</title><rect x="48.4637%" y="357" width="17.5588%" height="15" fill="rgb(206,96,30)"/><text x="48.7137%" y="367.50">&lt;lll::string_stream_editor:..</text></g><g><title>[[kernel.kallsyms]] (27 samples, 0.01%)</title><rect x="66.0082%" y="341" width="0.0143%" height="15" fill="rgb(218,138,4)"/><text x="66.2582%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.01%)</title><rect x="66.0093%" y="325" width="0.0133%" height="15" fill="rgb(250,191,14)"/><text x="66.2593%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (24 samples, 0.01%)</title><rect x="66.0098%" y="309" width="0.0127%" height="15" fill="rgb(239,60,40)"/><text x="66.2598%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (24 samples, 0.01%)</title><rect x="66.0098%" y="293" width="0.0127%" height="15" fill="rgb(206,27,48)"/><text x="66.2598%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (23 samples, 0.01%)</title><rect x="66.0104%" y="277" width="0.0122%" height="15" fill="rgb(225,35,8)"/><text x="66.2604%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.01%)</title><rect x="66.0114%" y="261" width="0.0111%" height="15" fill="rgb(250,213,24)"/><text x="66.2614%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (59 samples, 0.03%)</title><rect x="66.0396%" y="261" width="0.0313%" height="15" fill="rgb(247,123,22)"/><text x="66.2896%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (27 samples, 0.01%)</title><rect x="66.0565%" y="245" width="0.0143%" height="15" fill="rgb(231,138,38)"/><text x="66.3065%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.01%)</title><rect x="66.0576%" y="229" width="0.0133%" height="15" fill="rgb(231,145,46)"/><text x="66.3076%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (21 samples, 0.01%)</title><rect x="66.0597%" y="213" width="0.0111%" height="15" fill="rgb(251,118,11)"/><text x="66.3097%" y="223.50"></text></g><g><title>nvkm_engine_intr (19 samples, 0.01%)</title><rect x="66.0714%" y="213" width="0.0101%" height="15" fill="rgb(217,147,25)"/><text x="66.3214%" y="223.50"></text></g><g><title>nvkm_disp_intr (19 samples, 0.01%)</title><rect x="66.0714%" y="197" width="0.0101%" height="15" fill="rgb(247,81,37)"/><text x="66.3214%" y="207.50"></text></g><g><title>nv50_disp_intr_ (19 samples, 0.01%)</title><rect x="66.0714%" y="181" width="0.0101%" height="15" fill="rgb(209,12,38)"/><text x="66.3214%" y="191.50"></text></g><g><title>nvkm_mc_intr (22 samples, 0.01%)</title><rect x="66.0709%" y="245" width="0.0117%" height="15" fill="rgb(227,1,9)"/><text x="66.3209%" y="255.50"></text></g><g><title>nvkm_subdev_intr (21 samples, 0.01%)</title><rect x="66.0714%" y="229" width="0.0111%" height="15" fill="rgb(248,47,43)"/><text x="66.3214%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (115 samples, 0.06%)</title><rect x="66.0226%" y="357" width="0.0610%" height="15" fill="rgb(221,10,30)"/><text x="66.2726%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (105 samples, 0.06%)</title><rect x="66.0279%" y="341" width="0.0557%" height="15" fill="rgb(210,229,1)"/><text x="66.2779%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (102 samples, 0.05%)</title><rect x="66.0295%" y="325" width="0.0541%" height="15" fill="rgb(222,148,37)"/><text x="66.2795%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (97 samples, 0.05%)</title><rect x="66.0321%" y="309" width="0.0515%" height="15" fill="rgb(234,67,33)"/><text x="66.2821%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (91 samples, 0.05%)</title><rect x="66.0353%" y="293" width="0.0483%" height="15" fill="rgb(247,98,35)"/><text x="66.2853%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (89 samples, 0.05%)</title><rect x="66.0364%" y="277" width="0.0472%" height="15" fill="rgb(247,138,52)"/><text x="66.2864%" y="287.50"></text></g><g><title>nvkm_pci_intr (24 samples, 0.01%)</title><rect x="66.0709%" y="261" width="0.0127%" height="15" fill="rgb(213,79,30)"/><text x="66.3209%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (44 samples, 0.02%)</title><rect x="80.0438%" y="341" width="0.0234%" height="15" fill="rgb(246,177,23)"/><text x="80.2938%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (44 samples, 0.02%)</title><rect x="80.0438%" y="325" width="0.0234%" height="15" fill="rgb(230,62,27)"/><text x="80.2938%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (44 samples, 0.02%)</title><rect x="80.0438%" y="309" width="0.0234%" height="15" fill="rgb(216,154,8)"/><text x="80.2938%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (44 samples, 0.02%)</title><rect x="80.0438%" y="293" width="0.0234%" height="15" fill="rgb(244,35,45)"/><text x="80.2938%" y="303.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,171 samples, 0.62%)</title><rect x="81.1724%" y="309" width="0.6216%" height="15" fill="rgb(251,115,12)"/><text x="81.4224%" y="319.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,256 samples, 1.73%)</title><rect x="80.0672%" y="341" width="1.7284%" height="15" fill="rgb(240,54,50)"/><text x="80.3172%" y="351.50"></text></g><g><title>core::str::next_code_point (3,256 samples, 1.73%)</title><rect x="80.0672%" y="325" width="1.7284%" height="15" fill="rgb(233,84,52)"/><text x="80.3172%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (62 samples, 0.03%)</title><rect x="81.8089%" y="245" width="0.0329%" height="15" fill="rgb(207,117,47)"/><text x="82.0589%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (29 samples, 0.02%)</title><rect x="81.8264%" y="229" width="0.0154%" height="15" fill="rgb(249,43,39)"/><text x="82.0764%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (28 samples, 0.01%)</title><rect x="81.8270%" y="213" width="0.0149%" height="15" fill="rgb(209,38,44)"/><text x="82.0770%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (24 samples, 0.01%)</title><rect x="81.8291%" y="197" width="0.0127%" height="15" fill="rgb(236,212,23)"/><text x="82.0791%" y="207.50"></text></g><g><title>[[kernel.kallsyms]] (99 samples, 0.05%)</title><rect x="81.7988%" y="341" width="0.0526%" height="15" fill="rgb(242,79,21)"/><text x="82.0488%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (96 samples, 0.05%)</title><rect x="81.8004%" y="325" width="0.0510%" height="15" fill="rgb(211,96,35)"/><text x="82.0504%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (92 samples, 0.05%)</title><rect x="81.8025%" y="309" width="0.0488%" height="15" fill="rgb(253,215,40)"/><text x="82.0525%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (92 samples, 0.05%)</title><rect x="81.8025%" y="293" width="0.0488%" height="15" fill="rgb(211,81,21)"/><text x="82.0525%" y="303.50"></text></g><g><title>[[kernel.kallsyms]] (86 samples, 0.05%)</title><rect x="81.8057%" y="277" width="0.0457%" height="15" fill="rgb(208,190,38)"/><text x="82.0557%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (85 samples, 0.05%)</title><rect x="81.8063%" y="261" width="0.0451%" height="15" fill="rgb(235,213,38)"/><text x="82.0563%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (2,020 samples, 1.07%)</title><rect x="81.8519%" y="341" width="1.0723%" height="15" fill="rgb(237,122,38)"/><text x="82.1019%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::count (1,010 samples, 0.54%)</title><rect x="82.3881%" y="325" width="0.5362%" height="15" fill="rgb(244,218,35)"/><text x="82.6381%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_back (2,074 samples, 1.10%)</title><rect x="82.9242%" y="341" width="1.1010%" height="15" fill="rgb(240,68,47)"/><text x="83.1742%" y="351.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (1,194 samples, 0.63%)</title><rect x="83.3914%" y="325" width="0.6338%" height="15" fill="rgb(210,16,53)"/><text x="83.6414%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (1,073 samples, 0.57%)</title><rect x="86.3232%" y="309" width="0.5696%" height="15" fill="rgb(235,124,12)"/><text x="86.5732%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,073 samples, 0.57%)</title><rect x="86.3232%" y="293" width="0.5696%" height="15" fill="rgb(224,169,11)"/><text x="86.5732%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (1,076 samples, 0.57%)</title><rect x="86.3232%" y="325" width="0.5712%" height="15" fill="rgb(250,166,2)"/><text x="86.5732%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (119 samples, 0.06%)</title><rect x="86.8944%" y="325" width="0.0632%" height="15" fill="rgb(242,216,29)"/><text x="87.1444%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,141 samples, 1.14%)</title><rect x="86.9576%" y="309" width="1.1365%" height="15" fill="rgb(230,116,27)"/><text x="87.2076%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (7,693 samples, 4.08%)</title><rect x="84.0252%" y="341" width="4.0838%" height="15" fill="rgb(228,99,48)"/><text x="84.2752%" y="351.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2,169 samples, 1.15%)</title><rect x="86.9576%" y="325" width="1.1514%" height="15" fill="rgb(253,11,6)"/><text x="87.2076%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (28 samples, 0.01%)</title><rect x="88.0942%" y="309" width="0.0149%" height="15" fill="rgb(247,143,39)"/><text x="88.3442%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (278 samples, 0.15%)</title><rect x="89.1670%" y="309" width="0.1476%" height="15" fill="rgb(236,97,10)"/><text x="89.4170%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (278 samples, 0.15%)</title><rect x="89.1670%" y="293" width="0.1476%" height="15" fill="rgb(233,208,19)"/><text x="89.4170%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (3,335 samples, 1.77%)</title><rect x="89.1670%" y="325" width="1.7704%" height="15" fill="rgb(216,164,2)"/><text x="89.4170%" y="335.50">a..</text></g><g><title>core::ptr::write (3,057 samples, 1.62%)</title><rect x="89.3146%" y="309" width="1.6228%" height="15" fill="rgb(220,129,5)"/><text x="89.5646%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (5,746 samples, 3.05%)</title><rect x="90.9374%" y="325" width="3.0503%" height="15" fill="rgb(242,17,10)"/><text x="91.1874%" y="335.50">all..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (2,294 samples, 1.22%)</title><rect x="92.7699%" y="309" width="1.2178%" height="15" fill="rgb(242,107,0)"/><text x="93.0199%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::count (2,294 samples, 1.22%)</title><rect x="92.7699%" y="293" width="1.2178%" height="15" fill="rgb(251,28,31)"/><text x="93.0199%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,257 samples, 0.67%)</title><rect x="93.3203%" y="277" width="0.6673%" height="15" fill="rgb(233,223,10)"/><text x="93.5703%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1,275 samples, 0.68%)</title><rect x="93.9876%" y="309" width="0.6768%" height="15" fill="rgb(215,21,27)"/><text x="94.2376%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (14,353 samples, 7.62%)</title><rect x="88.1090%" y="341" width="7.6193%" height="15" fill="rgb(232,23,21)"/><text x="88.3590%" y="351.50">alloc::col..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (3,279 samples, 1.74%)</title><rect x="93.9876%" y="325" width="1.7406%" height="15" fill="rgb(244,5,23)"/><text x="94.2376%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2,004 samples, 1.06%)</title><rect x="94.6645%" y="309" width="1.0638%" height="15" fill="rgb(226,81,46)"/><text x="94.9145%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (1,027 samples, 0.55%)</title><rect x="96.5909%" y="325" width="0.5452%" height="15" fill="rgb(247,70,30)"/><text x="96.8409%" y="335.50"></text></g><g><title>core::ptr::write (1,026 samples, 0.54%)</title><rect x="96.5914%" y="309" width="0.5446%" height="15" fill="rgb(212,68,19)"/><text x="96.8414%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (1,122 samples, 0.60%)</title><rect x="97.1361%" y="325" width="0.5956%" height="15" fill="rgb(240,187,13)"/><text x="97.3861%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (4,727 samples, 2.51%)</title><rect x="95.7283%" y="341" width="2.5093%" height="15" fill="rgb(223,113,26)"/><text x="95.9783%" y="351.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (953 samples, 0.51%)</title><rect x="97.7317%" y="325" width="0.5059%" height="15" fill="rgb(206,192,2)"/><text x="97.9817%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (953 samples, 0.51%)</title><rect x="97.7317%" y="309" width="0.5059%" height="15" fill="rgb(241,108,4)"/><text x="97.9817%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2,105 samples, 1.12%)</title><rect x="98.2445%" y="341" width="1.1174%" height="15" fill="rgb(247,173,49)"/><text x="98.4945%" y="351.50"></text></g><g><title>&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (133,172 samples, 70.69%)</title><rect x="29.1918%" y="373" width="70.6940%" height="15" fill="rgb(224,114,35)"/><text x="29.4418%" y="383.50">&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>lll::matcher::MatchIterator::advance_char (63,676 samples, 33.80%)</title><rect x="66.0836%" y="357" width="33.8022%" height="15" fill="rgb(245,159,27)"/><text x="66.3336%" y="367.50">lll::matcher::MatchIterator::advance_char</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (987 samples, 0.52%)</title><rect x="99.3619%" y="341" width="0.5239%" height="15" fill="rgb(245,172,44)"/><text x="99.6119%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (111 samples, 0.06%)</title><rect x="99.9135%" y="277" width="0.0589%" height="15" fill="rgb(236,23,11)"/><text x="100.1635%" y="287.50"></text></g><g><title>[[kernel.kallsyms]] (63 samples, 0.03%)</title><rect x="99.9390%" y="261" width="0.0334%" height="15" fill="rgb(205,117,38)"/><text x="100.1890%" y="271.50"></text></g><g><title>[[kernel.kallsyms]] (61 samples, 0.03%)</title><rect x="99.9400%" y="245" width="0.0324%" height="15" fill="rgb(237,72,25)"/><text x="100.1900%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (55 samples, 0.03%)</title><rect x="99.9432%" y="229" width="0.0292%" height="15" fill="rgb(244,70,9)"/><text x="100.1932%" y="239.50"></text></g><g><title>[[kernel.kallsyms]] (25 samples, 0.01%)</title><rect x="99.9591%" y="213" width="0.0133%" height="15" fill="rgb(217,125,39)"/><text x="100.2091%" y="223.50"></text></g><g><title>[[kernel.kallsyms]] (19 samples, 0.01%)</title><rect x="99.9623%" y="197" width="0.0101%" height="15" fill="rgb(235,36,10)"/><text x="100.2123%" y="207.50"></text></g><g><title>nvkm_mc_intr (27 samples, 0.01%)</title><rect x="99.9724%" y="261" width="0.0143%" height="15" fill="rgb(251,123,47)"/><text x="100.2224%" y="271.50"></text></g><g><title>nvkm_subdev_intr (22 samples, 0.01%)</title><rect x="99.9751%" y="245" width="0.0117%" height="15" fill="rgb(221,13,13)"/><text x="100.2251%" y="255.50"></text></g><g><title>[[kernel.kallsyms]] (191 samples, 0.10%)</title><rect x="99.8859%" y="373" width="0.1014%" height="15" fill="rgb(238,131,9)"/><text x="100.1359%" y="383.50"></text></g><g><title>[[kernel.kallsyms]] (174 samples, 0.09%)</title><rect x="99.8949%" y="357" width="0.0924%" height="15" fill="rgb(211,50,8)"/><text x="100.1449%" y="367.50"></text></g><g><title>[[kernel.kallsyms]] (167 samples, 0.09%)</title><rect x="99.8986%" y="341" width="0.0887%" height="15" fill="rgb(245,182,24)"/><text x="100.1486%" y="351.50"></text></g><g><title>[[kernel.kallsyms]] (167 samples, 0.09%)</title><rect x="99.8986%" y="325" width="0.0887%" height="15" fill="rgb(242,14,37)"/><text x="100.1486%" y="335.50"></text></g><g><title>[[kernel.kallsyms]] (153 samples, 0.08%)</title><rect x="99.9060%" y="309" width="0.0812%" height="15" fill="rgb(246,228,12)"/><text x="100.1560%" y="319.50"></text></g><g><title>[[kernel.kallsyms]] (147 samples, 0.08%)</title><rect x="99.9092%" y="293" width="0.0780%" height="15" fill="rgb(213,55,15)"/><text x="100.1592%" y="303.50"></text></g><g><title>nvkm_pci_intr (28 samples, 0.01%)</title><rect x="99.9724%" y="277" width="0.0149%" height="15" fill="rgb(209,9,3)"/><text x="100.2224%" y="287.50"></text></g><g><title>[unknown] (188,354 samples, 99.99%)</title><rect x="0.0032%" y="405" width="99.9873%" height="15" fill="rgb(230,59,30)"/><text x="0.2532%" y="415.50">[unknown]</text></g><g><title>lll::string_stream_editor::process_string_stream_bufread_bufwrite (188,353 samples, 99.99%)</title><rect x="0.0037%" y="389" width="99.9867%" height="15" fill="rgb(209,121,21)"/><text x="0.2537%" y="399.50">lll::string_stream_editor::process_string_stream_bufread_bufwrite</text></g><g><title>lll (188,367 samples, 99.99%)</title><rect x="0.0000%" y="421" width="99.9942%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="431.50">lll</text></g><g><title>all (188,378 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="447.50"></text></g></svg></svg>