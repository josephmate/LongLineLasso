<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;alloc::boxed::Box&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,368 samples, 1.59%)</title><rect x="58.3704%" y="341" width="1.5923%" height="15" fill="rgb(227,0,7)"/><text x="58.6204%" y="351.50"></text></g><g><title>copy_user_generic_string (643 samples, 0.43%)</title><rect x="64.0464%" y="53" width="0.4324%" height="15" fill="rgb(217,0,24)"/><text x="64.2964%" y="63.50"></text></g><g><title>copy_page_to_iter (652 samples, 0.44%)</title><rect x="64.0410%" y="69" width="0.4384%" height="15" fill="rgb(221,193,54)"/><text x="64.2910%" y="79.50"></text></g><g><title>xas_load (24 samples, 0.02%)</title><rect x="64.5064%" y="37" width="0.0161%" height="15" fill="rgb(248,212,6)"/><text x="64.7564%" y="47.50"></text></g><g><title>pagecache_get_page (54 samples, 0.04%)</title><rect x="64.4869%" y="69" width="0.0363%" height="15" fill="rgb(208,68,35)"/><text x="64.7369%" y="79.50"></text></g><g><title>find_get_entry (52 samples, 0.03%)</title><rect x="64.4882%" y="53" width="0.0350%" height="15" fill="rgb(232,128,0)"/><text x="64.7382%" y="63.50"></text></g><g><title>__vfs_read (764 samples, 0.51%)</title><rect x="64.0115%" y="149" width="0.5137%" height="15" fill="rgb(207,160,47)"/><text x="64.2615%" y="159.50"></text></g><g><title>new_sync_read (763 samples, 0.51%)</title><rect x="64.0121%" y="133" width="0.5131%" height="15" fill="rgb(228,23,34)"/><text x="64.2621%" y="143.50"></text></g><g><title>ext4_file_read_iter (763 samples, 0.51%)</title><rect x="64.0121%" y="117" width="0.5131%" height="15" fill="rgb(218,30,26)"/><text x="64.2621%" y="127.50"></text></g><g><title>generic_file_read_iter (763 samples, 0.51%)</title><rect x="64.0121%" y="101" width="0.5131%" height="15" fill="rgb(220,122,19)"/><text x="64.2621%" y="111.50"></text></g><g><title>generic_file_buffered_read (762 samples, 0.51%)</title><rect x="64.0128%" y="85" width="0.5124%" height="15" fill="rgb(250,228,42)"/><text x="64.2628%" y="95.50"></text></g><g><title>entry_SYSCALL_64 (772 samples, 0.52%)</title><rect x="64.0074%" y="229" width="0.5191%" height="15" fill="rgb(240,193,28)"/><text x="64.2574%" y="239.50"></text></g><g><title>do_syscall_64 (772 samples, 0.52%)</title><rect x="64.0074%" y="213" width="0.5191%" height="15" fill="rgb(216,20,37)"/><text x="64.2574%" y="223.50"></text></g><g><title>__x64_sys_read (770 samples, 0.52%)</title><rect x="64.0088%" y="197" width="0.5178%" height="15" fill="rgb(206,188,39)"/><text x="64.2588%" y="207.50"></text></g><g><title>ksys_read (770 samples, 0.52%)</title><rect x="64.0088%" y="181" width="0.5178%" height="15" fill="rgb(217,207,13)"/><text x="64.2588%" y="191.50"></text></g><g><title>vfs_read (767 samples, 0.52%)</title><rect x="64.0108%" y="165" width="0.5158%" height="15" fill="rgb(231,73,38)"/><text x="64.2608%" y="175.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read (776 samples, 0.52%)</title><rect x="64.0068%" y="325" width="0.5218%" height="15" fill="rgb(225,20,46)"/><text x="64.2568%" y="335.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (776 samples, 0.52%)</title><rect x="64.0068%" y="309" width="0.5218%" height="15" fill="rgb(210,31,41)"/><text x="64.2568%" y="319.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (776 samples, 0.52%)</title><rect x="64.0068%" y="293" width="0.5218%" height="15" fill="rgb(221,200,47)"/><text x="64.2568%" y="303.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (776 samples, 0.52%)</title><rect x="64.0068%" y="277" width="0.5218%" height="15" fill="rgb(226,26,5)"/><text x="64.2568%" y="287.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (776 samples, 0.52%)</title><rect x="64.0068%" y="261" width="0.5218%" height="15" fill="rgb(249,33,26)"/><text x="64.2568%" y="271.50"></text></g><g><title>__GI___libc_read (776 samples, 0.52%)</title><rect x="64.0068%" y="245" width="0.5218%" height="15" fill="rgb(235,183,28)"/><text x="64.2568%" y="255.50"></text></g><g><title>&lt;lll::string_stream_editor::CharIterator as core::iter::traits::iterator::Iterator&gt;::next (6,797 samples, 4.57%)</title><rect x="59.9627%" y="341" width="4.5705%" height="15" fill="rgb(221,5,38)"/><text x="60.2127%" y="351.50">&lt;lll:..</text></g><g><title>tick_sched_do_timer (19 samples, 0.01%)</title><rect x="64.5373%" y="261" width="0.0128%" height="15" fill="rgb(247,18,42)"/><text x="64.7873%" y="271.50"></text></g><g><title>__hrtimer_run_queues (32 samples, 0.02%)</title><rect x="64.5373%" y="293" width="0.0215%" height="15" fill="rgb(241,131,45)"/><text x="64.7873%" y="303.50"></text></g><g><title>tick_sched_timer (32 samples, 0.02%)</title><rect x="64.5373%" y="277" width="0.0215%" height="15" fill="rgb(249,31,29)"/><text x="64.7873%" y="287.50"></text></g><g><title>hrtimer_interrupt (37 samples, 0.02%)</title><rect x="64.5353%" y="309" width="0.0249%" height="15" fill="rgb(225,111,53)"/><text x="64.7853%" y="319.50"></text></g><g><title>apic_timer_interrupt (48 samples, 0.03%)</title><rect x="64.5333%" y="341" width="0.0323%" height="15" fill="rgb(238,160,17)"/><text x="64.7833%" y="351.50"></text></g><g><title>smp_apic_timer_interrupt (47 samples, 0.03%)</title><rect x="64.5339%" y="325" width="0.0316%" height="15" fill="rgb(214,148,48)"/><text x="64.7839%" y="335.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,054 samples, 0.71%)</title><rect x="80.8323%" y="293" width="0.7087%" height="15" fill="rgb(232,36,49)"/><text x="81.0823%" y="303.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,076 samples, 2.07%)</title><rect x="79.4747%" y="325" width="2.0684%" height="15" fill="rgb(209,103,24)"/><text x="79.7247%" y="335.50">&lt;..</text></g><g><title>core::str::next_code_point (3,076 samples, 2.07%)</title><rect x="79.4747%" y="309" width="2.0684%" height="15" fill="rgb(229,88,8)"/><text x="79.7247%" y="319.50">c..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::cap (955 samples, 0.64%)</title><rect x="82.1826%" y="309" width="0.6422%" height="15" fill="rgb(213,181,19)"/><text x="82.4326%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::count (47 samples, 0.03%)</title><rect x="82.8248%" y="309" width="0.0316%" height="15" fill="rgb(254,191,54)"/><text x="83.0748%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (1,957 samples, 1.32%)</title><rect x="81.5431%" y="325" width="1.3159%" height="15" fill="rgb(241,83,37)"/><text x="81.7931%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_back (2,165 samples, 1.46%)</title><rect x="82.8590%" y="325" width="1.4558%" height="15" fill="rgb(233,36,39)"/><text x="83.1090%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (2,073 samples, 1.39%)</title><rect x="82.9209%" y="309" width="1.3940%" height="15" fill="rgb(226,3,54)"/><text x="83.1709%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (984 samples, 0.66%)</title><rect x="85.9193%" y="293" width="0.6617%" height="15" fill="rgb(245,192,40)"/><text x="86.1693%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (984 samples, 0.66%)</title><rect x="85.9193%" y="277" width="0.6617%" height="15" fill="rgb(238,167,29)"/><text x="86.1693%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (985 samples, 0.66%)</title><rect x="85.9193%" y="309" width="0.6623%" height="15" fill="rgb(232,182,51)"/><text x="86.1693%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (73 samples, 0.05%)</title><rect x="86.5816%" y="309" width="0.0491%" height="15" fill="rgb(231,60,39)"/><text x="86.8316%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (2,006 samples, 1.35%)</title><rect x="86.6307%" y="293" width="1.3489%" height="15" fill="rgb(208,69,12)"/><text x="86.8807%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2,022 samples, 1.36%)</title><rect x="86.6307%" y="309" width="1.3597%" height="15" fill="rgb(235,93,37)"/><text x="86.8807%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (16 samples, 0.01%)</title><rect x="87.9796%" y="293" width="0.0108%" height="15" fill="rgb(213,116,39)"/><text x="88.2296%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (5,473 samples, 3.68%)</title><rect x="84.3149%" y="325" width="3.6802%" height="15" fill="rgb(222,207,29)"/><text x="84.5649%" y="335.50">allo..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (28 samples, 0.02%)</title><rect x="90.0003%" y="293" width="0.0188%" height="15" fill="rgb(206,96,30)"/><text x="90.2503%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (28 samples, 0.02%)</title><rect x="90.0003%" y="277" width="0.0188%" height="15" fill="rgb(218,138,4)"/><text x="90.2503%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (3,034 samples, 2.04%)</title><rect x="90.0003%" y="309" width="2.0402%" height="15" fill="rgb(250,191,14)"/><text x="90.2503%" y="319.50">a..</text></g><g><title>core::ptr::write (3,006 samples, 2.02%)</title><rect x="90.0191%" y="293" width="2.0213%" height="15" fill="rgb(239,60,40)"/><text x="90.2691%" y="303.50">c..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (2,091 samples, 1.41%)</title><rect x="93.5406%" y="293" width="1.4061%" height="15" fill="rgb(206,27,48)"/><text x="93.7906%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::count (2,091 samples, 1.41%)</title><rect x="93.5406%" y="277" width="1.4061%" height="15" fill="rgb(225,35,8)"/><text x="93.7906%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,052 samples, 0.71%)</title><rect x="94.2393%" y="261" width="0.7074%" height="15" fill="rgb(250,213,24)"/><text x="94.4893%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (4,323 samples, 2.91%)</title><rect x="92.0404%" y="309" width="2.9069%" height="15" fill="rgb(247,123,22)"/><text x="92.2904%" y="319.50">al..</text></g><g><title>alloc::collections::vec_deque::wrap_index (137 samples, 0.09%)</title><rect x="94.9473%" y="293" width="0.0921%" height="15" fill="rgb(231,138,38)"/><text x="95.1973%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2,172 samples, 1.46%)</title><rect x="94.9473%" y="309" width="1.4605%" height="15" fill="rgb(231,145,46)"/><text x="95.1973%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2,035 samples, 1.37%)</title><rect x="95.0395%" y="293" width="1.3684%" height="15" fill="rgb(251,118,11)"/><text x="95.2895%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (12,515 samples, 8.42%)</title><rect x="87.9951%" y="325" width="8.4155%" height="15" fill="rgb(217,147,25)"/><text x="88.2451%" y="335.50">alloc::colle..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (1,031 samples, 0.69%)</title><rect x="97.1072%" y="309" width="0.6933%" height="15" fill="rgb(247,81,37)"/><text x="97.3572%" y="319.50"></text></g><g><title>core::ptr::write (1,031 samples, 0.69%)</title><rect x="97.1072%" y="293" width="0.6933%" height="15" fill="rgb(209,12,38)"/><text x="97.3572%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (1,006 samples, 0.68%)</title><rect x="97.8005%" y="309" width="0.6765%" height="15" fill="rgb(227,1,9)"/><text x="98.0505%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (4,075 samples, 2.74%)</title><rect x="96.4106%" y="325" width="2.7402%" height="15" fill="rgb(248,47,43)"/><text x="96.6606%" y="335.50">al..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (1,002 samples, 0.67%)</title><rect x="98.4769%" y="309" width="0.6738%" height="15" fill="rgb(221,10,30)"/><text x="98.7269%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1,002 samples, 0.67%)</title><rect x="98.4769%" y="293" width="0.6738%" height="15" fill="rgb(210,229,1)"/><text x="98.7269%" y="303.50"></text></g><g><title>__hrtimer_run_queues (26 samples, 0.02%)</title><rect x="99.1521%" y="277" width="0.0175%" height="15" fill="rgb(222,148,37)"/><text x="99.4021%" y="287.50"></text></g><g><title>tick_sched_timer (26 samples, 0.02%)</title><rect x="99.1521%" y="261" width="0.0175%" height="15" fill="rgb(234,67,33)"/><text x="99.4021%" y="271.50"></text></g><g><title>hrtimer_interrupt (29 samples, 0.02%)</title><rect x="99.1521%" y="293" width="0.0195%" height="15" fill="rgb(247,98,35)"/><text x="99.4021%" y="303.50"></text></g><g><title>apic_timer_interrupt (35 samples, 0.02%)</title><rect x="99.1507%" y="325" width="0.0235%" height="15" fill="rgb(247,138,52)"/><text x="99.4007%" y="335.50"></text></g><g><title>smp_apic_timer_interrupt (33 samples, 0.02%)</title><rect x="99.1521%" y="309" width="0.0222%" height="15" fill="rgb(213,79,30)"/><text x="99.4021%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.01%)</title><rect x="99.1756%" y="325" width="0.0101%" height="15" fill="rgb(246,177,23)"/><text x="99.4256%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;char&gt;&gt;::from_iter (15 samples, 0.01%)</title><rect x="99.1756%" y="309" width="0.0101%" height="15" fill="rgb(230,62,27)"/><text x="99.4256%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;char&gt;&gt;::extend (15 samples, 0.01%)</title><rect x="99.1756%" y="293" width="0.0101%" height="15" fill="rgb(216,154,8)"/><text x="99.4256%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (15 samples, 0.01%)</title><rect x="99.1756%" y="277" width="0.0101%" height="15" fill="rgb(244,35,45)"/><text x="99.4256%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.01%)</title><rect x="99.1756%" y="261" width="0.0101%" height="15" fill="rgb(251,115,12)"/><text x="99.4256%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.01%)</title><rect x="99.1756%" y="245" width="0.0101%" height="15" fill="rgb(240,54,50)"/><text x="99.4256%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.01%)</title><rect x="99.1756%" y="229" width="0.0101%" height="15" fill="rgb(233,84,52)"/><text x="99.4256%" y="239.50"></text></g><g><title>&lt;alloc::collections::vec_deque::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.01%)</title><rect x="99.1756%" y="213" width="0.0101%" height="15" fill="rgb(207,117,47)"/><text x="99.4256%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.01%)</title><rect x="99.1756%" y="197" width="0.0101%" height="15" fill="rgb(249,43,39)"/><text x="99.4256%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (43 samples, 0.03%)</title><rect x="99.1857%" y="325" width="0.0289%" height="15" fill="rgb(209,38,44)"/><text x="99.4357%" y="335.50"></text></g><g><title>&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (94,838 samples, 63.77%)</title><rect x="36.1412%" y="357" width="63.7721%" height="15" fill="rgb(236,212,23)"/><text x="36.3912%" y="367.50">&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>lll::matcher::MatchIterator::advance_char (52,557 samples, 35.34%)</title><rect x="64.5723%" y="341" width="35.3410%" height="15" fill="rgb(242,79,21)"/><text x="64.8223%" y="351.50">lll::matcher::MatchIterator::advance_char</text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1,039 samples, 0.70%)</title><rect x="99.2146%" y="325" width="0.6987%" height="15" fill="rgb(211,96,35)"/><text x="99.4646%" y="335.50"></text></g><g><title>_raw_spin_lock (16 samples, 0.01%)</title><rect x="99.9213%" y="261" width="0.0108%" height="15" fill="rgb(253,215,40)"/><text x="100.1713%" y="271.50"></text></g><g><title>tick_sched_do_timer (40 samples, 0.03%)</title><rect x="99.9207%" y="277" width="0.0269%" height="15" fill="rgb(211,81,21)"/><text x="100.1707%" y="287.50"></text></g><g><title>tick_do_update_jiffies64.part.0 (20 samples, 0.01%)</title><rect x="99.9341%" y="261" width="0.0134%" height="15" fill="rgb(208,190,38)"/><text x="100.1841%" y="271.50"></text></g><g><title>update_wall_time (20 samples, 0.01%)</title><rect x="99.9341%" y="245" width="0.0134%" height="15" fill="rgb(235,213,38)"/><text x="100.1841%" y="255.50"></text></g><g><title>timekeeping_advance (18 samples, 0.01%)</title><rect x="99.9354%" y="229" width="0.0121%" height="15" fill="rgb(237,122,38)"/><text x="100.1854%" y="239.50"></text></g><g><title>__hrtimer_run_queues (64 samples, 0.04%)</title><rect x="99.9180%" y="309" width="0.0430%" height="15" fill="rgb(244,218,35)"/><text x="100.1680%" y="319.50"></text></g><g><title>tick_sched_timer (60 samples, 0.04%)</title><rect x="99.9207%" y="293" width="0.0403%" height="15" fill="rgb(240,68,47)"/><text x="100.1707%" y="303.50"></text></g><g><title>tick_sched_handle (20 samples, 0.01%)</title><rect x="99.9476%" y="277" width="0.0134%" height="15" fill="rgb(210,16,53)"/><text x="100.1976%" y="287.50"></text></g><g><title>update_process_times (20 samples, 0.01%)</title><rect x="99.9476%" y="261" width="0.0134%" height="15" fill="rgb(235,124,12)"/><text x="100.1976%" y="271.50"></text></g><g><title>scheduler_tick (18 samples, 0.01%)</title><rect x="99.9489%" y="245" width="0.0121%" height="15" fill="rgb(224,169,11)"/><text x="100.1989%" y="255.50"></text></g><g><title>hrtimer_interrupt (70 samples, 0.05%)</title><rect x="99.9173%" y="325" width="0.0471%" height="15" fill="rgb(250,166,2)"/><text x="100.1673%" y="335.50"></text></g><g><title>apic_timer_interrupt (89 samples, 0.06%)</title><rect x="99.9146%" y="357" width="0.0598%" height="15" fill="rgb(242,216,29)"/><text x="100.1646%" y="367.50"></text></g><g><title>smp_apic_timer_interrupt (85 samples, 0.06%)</title><rect x="99.9173%" y="341" width="0.0572%" height="15" fill="rgb(230,116,27)"/><text x="100.1673%" y="351.50"></text></g><g><title>[unknown] (148,696 samples, 99.99%)</title><rect x="0.0000%" y="389" width="99.9879%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="399.50">[unknown]</text></g><g><title>lll::string_stream_editor::process_string_stream_bufread_bufwrite (148,695 samples, 99.99%)</title><rect x="0.0007%" y="373" width="99.9872%" height="15" fill="rgb(253,11,6)"/><text x="0.2507%" y="383.50">lll::string_stream_editor::process_string_stream_bufread_bufwrite</text></g><g><title>lll (148,703 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9926%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="415.50">lll</text></g><g><title>all (148,714 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="431.50"></text></g></svg></svg>