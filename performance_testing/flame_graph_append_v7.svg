<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180"><g><title>common_interrupt (21 samples, 0.01%)</title><rect x="55.0134%" y="501" width="0.0126%" height="15" fill="rgb(227,0,7)"/><text x="55.2634%" y="511.50"></text></g><g><title>prepare_exit_to_usermode (17 samples, 0.01%)</title><rect x="55.0158%" y="485" width="0.0102%" height="15" fill="rgb(217,0,24)"/><text x="55.2658%" y="495.50"></text></g><g><title>exit_to_usermode_loop (17 samples, 0.01%)</title><rect x="55.0158%" y="469" width="0.0102%" height="15" fill="rgb(221,193,54)"/><text x="55.2658%" y="479.50"></text></g><g><title>schedule (17 samples, 0.01%)</title><rect x="55.0158%" y="453" width="0.0102%" height="15" fill="rgb(248,212,6)"/><text x="55.2658%" y="463.50"></text></g><g><title>__sched_text_start (17 samples, 0.01%)</title><rect x="55.0158%" y="437" width="0.0102%" height="15" fill="rgb(208,68,35)"/><text x="55.2658%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,518 samples, 1.51%)</title><rect x="53.5151%" y="517" width="1.5115%" height="15" fill="rgb(232,128,0)"/><text x="53.7651%" y="527.50"></text></g><g><title>copy_user_generic_string (601 samples, 0.36%)</title><rect x="59.2482%" y="229" width="0.3608%" height="15" fill="rgb(207,160,47)"/><text x="59.4982%" y="239.50"></text></g><g><title>copy_page_to_iter (607 samples, 0.36%)</title><rect x="59.2458%" y="245" width="0.3644%" height="15" fill="rgb(228,23,34)"/><text x="59.4958%" y="255.50"></text></g><g><title>xas_load (26 samples, 0.02%)</title><rect x="59.6324%" y="213" width="0.0156%" height="15" fill="rgb(218,30,26)"/><text x="59.8824%" y="223.50"></text></g><g><title>find_get_entry (60 samples, 0.04%)</title><rect x="59.6150%" y="229" width="0.0360%" height="15" fill="rgb(220,122,19)"/><text x="59.8650%" y="239.50"></text></g><g><title>pagecache_get_page (64 samples, 0.04%)</title><rect x="59.6138%" y="245" width="0.0384%" height="15" fill="rgb(250,228,42)"/><text x="59.8638%" y="255.50"></text></g><g><title>generic_file_buffered_read (715 samples, 0.43%)</title><rect x="59.2236%" y="261" width="0.4292%" height="15" fill="rgb(240,193,28)"/><text x="59.4736%" y="271.50"></text></g><g><title>__vfs_read (721 samples, 0.43%)</title><rect x="59.2224%" y="325" width="0.4328%" height="15" fill="rgb(216,20,37)"/><text x="59.4724%" y="335.50"></text></g><g><title>new_sync_read (720 samples, 0.43%)</title><rect x="59.2230%" y="309" width="0.4322%" height="15" fill="rgb(206,188,39)"/><text x="59.4730%" y="319.50"></text></g><g><title>ext4_file_read_iter (719 samples, 0.43%)</title><rect x="59.2236%" y="293" width="0.4316%" height="15" fill="rgb(217,207,13)"/><text x="59.4736%" y="303.50"></text></g><g><title>generic_file_read_iter (719 samples, 0.43%)</title><rect x="59.2236%" y="277" width="0.4316%" height="15" fill="rgb(231,73,38)"/><text x="59.4736%" y="287.50"></text></g><g><title>entry_SYSCALL_64 (731 samples, 0.44%)</title><rect x="59.2182%" y="405" width="0.4388%" height="15" fill="rgb(225,20,46)"/><text x="59.4682%" y="415.50"></text></g><g><title>do_syscall_64 (729 samples, 0.44%)</title><rect x="59.2194%" y="389" width="0.4376%" height="15" fill="rgb(210,31,41)"/><text x="59.4694%" y="399.50"></text></g><g><title>__x64_sys_read (728 samples, 0.44%)</title><rect x="59.2200%" y="373" width="0.4370%" height="15" fill="rgb(221,200,47)"/><text x="59.4700%" y="383.50"></text></g><g><title>ksys_read (728 samples, 0.44%)</title><rect x="59.2200%" y="357" width="0.4370%" height="15" fill="rgb(226,26,5)"/><text x="59.4700%" y="367.50"></text></g><g><title>vfs_read (725 samples, 0.44%)</title><rect x="59.2218%" y="341" width="0.4352%" height="15" fill="rgb(249,33,26)"/><text x="59.4718%" y="351.50"></text></g><g><title>__GI___libc_read (734 samples, 0.44%)</title><rect x="59.2170%" y="421" width="0.4406%" height="15" fill="rgb(235,183,28)"/><text x="59.4670%" y="431.50"></text></g><g><title>&lt;std::io::stdio::StdinLock as std::io::Read&gt;::read (735 samples, 0.44%)</title><rect x="59.2170%" y="501" width="0.4412%" height="15" fill="rgb(221,5,38)"/><text x="59.4670%" y="511.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::Read&gt;::read (735 samples, 0.44%)</title><rect x="59.2170%" y="485" width="0.4412%" height="15" fill="rgb(247,18,42)"/><text x="59.4670%" y="495.50"></text></g><g><title>&lt;std::io::stdio::StdinRaw as std::io::Read&gt;::read (735 samples, 0.44%)</title><rect x="59.2170%" y="469" width="0.4412%" height="15" fill="rgb(241,131,45)"/><text x="59.4670%" y="479.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdin as std::io::Read&gt;::read (735 samples, 0.44%)</title><rect x="59.2170%" y="453" width="0.4412%" height="15" fill="rgb(249,31,29)"/><text x="59.4670%" y="463.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (735 samples, 0.44%)</title><rect x="59.2170%" y="437" width="0.4412%" height="15" fill="rgb(225,111,53)"/><text x="59.4670%" y="447.50"></text></g><g><title>apic_timer_interrupt (17 samples, 0.01%)</title><rect x="59.6582%" y="501" width="0.0102%" height="15" fill="rgb(238,160,17)"/><text x="59.9082%" y="511.50"></text></g><g><title>&lt;lll::string_stream_editor::CharIterator as core::iter::traits::iterator::Iterator&gt;::next (7,745 samples, 4.65%)</title><rect x="55.0266%" y="517" width="4.6490%" height="15" fill="rgb(214,148,48)"/><text x="55.2766%" y="527.50">&lt;lll:..</text></g><g><title>tick_sched_do_timer (25 samples, 0.02%)</title><rect x="59.6810%" y="437" width="0.0150%" height="15" fill="rgb(232,36,49)"/><text x="59.9310%" y="447.50"></text></g><g><title>__hrtimer_run_queues (38 samples, 0.02%)</title><rect x="59.6786%" y="469" width="0.0228%" height="15" fill="rgb(209,103,24)"/><text x="59.9286%" y="479.50"></text></g><g><title>tick_sched_timer (36 samples, 0.02%)</title><rect x="59.6798%" y="453" width="0.0216%" height="15" fill="rgb(229,88,8)"/><text x="59.9298%" y="463.50"></text></g><g><title>hrtimer_interrupt (42 samples, 0.03%)</title><rect x="59.6780%" y="485" width="0.0252%" height="15" fill="rgb(213,181,19)"/><text x="59.9280%" y="495.50"></text></g><g><title>apic_timer_interrupt (52 samples, 0.03%)</title><rect x="59.6756%" y="517" width="0.0312%" height="15" fill="rgb(254,191,54)"/><text x="59.9256%" y="527.50"></text></g><g><title>smp_apic_timer_interrupt (48 samples, 0.03%)</title><rect x="59.6780%" y="501" width="0.0288%" height="15" fill="rgb(241,83,37)"/><text x="59.9280%" y="511.50"></text></g><g><title>end_page_writeback (66 samples, 0.04%)</title><rect x="59.7332%" y="309" width="0.0396%" height="15" fill="rgb(233,36,39)"/><text x="59.9832%" y="319.50"></text></g><g><title>test_clear_page_writeback (61 samples, 0.04%)</title><rect x="59.7362%" y="293" width="0.0366%" height="15" fill="rgb(226,3,54)"/><text x="59.9862%" y="303.50"></text></g><g><title>blk_done_softirq (105 samples, 0.06%)</title><rect x="59.7104%" y="453" width="0.0630%" height="15" fill="rgb(245,192,40)"/><text x="59.9604%" y="463.50"></text></g><g><title>scsi_softirq_done (105 samples, 0.06%)</title><rect x="59.7104%" y="437" width="0.0630%" height="15" fill="rgb(238,167,29)"/><text x="59.9604%" y="447.50"></text></g><g><title>scsi_finish_command (105 samples, 0.06%)</title><rect x="59.7104%" y="421" width="0.0630%" height="15" fill="rgb(232,182,51)"/><text x="59.9604%" y="431.50"></text></g><g><title>scsi_io_completion (105 samples, 0.06%)</title><rect x="59.7104%" y="405" width="0.0630%" height="15" fill="rgb(231,60,39)"/><text x="59.9604%" y="415.50"></text></g><g><title>scsi_end_request (105 samples, 0.06%)</title><rect x="59.7104%" y="389" width="0.0630%" height="15" fill="rgb(208,69,12)"/><text x="59.9604%" y="399.50"></text></g><g><title>blk_update_request (102 samples, 0.06%)</title><rect x="59.7122%" y="373" width="0.0612%" height="15" fill="rgb(235,93,37)"/><text x="59.9622%" y="383.50"></text></g><g><title>bio_endio (101 samples, 0.06%)</title><rect x="59.7128%" y="357" width="0.0606%" height="15" fill="rgb(213,116,39)"/><text x="59.9628%" y="367.50"></text></g><g><title>ext4_end_bio (101 samples, 0.06%)</title><rect x="59.7128%" y="341" width="0.0606%" height="15" fill="rgb(222,207,29)"/><text x="59.9628%" y="351.50"></text></g><g><title>ext4_finish_bio (100 samples, 0.06%)</title><rect x="59.7134%" y="325" width="0.0600%" height="15" fill="rgb(206,96,30)"/><text x="59.9634%" y="335.50"></text></g><g><title>do_IRQ (113 samples, 0.07%)</title><rect x="59.7068%" y="501" width="0.0678%" height="15" fill="rgb(218,138,4)"/><text x="59.9568%" y="511.50"></text></g><g><title>irq_exit (107 samples, 0.06%)</title><rect x="59.7104%" y="485" width="0.0642%" height="15" fill="rgb(250,191,14)"/><text x="59.9604%" y="495.50"></text></g><g><title>__do_softirq (107 samples, 0.06%)</title><rect x="59.7104%" y="469" width="0.0642%" height="15" fill="rgb(239,60,40)"/><text x="59.9604%" y="479.50"></text></g><g><title>common_interrupt (119 samples, 0.07%)</title><rect x="59.7068%" y="517" width="0.0714%" height="15" fill="rgb(206,27,48)"/><text x="59.9568%" y="527.50"></text></g><g><title>&lt;core::slice::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,085 samples, 0.65%)</title><rect x="74.0219%" y="469" width="0.6513%" height="15" fill="rgb(225,35,8)"/><text x="74.2719%" y="479.50"></text></g><g><title>&lt;core::str::Chars as core::iter::traits::iterator::Iterator&gt;::next (3,209 samples, 1.93%)</title><rect x="72.7535%" y="501" width="1.9262%" height="15" fill="rgb(250,213,24)"/><text x="73.0035%" y="511.50">&lt;..</text></g><g><title>core::str::next_code_point (3,209 samples, 1.93%)</title><rect x="72.7535%" y="485" width="1.9262%" height="15" fill="rgb(247,123,22)"/><text x="73.0035%" y="495.50">c..</text></g><g><title>alloc::collections::vec_deque::count (998 samples, 0.60%)</title><rect x="75.2560%" y="485" width="0.5991%" height="15" fill="rgb(231,138,38)"/><text x="75.5060%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (1,959 samples, 1.18%)</title><rect x="74.6810%" y="501" width="1.1759%" height="15" fill="rgb(231,145,46)"/><text x="74.9310%" y="511.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (1,058 samples, 0.64%)</title><rect x="77.3119%" y="485" width="0.6351%" height="15" fill="rgb(251,118,11)"/><text x="77.5619%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_back (3,496 samples, 2.10%)</title><rect x="75.8569%" y="501" width="2.0985%" height="15" fill="rgb(217,147,25)"/><text x="76.1069%" y="511.50">a..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::ptr (1,002 samples, 0.60%)</title><rect x="81.5239%" y="469" width="0.6015%" height="15" fill="rgb(247,81,37)"/><text x="81.7739%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,002 samples, 0.60%)</title><rect x="81.5239%" y="453" width="0.6015%" height="15" fill="rgb(209,12,38)"/><text x="81.7739%" y="463.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_read (1,008 samples, 0.61%)</title><rect x="81.5239%" y="485" width="0.6051%" height="15" fill="rgb(227,1,9)"/><text x="81.7739%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_empty (941 samples, 0.56%)</title><rect x="82.1290%" y="485" width="0.5648%" height="15" fill="rgb(248,47,43)"/><text x="82.3790%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (1,987 samples, 1.19%)</title><rect x="82.6939%" y="469" width="1.1927%" height="15" fill="rgb(221,10,30)"/><text x="82.9439%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (1,989 samples, 1.19%)</title><rect x="82.6939%" y="485" width="1.1939%" height="15" fill="rgb(210,229,1)"/><text x="82.9439%" y="495.50"></text></g><g><title>do_IRQ (17 samples, 0.01%)</title><rect x="83.8926%" y="469" width="0.0102%" height="15" fill="rgb(222,148,37)"/><text x="84.1426%" y="479.50"></text></g><g><title>irq_exit (17 samples, 0.01%)</title><rect x="83.8926%" y="453" width="0.0102%" height="15" fill="rgb(234,67,33)"/><text x="84.1426%" y="463.50"></text></g><g><title>__do_softirq (17 samples, 0.01%)</title><rect x="83.8926%" y="437" width="0.0102%" height="15" fill="rgb(247,98,35)"/><text x="84.1426%" y="447.50"></text></g><g><title>blk_done_softirq (17 samples, 0.01%)</title><rect x="83.8926%" y="421" width="0.0102%" height="15" fill="rgb(247,138,52)"/><text x="84.1426%" y="431.50"></text></g><g><title>scsi_softirq_done (17 samples, 0.01%)</title><rect x="83.8926%" y="405" width="0.0102%" height="15" fill="rgb(213,79,30)"/><text x="84.1426%" y="415.50"></text></g><g><title>scsi_finish_command (17 samples, 0.01%)</title><rect x="83.8926%" y="389" width="0.0102%" height="15" fill="rgb(246,177,23)"/><text x="84.1426%" y="399.50"></text></g><g><title>scsi_io_completion (17 samples, 0.01%)</title><rect x="83.8926%" y="373" width="0.0102%" height="15" fill="rgb(230,62,27)"/><text x="84.1426%" y="383.50"></text></g><g><title>scsi_end_request (17 samples, 0.01%)</title><rect x="83.8926%" y="357" width="0.0102%" height="15" fill="rgb(216,154,8)"/><text x="84.1426%" y="367.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::pop_front (9,909 samples, 5.95%)</title><rect x="77.9554%" y="501" width="5.9480%" height="15" fill="rgb(244,35,45)"/><text x="78.2054%" y="511.50">alloc::c..</text></g><g><title>common_interrupt (18 samples, 0.01%)</title><rect x="83.8926%" y="485" width="0.0108%" height="15" fill="rgb(251,115,12)"/><text x="84.1426%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (2,070 samples, 1.24%)</title><rect x="84.5060%" y="485" width="1.2425%" height="15" fill="rgb(240,54,50)"/><text x="84.7560%" y="495.50"></text></g><g><title>core::ptr::write (2,069 samples, 1.24%)</title><rect x="84.5066%" y="469" width="1.2419%" height="15" fill="rgb(233,84,52)"/><text x="84.7566%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::len (3,045 samples, 1.83%)</title><rect x="87.0037%" y="469" width="1.8278%" height="15" fill="rgb(207,117,47)"/><text x="87.2537%" y="479.50">a..</text></g><g><title>alloc::collections::vec_deque::count (3,045 samples, 1.83%)</title><rect x="87.0037%" y="453" width="1.8278%" height="15" fill="rgb(249,43,39)"/><text x="87.2537%" y="463.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2,039 samples, 1.22%)</title><rect x="87.6076%" y="437" width="1.2239%" height="15" fill="rgb(209,38,44)"/><text x="87.8576%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (5,145 samples, 3.09%)</title><rect x="85.7486%" y="485" width="3.0883%" height="15" fill="rgb(236,212,23)"/><text x="85.9986%" y="495.50">all..</text></g><g><title>alloc::collections::vec_deque::wrap_index (170 samples, 0.10%)</title><rect x="88.8369%" y="469" width="0.1020%" height="15" fill="rgb(242,79,21)"/><text x="89.0869%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_add (2,222 samples, 1.33%)</title><rect x="88.8369%" y="485" width="1.3338%" height="15" fill="rgb(211,96,35)"/><text x="89.0869%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2,052 samples, 1.23%)</title><rect x="88.9390%" y="469" width="1.2317%" height="15" fill="rgb(253,215,40)"/><text x="89.1890%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_back (10,445 samples, 6.27%)</title><rect x="83.9034%" y="501" width="6.2697%" height="15" fill="rgb(211,81,21)"/><text x="84.1534%" y="511.50">alloc::c..</text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::buffer_write (975 samples, 0.59%)</title><rect x="90.8262%" y="485" width="0.5853%" height="15" fill="rgb(208,190,38)"/><text x="91.0762%" y="495.50"></text></g><g><title>core::ptr::write (975 samples, 0.59%)</title><rect x="90.8262%" y="469" width="0.5853%" height="15" fill="rgb(235,213,38)"/><text x="91.0762%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::is_full (1,035 samples, 0.62%)</title><rect x="91.4115%" y="485" width="0.6213%" height="15" fill="rgb(237,122,38)"/><text x="91.6615%" y="495.50"></text></g><g><title>alloc::collections::vec_deque::wrap_index (100 samples, 0.06%)</title><rect x="92.0327%" y="469" width="0.0600%" height="15" fill="rgb(244,218,35)"/><text x="92.2827%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::wrap_sub (1,105 samples, 0.66%)</title><rect x="92.0327%" y="485" width="0.6633%" height="15" fill="rgb(240,68,47)"/><text x="92.2827%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1,005 samples, 0.60%)</title><rect x="92.0928%" y="469" width="0.6033%" height="15" fill="rgb(210,16,53)"/><text x="92.3428%" y="479.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T&gt;::push_front (4,209 samples, 2.53%)</title><rect x="90.1731%" y="501" width="2.5265%" height="15" fill="rgb(235,124,12)"/><text x="90.4231%" y="511.50">al..</text></g><g><title>__hrtimer_run_queues (32 samples, 0.02%)</title><rect x="92.7020%" y="453" width="0.0192%" height="15" fill="rgb(224,169,11)"/><text x="92.9520%" y="463.50"></text></g><g><title>tick_sched_timer (29 samples, 0.02%)</title><rect x="92.7038%" y="437" width="0.0174%" height="15" fill="rgb(250,166,2)"/><text x="92.9538%" y="447.50"></text></g><g><title>hrtimer_interrupt (35 samples, 0.02%)</title><rect x="92.7014%" y="469" width="0.0210%" height="15" fill="rgb(242,216,29)"/><text x="92.9514%" y="479.50"></text></g><g><title>apic_timer_interrupt (44 samples, 0.03%)</title><rect x="92.6996%" y="501" width="0.0264%" height="15" fill="rgb(230,116,27)"/><text x="92.9496%" y="511.50"></text></g><g><title>smp_apic_timer_interrupt (41 samples, 0.02%)</title><rect x="92.7014%" y="485" width="0.0246%" height="15" fill="rgb(228,99,48)"/><text x="92.9514%" y="495.50"></text></g><g><title>do_IRQ (69 samples, 0.04%)</title><rect x="92.7266%" y="485" width="0.0414%" height="15" fill="rgb(253,11,6)"/><text x="92.9766%" y="495.50"></text></g><g><title>irq_exit (61 samples, 0.04%)</title><rect x="92.7314%" y="469" width="0.0366%" height="15" fill="rgb(247,143,39)"/><text x="92.9814%" y="479.50"></text></g><g><title>__do_softirq (61 samples, 0.04%)</title><rect x="92.7314%" y="453" width="0.0366%" height="15" fill="rgb(236,97,10)"/><text x="92.9814%" y="463.50"></text></g><g><title>blk_done_softirq (61 samples, 0.04%)</title><rect x="92.7314%" y="437" width="0.0366%" height="15" fill="rgb(233,208,19)"/><text x="92.9814%" y="447.50"></text></g><g><title>scsi_softirq_done (61 samples, 0.04%)</title><rect x="92.7314%" y="421" width="0.0366%" height="15" fill="rgb(216,164,2)"/><text x="92.9814%" y="431.50"></text></g><g><title>scsi_finish_command (61 samples, 0.04%)</title><rect x="92.7314%" y="405" width="0.0366%" height="15" fill="rgb(220,129,5)"/><text x="92.9814%" y="415.50"></text></g><g><title>scsi_io_completion (61 samples, 0.04%)</title><rect x="92.7314%" y="389" width="0.0366%" height="15" fill="rgb(242,17,10)"/><text x="92.9814%" y="399.50"></text></g><g><title>scsi_end_request (61 samples, 0.04%)</title><rect x="92.7314%" y="373" width="0.0366%" height="15" fill="rgb(242,107,0)"/><text x="92.9814%" y="383.50"></text></g><g><title>blk_update_request (61 samples, 0.04%)</title><rect x="92.7314%" y="357" width="0.0366%" height="15" fill="rgb(251,28,31)"/><text x="92.9814%" y="367.50"></text></g><g><title>bio_endio (61 samples, 0.04%)</title><rect x="92.7314%" y="341" width="0.0366%" height="15" fill="rgb(233,223,10)"/><text x="92.9814%" y="351.50"></text></g><g><title>ext4_end_bio (60 samples, 0.04%)</title><rect x="92.7320%" y="325" width="0.0360%" height="15" fill="rgb(215,21,27)"/><text x="92.9820%" y="335.50"></text></g><g><title>ext4_finish_bio (60 samples, 0.04%)</title><rect x="92.7320%" y="309" width="0.0360%" height="15" fill="rgb(232,23,21)"/><text x="92.9820%" y="319.50"></text></g><g><title>end_page_writeback (33 samples, 0.02%)</title><rect x="92.7482%" y="293" width="0.0198%" height="15" fill="rgb(244,5,23)"/><text x="92.9982%" y="303.50"></text></g><g><title>test_clear_page_writeback (29 samples, 0.02%)</title><rect x="92.7506%" y="277" width="0.0174%" height="15" fill="rgb(226,81,46)"/><text x="93.0006%" y="287.50"></text></g><g><title>common_interrupt (84 samples, 0.05%)</title><rect x="92.7260%" y="501" width="0.0504%" height="15" fill="rgb(247,70,30)"/><text x="92.9760%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (995 samples, 0.60%)</title><rect x="92.7849%" y="501" width="0.5973%" height="15" fill="rgb(212,68,19)"/><text x="93.0349%" y="511.50"></text></g><g><title>&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next (99,448 samples, 59.69%)</title><rect x="33.6879%" y="533" width="59.6948%" height="15" fill="rgb(240,187,13)"/><text x="33.9379%" y="543.50">&lt;lll::matcher::MatchIterator as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>lll::matcher::MatchIterator::advance_char (55,979 samples, 33.60%)</title><rect x="59.7807%" y="517" width="33.6021%" height="15" fill="rgb(223,113,26)"/><text x="60.0307%" y="527.50">lll::matcher::MatchIterator::advance_char</text></g><g><title>tick_sched_do_timer (40 samples, 0.02%)</title><rect x="93.3881%" y="453" width="0.0240%" height="15" fill="rgb(206,192,2)"/><text x="93.6381%" y="463.50"></text></g><g><title>__hrtimer_run_queues (71 samples, 0.04%)</title><rect x="93.3863%" y="485" width="0.0426%" height="15" fill="rgb(241,108,4)"/><text x="93.6363%" y="495.50"></text></g><g><title>tick_sched_timer (69 samples, 0.04%)</title><rect x="93.3875%" y="469" width="0.0414%" height="15" fill="rgb(247,173,49)"/><text x="93.6375%" y="479.50"></text></g><g><title>tick_sched_handle (28 samples, 0.02%)</title><rect x="93.4121%" y="453" width="0.0168%" height="15" fill="rgb(224,114,35)"/><text x="93.6621%" y="463.50"></text></g><g><title>update_process_times (28 samples, 0.02%)</title><rect x="93.4121%" y="437" width="0.0168%" height="15" fill="rgb(245,159,27)"/><text x="93.6621%" y="447.50"></text></g><g><title>scheduler_tick (24 samples, 0.01%)</title><rect x="93.4145%" y="421" width="0.0144%" height="15" fill="rgb(245,172,44)"/><text x="93.6645%" y="431.50"></text></g><g><title>hrtimer_interrupt (78 samples, 0.05%)</title><rect x="93.3863%" y="501" width="0.0468%" height="15" fill="rgb(236,23,11)"/><text x="93.6363%" y="511.50"></text></g><g><title>apic_timer_interrupt (101 samples, 0.06%)</title><rect x="93.3833%" y="533" width="0.0606%" height="15" fill="rgb(205,117,38)"/><text x="93.6333%" y="543.50"></text></g><g><title>smp_apic_timer_interrupt (96 samples, 0.06%)</title><rect x="93.3863%" y="517" width="0.0576%" height="15" fill="rgb(237,72,25)"/><text x="93.6363%" y="527.50"></text></g><g><title>irq_exit (17 samples, 0.01%)</title><rect x="93.4337%" y="501" width="0.0102%" height="15" fill="rgb(244,70,9)"/><text x="93.6837%" y="511.50"></text></g><g><title>__do_softirq (109 samples, 0.07%)</title><rect x="93.4565%" y="485" width="0.0654%" height="15" fill="rgb(217,125,39)"/><text x="93.7065%" y="495.50"></text></g><g><title>blk_done_softirq (109 samples, 0.07%)</title><rect x="93.4565%" y="469" width="0.0654%" height="15" fill="rgb(235,36,10)"/><text x="93.7065%" y="479.50"></text></g><g><title>scsi_softirq_done (108 samples, 0.06%)</title><rect x="93.4571%" y="453" width="0.0648%" height="15" fill="rgb(251,123,47)"/><text x="93.7071%" y="463.50"></text></g><g><title>scsi_finish_command (107 samples, 0.06%)</title><rect x="93.4577%" y="437" width="0.0642%" height="15" fill="rgb(221,13,13)"/><text x="93.7077%" y="447.50"></text></g><g><title>scsi_io_completion (107 samples, 0.06%)</title><rect x="93.4577%" y="421" width="0.0642%" height="15" fill="rgb(238,131,9)"/><text x="93.7077%" y="431.50"></text></g><g><title>scsi_end_request (106 samples, 0.06%)</title><rect x="93.4583%" y="405" width="0.0636%" height="15" fill="rgb(211,50,8)"/><text x="93.7083%" y="415.50"></text></g><g><title>blk_update_request (101 samples, 0.06%)</title><rect x="93.4613%" y="389" width="0.0606%" height="15" fill="rgb(245,182,24)"/><text x="93.7113%" y="399.50"></text></g><g><title>bio_endio (99 samples, 0.06%)</title><rect x="93.4625%" y="373" width="0.0594%" height="15" fill="rgb(242,14,37)"/><text x="93.7125%" y="383.50"></text></g><g><title>ext4_end_bio (99 samples, 0.06%)</title><rect x="93.4625%" y="357" width="0.0594%" height="15" fill="rgb(246,228,12)"/><text x="93.7125%" y="367.50"></text></g><g><title>ext4_finish_bio (97 samples, 0.06%)</title><rect x="93.4638%" y="341" width="0.0582%" height="15" fill="rgb(213,55,15)"/><text x="93.7138%" y="351.50"></text></g><g><title>end_page_writeback (65 samples, 0.04%)</title><rect x="93.4830%" y="325" width="0.0390%" height="15" fill="rgb(209,9,3)"/><text x="93.7330%" y="335.50"></text></g><g><title>test_clear_page_writeback (62 samples, 0.04%)</title><rect x="93.4848%" y="309" width="0.0372%" height="15" fill="rgb(230,59,30)"/><text x="93.7348%" y="319.50"></text></g><g><title>do_IRQ (131 samples, 0.08%)</title><rect x="93.4439%" y="517" width="0.0786%" height="15" fill="rgb(209,121,21)"/><text x="93.6939%" y="527.50"></text></g><g><title>irq_exit (110 samples, 0.07%)</title><rect x="93.4565%" y="501" width="0.0660%" height="15" fill="rgb(220,109,13)"/><text x="93.7065%" y="511.50"></text></g><g><title>common_interrupt (139 samples, 0.08%)</title><rect x="93.4439%" y="533" width="0.0834%" height="15" fill="rgb(232,18,1)"/><text x="93.6939%" y="543.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::encode_utf8 (2,968 samples, 1.78%)</title><rect x="94.7789%" y="517" width="1.7816%" height="15" fill="rgb(215,41,42)"/><text x="95.0289%" y="527.50">c..</text></g><g><title>core::char::methods::encode_utf8_raw (2,968 samples, 1.78%)</title><rect x="94.7789%" y="501" width="1.7816%" height="15" fill="rgb(224,123,36)"/><text x="95.0289%" y="511.50">c..</text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,021 samples, 0.61%)</title><rect x="95.9476%" y="485" width="0.6129%" height="15" fill="rgb(240,125,3)"/><text x="96.1976%" y="495.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,021 samples, 0.61%)</title><rect x="95.9476%" y="469" width="0.6129%" height="15" fill="rgb(205,98,50)"/><text x="96.1976%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,021 samples, 0.61%)</title><rect x="95.9476%" y="453" width="0.6129%" height="15" fill="rgb(205,185,37)"/><text x="96.1976%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (969 samples, 0.58%)</title><rect x="97.1536%" y="485" width="0.5817%" height="15" fill="rgb(238,207,15)"/><text x="97.4036%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (969 samples, 0.58%)</title><rect x="97.1536%" y="469" width="0.5817%" height="15" fill="rgb(213,199,42)"/><text x="97.4036%" y="479.50"></text></g><g><title>core::slice::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1,970 samples, 1.18%)</title><rect x="96.5605%" y="517" width="1.1825%" height="15" fill="rgb(235,201,11)"/><text x="96.8105%" y="527.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::SliceIndex&lt;[T]&gt;&gt;::index_mut (1,970 samples, 1.18%)</title><rect x="96.5605%" y="501" width="1.1825%" height="15" fill="rgb(207,46,11)"/><text x="96.8105%" y="511.50"></text></g><g><title>ext4_mark_iloc_dirty (21 samples, 0.01%)</title><rect x="97.7748%" y="133" width="0.0126%" height="15" fill="rgb(241,35,35)"/><text x="98.0248%" y="143.50"></text></g><g><title>ext4_dirty_inode (37 samples, 0.02%)</title><rect x="97.7682%" y="165" width="0.0222%" height="15" fill="rgb(243,32,47)"/><text x="98.0182%" y="175.50"></text></g><g><title>ext4_mark_inode_dirty (28 samples, 0.02%)</title><rect x="97.7736%" y="149" width="0.0168%" height="15" fill="rgb(247,202,23)"/><text x="98.0236%" y="159.50"></text></g><g><title>file_update_time (40 samples, 0.02%)</title><rect x="97.7670%" y="213" width="0.0240%" height="15" fill="rgb(219,102,11)"/><text x="98.0170%" y="223.50"></text></g><g><title>generic_update_time (39 samples, 0.02%)</title><rect x="97.7676%" y="197" width="0.0234%" height="15" fill="rgb(243,110,44)"/><text x="98.0176%" y="207.50"></text></g><g><title>__mark_inode_dirty (39 samples, 0.02%)</title><rect x="97.7676%" y="181" width="0.0234%" height="15" fill="rgb(222,74,54)"/><text x="98.0176%" y="191.50"></text></g><g><title>_raw_read_lock (19 samples, 0.01%)</title><rect x="97.8409%" y="149" width="0.0114%" height="15" fill="rgb(216,99,12)"/><text x="98.0909%" y="159.50"></text></g><g><title>kmem_cache_alloc (40 samples, 0.02%)</title><rect x="97.8523%" y="149" width="0.0240%" height="15" fill="rgb(226,22,26)"/><text x="98.1023%" y="159.50"></text></g><g><title>add_transaction_credits (20 samples, 0.01%)</title><rect x="97.9153%" y="133" width="0.0120%" height="15" fill="rgb(217,163,10)"/><text x="98.1653%" y="143.50"></text></g><g><title>__ext4_journal_start_sb (164 samples, 0.10%)</title><rect x="97.8295%" y="181" width="0.0984%" height="15" fill="rgb(213,25,53)"/><text x="98.0795%" y="191.50"></text></g><g><title>jbd2__journal_start (151 samples, 0.09%)</title><rect x="97.8373%" y="165" width="0.0906%" height="15" fill="rgb(252,105,26)"/><text x="98.0873%" y="175.50"></text></g><g><title>start_this_handle (85 samples, 0.05%)</title><rect x="97.8769%" y="149" width="0.0510%" height="15" fill="rgb(220,39,43)"/><text x="98.1269%" y="159.50"></text></g><g><title>alloc_slab_page (23 samples, 0.01%)</title><rect x="97.9909%" y="37" width="0.0138%" height="15" fill="rgb(229,68,48)"/><text x="98.2409%" y="47.50"></text></g><g><title>allocate_slab (30 samples, 0.02%)</title><rect x="97.9897%" y="53" width="0.0180%" height="15" fill="rgb(252,8,32)"/><text x="98.2397%" y="63.50"></text></g><g><title>__slab_alloc (37 samples, 0.02%)</title><rect x="97.9861%" y="101" width="0.0222%" height="15" fill="rgb(223,20,43)"/><text x="98.2361%" y="111.50"></text></g><g><title>___slab_alloc (37 samples, 0.02%)</title><rect x="97.9861%" y="85" width="0.0222%" height="15" fill="rgb(229,81,49)"/><text x="98.2361%" y="95.50"></text></g><g><title>new_slab (31 samples, 0.02%)</title><rect x="97.9897%" y="69" width="0.0186%" height="15" fill="rgb(236,28,36)"/><text x="98.2397%" y="79.50"></text></g><g><title>memcg_kmem_get_cache (28 samples, 0.02%)</title><rect x="98.0083%" y="101" width="0.0168%" height="15" fill="rgb(249,185,26)"/><text x="98.2583%" y="111.50"></text></g><g><title>kmem_cache_alloc (87 samples, 0.05%)</title><rect x="97.9735%" y="117" width="0.0522%" height="15" fill="rgb(249,174,33)"/><text x="98.2235%" y="127.50"></text></g><g><title>alloc_buffer_head (109 samples, 0.07%)</title><rect x="97.9633%" y="133" width="0.0654%" height="15" fill="rgb(233,201,37)"/><text x="98.2133%" y="143.50"></text></g><g><title>create_empty_buffers (156 samples, 0.09%)</title><rect x="97.9423%" y="165" width="0.0936%" height="15" fill="rgb(221,78,26)"/><text x="98.1923%" y="175.50"></text></g><g><title>alloc_page_buffers (128 samples, 0.08%)</title><rect x="97.9591%" y="149" width="0.0768%" height="15" fill="rgb(250,127,30)"/><text x="98.2091%" y="159.50"></text></g><g><title>__dquot_alloc_space (18 samples, 0.01%)</title><rect x="98.1038%" y="117" width="0.0108%" height="15" fill="rgb(230,49,44)"/><text x="98.3538%" y="127.50"></text></g><g><title>_raw_spin_lock (18 samples, 0.01%)</title><rect x="98.1146%" y="117" width="0.0108%" height="15" fill="rgb(229,67,23)"/><text x="98.3646%" y="127.50"></text></g><g><title>ext4_claim_free_clusters (17 samples, 0.01%)</title><rect x="98.1254%" y="117" width="0.0102%" height="15" fill="rgb(249,83,47)"/><text x="98.3754%" y="127.50"></text></g><g><title>ext4_da_reserve_space (58 samples, 0.03%)</title><rect x="98.1020%" y="133" width="0.0348%" height="15" fill="rgb(215,43,3)"/><text x="98.3520%" y="143.50"></text></g><g><title>__es_insert_extent (30 samples, 0.02%)</title><rect x="98.1446%" y="117" width="0.0180%" height="15" fill="rgb(238,154,13)"/><text x="98.3946%" y="127.50"></text></g><g><title>ext4_es_insert_delayed_block (67 samples, 0.04%)</title><rect x="98.1368%" y="133" width="0.0402%" height="15" fill="rgb(219,56,2)"/><text x="98.3868%" y="143.50"></text></g><g><title>ext4_da_map_blocks.constprop.0 (252 samples, 0.15%)</title><rect x="98.0419%" y="149" width="0.1513%" height="15" fill="rgb(233,0,4)"/><text x="98.2919%" y="159.50"></text></g><g><title>ext4_es_lookup_extent (27 samples, 0.02%)</title><rect x="98.1770%" y="133" width="0.0162%" height="15" fill="rgb(235,30,7)"/><text x="98.4270%" y="143.50"></text></g><g><title>ext4_da_get_block_prep (276 samples, 0.17%)</title><rect x="98.0359%" y="165" width="0.1657%" height="15" fill="rgb(250,79,13)"/><text x="98.2859%" y="175.50"></text></g><g><title>ext4_block_write_begin (453 samples, 0.27%)</title><rect x="97.9309%" y="181" width="0.2719%" height="15" fill="rgb(211,146,34)"/><text x="98.1809%" y="191.50"></text></g><g><title>__inc_numa_state (17 samples, 0.01%)</title><rect x="98.2640%" y="85" width="0.0102%" height="15" fill="rgb(228,22,38)"/><text x="98.5140%" y="95.50"></text></g><g><title>clear_page_rep (635 samples, 0.38%)</title><rect x="98.2778%" y="85" width="0.3812%" height="15" fill="rgb(235,168,5)"/><text x="98.5278%" y="95.50"></text></g><g><title>node_dirty_ok (36 samples, 0.02%)</title><rect x="98.6608%" y="85" width="0.0216%" height="15" fill="rgb(221,155,16)"/><text x="98.9108%" y="95.50"></text></g><g><title>prep_new_page (17 samples, 0.01%)</title><rect x="98.6860%" y="85" width="0.0102%" height="15" fill="rgb(215,215,53)"/><text x="98.9360%" y="95.50"></text></g><g><title>get_page_from_freelist (808 samples, 0.49%)</title><rect x="98.2466%" y="101" width="0.4850%" height="15" fill="rgb(223,4,10)"/><text x="98.4966%" y="111.50"></text></g><g><title>rmqueue (59 samples, 0.04%)</title><rect x="98.6962%" y="85" width="0.0354%" height="15" fill="rgb(234,103,6)"/><text x="98.9462%" y="95.50"></text></g><g><title>__alloc_pages_nodemask (849 samples, 0.51%)</title><rect x="98.2256%" y="117" width="0.5096%" height="15" fill="rgb(227,97,0)"/><text x="98.4756%" y="127.50"></text></g><g><title>alloc_pages_current (883 samples, 0.53%)</title><rect x="98.2166%" y="133" width="0.5300%" height="15" fill="rgb(234,150,53)"/><text x="98.4666%" y="143.50"></text></g><g><title>__page_cache_alloc (886 samples, 0.53%)</title><rect x="98.2160%" y="149" width="0.5318%" height="15" fill="rgb(228,201,54)"/><text x="98.4660%" y="159.50"></text></g><g><title>mem_cgroup_charge_statistics (32 samples, 0.02%)</title><rect x="98.8145%" y="101" width="0.0192%" height="15" fill="rgb(222,22,37)"/><text x="99.0645%" y="111.50"></text></g><g><title>mem_cgroup_commit_charge (42 samples, 0.03%)</title><rect x="98.8097%" y="117" width="0.0252%" height="15" fill="rgb(237,53,32)"/><text x="99.0597%" y="127.50"></text></g><g><title>get_mem_cgroup_from_mm (57 samples, 0.03%)</title><rect x="98.8367%" y="101" width="0.0342%" height="15" fill="rgb(233,25,53)"/><text x="99.0867%" y="111.50"></text></g><g><title>mem_cgroup_try_charge (79 samples, 0.05%)</title><rect x="98.8349%" y="117" width="0.0474%" height="15" fill="rgb(210,40,34)"/><text x="99.0849%" y="127.50"></text></g><g><title>try_charge (19 samples, 0.01%)</title><rect x="98.8709%" y="101" width="0.0114%" height="15" fill="rgb(241,220,44)"/><text x="99.1209%" y="111.50"></text></g><g><title>__add_to_page_cache_locked (261 samples, 0.16%)</title><rect x="98.7599%" y="133" width="0.1567%" height="15" fill="rgb(235,28,35)"/><text x="99.0099%" y="143.50"></text></g><g><title>xas_store (32 samples, 0.02%)</title><rect x="98.8973%" y="117" width="0.0192%" height="15" fill="rgb(210,56,17)"/><text x="99.1473%" y="127.50"></text></g><g><title>__inc_node_page_state (19 samples, 0.01%)</title><rect x="98.9165%" y="133" width="0.0114%" height="15" fill="rgb(224,130,29)"/><text x="99.1665%" y="143.50"></text></g><g><title>__lru_cache_add (17 samples, 0.01%)</title><rect x="98.9279%" y="133" width="0.0102%" height="15" fill="rgb(235,212,8)"/><text x="99.1779%" y="143.50"></text></g><g><title>__mod_lruvec_state (20 samples, 0.01%)</title><rect x="98.9850%" y="69" width="0.0120%" height="15" fill="rgb(223,33,50)"/><text x="99.2350%" y="79.50"></text></g><g><title>__pagevec_lru_add_fn (98 samples, 0.06%)</title><rect x="98.9477%" y="85" width="0.0588%" height="15" fill="rgb(219,149,13)"/><text x="99.1977%" y="95.50"></text></g><g><title>__lru_cache_add (132 samples, 0.08%)</title><rect x="98.9381%" y="117" width="0.0792%" height="15" fill="rgb(250,156,29)"/><text x="99.1881%" y="127.50"></text></g><g><title>pagevec_lru_move_fn (125 samples, 0.08%)</title><rect x="98.9423%" y="101" width="0.0750%" height="15" fill="rgb(216,193,19)"/><text x="99.1923%" y="111.50"></text></g><g><title>lru_cache_add (133 samples, 0.08%)</title><rect x="98.9381%" y="133" width="0.0798%" height="15" fill="rgb(216,135,14)"/><text x="99.1881%" y="143.50"></text></g><g><title>add_to_page_cache_lru (461 samples, 0.28%)</title><rect x="98.7479%" y="149" width="0.2767%" height="15" fill="rgb(241,47,5)"/><text x="98.9979%" y="159.50"></text></g><g><title>xas_load (29 samples, 0.02%)</title><rect x="99.0294%" y="133" width="0.0174%" height="15" fill="rgb(233,42,35)"/><text x="99.2794%" y="143.50"></text></g><g><title>find_get_entry (38 samples, 0.02%)</title><rect x="99.0252%" y="149" width="0.0228%" height="15" fill="rgb(231,13,6)"/><text x="99.2752%" y="159.50"></text></g><g><title>pagecache_get_page (1,396 samples, 0.84%)</title><rect x="98.2106%" y="165" width="0.8380%" height="15" fill="rgb(207,181,40)"/><text x="98.4606%" y="175.50"></text></g><g><title>grab_cache_page_write_begin (1,405 samples, 0.84%)</title><rect x="98.2082%" y="181" width="0.8434%" height="15" fill="rgb(254,173,49)"/><text x="98.4582%" y="191.50"></text></g><g><title>ext4_da_write_begin (2,078 samples, 1.25%)</title><rect x="97.8084%" y="197" width="1.2473%" height="15" fill="rgb(221,1,38)"/><text x="98.0584%" y="207.50"></text></g><g><title>__wake_up (23 samples, 0.01%)</title><rect x="99.0960%" y="149" width="0.0138%" height="15" fill="rgb(206,124,46)"/><text x="99.3460%" y="159.50"></text></g><g><title>__wake_up_common_lock (22 samples, 0.01%)</title><rect x="99.0966%" y="133" width="0.0132%" height="15" fill="rgb(249,21,11)"/><text x="99.3466%" y="143.50"></text></g><g><title>jbd2_journal_stop (116 samples, 0.07%)</title><rect x="99.0666%" y="165" width="0.0696%" height="15" fill="rgb(222,201,40)"/><text x="99.3166%" y="175.50"></text></g><g><title>kmem_cache_free (44 samples, 0.03%)</title><rect x="99.1098%" y="149" width="0.0264%" height="15" fill="rgb(235,61,29)"/><text x="99.3598%" y="159.50"></text></g><g><title>__ext4_journal_stop (120 samples, 0.07%)</title><rect x="99.0648%" y="181" width="0.0720%" height="15" fill="rgb(219,207,3)"/><text x="99.3148%" y="191.50"></text></g><g><title>__ext4_journal_start_sb (29 samples, 0.02%)</title><rect x="99.1602%" y="133" width="0.0174%" height="15" fill="rgb(222,56,46)"/><text x="99.4102%" y="143.50"></text></g><g><title>__x86_indirect_thunk_rax (26 samples, 0.02%)</title><rect x="99.3007%" y="53" width="0.0156%" height="15" fill="rgb(239,76,54)"/><text x="99.5507%" y="63.50"></text></g><g><title>ext4_inode_csum_set (200 samples, 0.12%)</title><rect x="99.2731%" y="85" width="0.1201%" height="15" fill="rgb(231,124,27)"/><text x="99.5231%" y="95.50"></text></g><g><title>ext4_inode_csum.isra.0 (178 samples, 0.11%)</title><rect x="99.2863%" y="69" width="0.1068%" height="15" fill="rgb(249,195,6)"/><text x="99.5363%" y="79.50"></text></g><g><title>crypto_shash_update (116 samples, 0.07%)</title><rect x="99.3235%" y="53" width="0.0696%" height="15" fill="rgb(237,174,47)"/><text x="99.5735%" y="63.50"></text></g><g><title>crc32c_pcl_intel_update (106 samples, 0.06%)</title><rect x="99.3295%" y="37" width="0.0636%" height="15" fill="rgb(206,201,31)"/><text x="99.5795%" y="47.50"></text></g><g><title>ext4_mark_iloc_dirty (359 samples, 0.22%)</title><rect x="99.1824%" y="117" width="0.2155%" height="15" fill="rgb(231,57,52)"/><text x="99.4324%" y="127.50"></text></g><g><title>ext4_do_update_inode (317 samples, 0.19%)</title><rect x="99.2077%" y="101" width="0.1903%" height="15" fill="rgb(248,177,22)"/><text x="99.4577%" y="111.50"></text></g><g><title>__find_get_block (24 samples, 0.01%)</title><rect x="99.4147%" y="69" width="0.0144%" height="15" fill="rgb(215,211,37)"/><text x="99.6647%" y="79.50"></text></g><g><title>__getblk_gfp (26 samples, 0.02%)</title><rect x="99.4141%" y="85" width="0.0156%" height="15" fill="rgb(241,128,51)"/><text x="99.6641%" y="95.50"></text></g><g><title>__ext4_get_inode_loc (57 samples, 0.03%)</title><rect x="99.3991%" y="101" width="0.0342%" height="15" fill="rgb(227,165,31)"/><text x="99.6491%" y="111.50"></text></g><g><title>ext4_reserve_inode_write (75 samples, 0.05%)</title><rect x="99.3979%" y="117" width="0.0450%" height="15" fill="rgb(228,167,24)"/><text x="99.6479%" y="127.50"></text></g><g><title>__mark_inode_dirty (495 samples, 0.30%)</title><rect x="99.1464%" y="165" width="0.2971%" height="15" fill="rgb(228,143,12)"/><text x="99.3964%" y="175.50"></text></g><g><title>ext4_dirty_inode (476 samples, 0.29%)</title><rect x="99.1578%" y="149" width="0.2857%" height="15" fill="rgb(249,149,8)"/><text x="99.4078%" y="159.50"></text></g><g><title>ext4_mark_inode_dirty (437 samples, 0.26%)</title><rect x="99.1812%" y="133" width="0.2623%" height="15" fill="rgb(243,35,44)"/><text x="99.4312%" y="143.50"></text></g><g><title>__mark_inode_dirty (26 samples, 0.02%)</title><rect x="99.4904%" y="117" width="0.0156%" height="15" fill="rgb(246,89,9)"/><text x="99.7404%" y="127.50"></text></g><g><title>xas_load (30 samples, 0.02%)</title><rect x="99.5144%" y="85" width="0.0180%" height="15" fill="rgb(233,213,13)"/><text x="99.7644%" y="95.50"></text></g><g><title>__xa_set_mark (41 samples, 0.02%)</title><rect x="99.5108%" y="101" width="0.0246%" height="15" fill="rgb(233,141,41)"/><text x="99.7608%" y="111.50"></text></g><g><title>_raw_spin_lock_irqsave (22 samples, 0.01%)</title><rect x="99.5354%" y="101" width="0.0132%" height="15" fill="rgb(239,167,4)"/><text x="99.7854%" y="111.50"></text></g><g><title>__mod_lruvec_state (22 samples, 0.01%)</title><rect x="99.5756%" y="85" width="0.0132%" height="15" fill="rgb(209,217,16)"/><text x="99.8256%" y="95.50"></text></g><g><title>account_page_dirtied (92 samples, 0.06%)</title><rect x="99.5510%" y="101" width="0.0552%" height="15" fill="rgb(219,88,35)"/><text x="99.8010%" y="111.50"></text></g><g><title>__set_page_dirty (188 samples, 0.11%)</title><rect x="99.5060%" y="117" width="0.1128%" height="15" fill="rgb(220,193,23)"/><text x="99.7560%" y="127.50"></text></g><g><title>xas_set_mark (18 samples, 0.01%)</title><rect x="99.6080%" y="101" width="0.0108%" height="15" fill="rgb(230,90,52)"/><text x="99.8580%" y="111.50"></text></g><g><title>block_write_end (294 samples, 0.18%)</title><rect x="99.4448%" y="165" width="0.1765%" height="15" fill="rgb(252,106,19)"/><text x="99.6948%" y="175.50"></text></g><g><title>__block_commit_write.isra.0 (293 samples, 0.18%)</title><rect x="99.4454%" y="149" width="0.1759%" height="15" fill="rgb(206,74,20)"/><text x="99.6954%" y="159.50"></text></g><g><title>mark_buffer_dirty (260 samples, 0.16%)</title><rect x="99.4652%" y="133" width="0.1561%" height="15" fill="rgb(230,138,44)"/><text x="99.7152%" y="143.50"></text></g><g><title>generic_write_end (807 samples, 0.48%)</title><rect x="99.1374%" y="181" width="0.4844%" height="15" fill="rgb(235,182,43)"/><text x="99.3874%" y="191.50"></text></g><g><title>ext4_da_write_end (962 samples, 0.58%)</title><rect x="99.0558%" y="197" width="0.5775%" height="15" fill="rgb(242,16,51)"/><text x="99.3058%" y="207.50"></text></g><g><title>unlock_page (18 samples, 0.01%)</title><rect x="99.6224%" y="181" width="0.0108%" height="15" fill="rgb(248,9,4)"/><text x="99.8724%" y="191.50"></text></g><g><title>iov_iter_advance (17 samples, 0.01%)</title><rect x="99.6350%" y="197" width="0.0102%" height="15" fill="rgb(210,31,22)"/><text x="99.8850%" y="207.50"></text></g><g><title>iov_iter_copy_from_user_atomic (375 samples, 0.23%)</title><rect x="99.6452%" y="197" width="0.2251%" height="15" fill="rgb(239,54,39)"/><text x="99.8952%" y="207.50"></text></g><g><title>copy_user_generic_string (360 samples, 0.22%)</title><rect x="99.6542%" y="181" width="0.2161%" height="15" fill="rgb(230,99,41)"/><text x="99.9042%" y="191.50"></text></g><g><title>iov_iter_fault_in_readable (27 samples, 0.02%)</title><rect x="99.8703%" y="197" width="0.0162%" height="15" fill="rgb(253,106,12)"/><text x="100.1203%" y="207.50"></text></g><g><title>generic_perform_write (3,512 samples, 2.11%)</title><rect x="97.7910%" y="213" width="2.1081%" height="15" fill="rgb(213,46,41)"/><text x="98.0410%" y="223.50">g..</text></g><g><title>unlock_page (20 samples, 0.01%)</title><rect x="99.8872%" y="197" width="0.0120%" height="15" fill="rgb(215,133,35)"/><text x="100.1372%" y="207.50"></text></g><g><title>__generic_file_write_iter (3,575 samples, 2.15%)</title><rect x="97.7550%" y="229" width="2.1459%" height="15" fill="rgb(213,28,5)"/><text x="98.0050%" y="239.50">_..</text></g><g><title>__vfs_write (3,582 samples, 2.15%)</title><rect x="97.7532%" y="277" width="2.1501%" height="15" fill="rgb(215,77,49)"/><text x="98.0032%" y="287.50">_..</text></g><g><title>new_sync_write (3,581 samples, 2.15%)</title><rect x="97.7538%" y="261" width="2.1495%" height="15" fill="rgb(248,100,22)"/><text x="98.0038%" y="271.50">n..</text></g><g><title>ext4_file_write_iter (3,579 samples, 2.15%)</title><rect x="97.7550%" y="245" width="2.1483%" height="15" fill="rgb(208,67,9)"/><text x="98.0050%" y="255.50">e..</text></g><g><title>__GI___libc_write (3,601 samples, 2.16%)</title><rect x="97.7442%" y="373" width="2.1615%" height="15" fill="rgb(219,133,21)"/><text x="97.9942%" y="383.50">_..</text></g><g><title>entry_SYSCALL_64 (3,598 samples, 2.16%)</title><rect x="97.7460%" y="357" width="2.1597%" height="15" fill="rgb(246,46,29)"/><text x="97.9960%" y="367.50">e..</text></g><g><title>do_syscall_64 (3,596 samples, 2.16%)</title><rect x="97.7472%" y="341" width="2.1585%" height="15" fill="rgb(246,185,52)"/><text x="97.9972%" y="351.50">d..</text></g><g><title>__x64_sys_write (3,594 samples, 2.16%)</title><rect x="97.7484%" y="325" width="2.1573%" height="15" fill="rgb(252,136,11)"/><text x="97.9984%" y="335.50">_..</text></g><g><title>ksys_write (3,594 samples, 2.16%)</title><rect x="97.7484%" y="309" width="2.1573%" height="15" fill="rgb(219,138,53)"/><text x="97.9984%" y="319.50">k..</text></g><g><title>vfs_write (3,590 samples, 2.15%)</title><rect x="97.7508%" y="293" width="2.1549%" height="15" fill="rgb(211,51,23)"/><text x="98.0008%" y="303.50">v..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (3,602 samples, 2.16%)</title><rect x="97.7442%" y="421" width="2.1621%" height="15" fill="rgb(247,221,28)"/><text x="97.9942%" y="431.50">&lt;..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (3,602 samples, 2.16%)</title><rect x="97.7442%" y="405" width="2.1621%" height="15" fill="rgb(251,222,45)"/><text x="97.9942%" y="415.50">&lt;..</text></g><g><title>std::sys::unix::fd::FileDesc::write (3,602 samples, 2.16%)</title><rect x="97.7442%" y="389" width="2.1621%" height="15" fill="rgb(217,162,53)"/><text x="97.9942%" y="399.50">s..</text></g><g><title>&lt;std::io::buffered::BufWriter&lt;W&gt; as std::io::Write&gt;::write (3,606 samples, 2.16%)</title><rect x="97.7436%" y="437" width="2.1645%" height="15" fill="rgb(229,93,14)"/><text x="97.9936%" y="447.50">&lt;..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3,731 samples, 2.24%)</title><rect x="97.7430%" y="485" width="2.2396%" height="15" fill="rgb(209,67,49)"/><text x="97.9930%" y="495.50">&lt;..</text></g><g><title>std::io::Write::write_all (3,731 samples, 2.24%)</title><rect x="97.7430%" y="469" width="2.2396%" height="15" fill="rgb(213,87,29)"/><text x="97.9930%" y="479.50">s..</text></g><g><title>&lt;std::io::buffered::LineWriter&lt;W&gt; as std::io::Write&gt;::write (3,730 samples, 2.24%)</title><rect x="97.7436%" y="453" width="2.2390%" height="15" fill="rgb(205,151,52)"/><text x="97.9936%" y="463.50">&lt;..</text></g><g><title>std::memchr::memrchr (124 samples, 0.07%)</title><rect x="99.9082%" y="437" width="0.0744%" height="15" fill="rgb(253,215,39)"/><text x="100.1582%" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr (124 samples, 0.07%)</title><rect x="99.9082%" y="421" width="0.0744%" height="15" fill="rgb(221,220,41)"/><text x="100.1582%" y="431.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (124 samples, 0.07%)</title><rect x="99.9082%" y="405" width="0.0744%" height="15" fill="rgb(218,133,21)"/><text x="100.1582%" y="415.50"></text></g><g><title>__memrchr_sse2 (124 samples, 0.07%)</title><rect x="99.9082%" y="389" width="0.0744%" height="15" fill="rgb(221,193,43)"/><text x="100.1582%" y="399.50"></text></g><g><title>lll::string_stream_editor::OutputBuffer::append_char (10,757 samples, 6.46%)</title><rect x="93.5298%" y="533" width="6.4570%" height="15" fill="rgb(240,128,52)"/><text x="93.7798%" y="543.50">lll::str..</text></g><g><title>lll::string_stream_editor::OutputBuffer::flush (3,738 samples, 2.24%)</title><rect x="97.7430%" y="517" width="2.2438%" height="15" fill="rgb(253,114,12)"/><text x="97.9930%" y="527.50">l..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (3,738 samples, 2.24%)</title><rect x="97.7430%" y="501" width="2.2438%" height="15" fill="rgb(215,223,47)"/><text x="97.9930%" y="511.50">&lt;..</text></g><g><title>[unknown] (166,571 samples, 99.99%)</title><rect x="0.0012%" y="565" width="99.9862%" height="15" fill="rgb(248,225,23)"/><text x="0.2512%" y="575.50">[unknown]</text></g><g><title>lll::string_stream_editor::process_string_stream_bufread_bufwrite (166,570 samples, 99.99%)</title><rect x="0.0018%" y="549" width="99.9856%" height="15" fill="rgb(250,108,0)"/><text x="0.2518%" y="559.50">lll::string_stream_editor::process_string_stream_bufread_bufwrite</text></g><g><title>lll (166,583 samples, 99.99%)</title><rect x="0.0000%" y="581" width="99.9934%" height="15" fill="rgb(228,208,7)"/><text x="0.2500%" y="591.50">lll</text></g><g><title>all (166,594 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(244,45,10)"/><text x="0.2500%" y="607.50"></text></g></svg></svg>